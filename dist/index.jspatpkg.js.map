{"version":3,"file":"index.jspatpkg.js","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","sources":["webpack://@jspatcher/package-dsp/./dsps|lazy|/^/.*/dspMeta/.json$/|groupOptions: {}|namespace object","webpack://@jspatcher/package-dsp/./dsps|lazy|/^/.*/dspModule/.wasm$/|groupOptions: {}|namespace object","webpack://@jspatcher/package-dsp/./src/FaustDspObject.ts","webpack://@jspatcher/package-dsp/./src/getDsps.ts","webpack://@jspatcher/package-dsp/./src/index.ts","webpack://@jspatcher/package-dsp/./src/package-info.ts","webpack://@jspatcher/package-dsp/./src/sdk.ts","webpack://@jspatcher/package-dsp/../../faustwasm/dist/esm|lazy|groupOptions: {}|strict namespace object","webpack://@jspatcher/package-dsp/../../faustwasm/dist/esm/index.js","webpack://@jspatcher/package-dsp/webpack/bootstrap","webpack://@jspatcher/package-dsp/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-dsp/webpack/runtime/define property getters","webpack://@jspatcher/package-dsp/webpack/runtime/ensure chunk","webpack://@jspatcher/package-dsp/webpack/runtime/get javascript chunk filename","webpack://@jspatcher/package-dsp/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-dsp/webpack/runtime/load script","webpack://@jspatcher/package-dsp/webpack/runtime/make namespace object","webpack://@jspatcher/package-dsp/webpack/runtime/publicPath","webpack://@jspatcher/package-dsp/webpack/runtime/jsonp chunk loading","webpack://@jspatcher/package-dsp/./src/index.jspatpkg.ts"],"sourcesContent":["var map = {\n\t\"./abs/dspMeta.json\": [\n\t\t\"./dsps/abs/dspMeta.json\",\n\t\t\"dsps_abs_dspMeta_json\"\n\t],\n\t\"./acos/dspMeta.json\": [\n\t\t\"./dsps/acos/dspMeta.json\",\n\t\t\"dsps_acos_dspMeta_json\"\n\t],\n\t\"./acosh/dspMeta.json\": [\n\t\t\"./dsps/acosh/dspMeta.json\",\n\t\t\"dsps_acosh_dspMeta_json\"\n\t],\n\t\"./add/dspMeta.json\": [\n\t\t\"./dsps/add/dspMeta.json\",\n\t\t\"dsps_add_dspMeta_json\"\n\t],\n\t\"./allpass/dspMeta.json\": [\n\t\t\"./dsps/allpass/dspMeta.json\",\n\t\t\"dsps_allpass_dspMeta_json\"\n\t],\n\t\"./asin/dspMeta.json\": [\n\t\t\"./dsps/asin/dspMeta.json\",\n\t\t\"dsps_asin_dspMeta_json\"\n\t],\n\t\"./asinh/dspMeta.json\": [\n\t\t\"./dsps/asinh/dspMeta.json\",\n\t\t\"dsps_asinh_dspMeta_json\"\n\t],\n\t\"./atan/dspMeta.json\": [\n\t\t\"./dsps/atan/dspMeta.json\",\n\t\t\"dsps_atan_dspMeta_json\"\n\t],\n\t\"./atan2/dspMeta.json\": [\n\t\t\"./dsps/atan2/dspMeta.json\",\n\t\t\"dsps_atan2_dspMeta_json\"\n\t],\n\t\"./atanh/dspMeta.json\": [\n\t\t\"./dsps/atanh/dspMeta.json\",\n\t\t\"dsps_atanh_dspMeta_json\"\n\t],\n\t\"./atodb/dspMeta.json\": [\n\t\t\"./dsps/atodb/dspMeta.json\",\n\t\t\"dsps_atodb_dspMeta_json\"\n\t],\n\t\"./bandpass/dspMeta.json\": [\n\t\t\"./dsps/bandpass/dspMeta.json\",\n\t\t\"dsps_bandpass_dspMeta_json\"\n\t],\n\t\"./biquad/dspMeta.json\": [\n\t\t\"./dsps/biquad/dspMeta.json\",\n\t\t\"dsps_biquad_dspMeta_json\"\n\t],\n\t\"./bitand/dspMeta.json\": [\n\t\t\"./dsps/bitand/dspMeta.json\",\n\t\t\"dsps_bitand_dspMeta_json\"\n\t],\n\t\"./bitor/dspMeta.json\": [\n\t\t\"./dsps/bitor/dspMeta.json\",\n\t\t\"dsps_bitor_dspMeta_json\"\n\t],\n\t\"./bitxor/dspMeta.json\": [\n\t\t\"./dsps/bitxor/dspMeta.json\",\n\t\t\"dsps_bitxor_dspMeta_json\"\n\t],\n\t\"./change/dspMeta.json\": [\n\t\t\"./dsps/change/dspMeta.json\",\n\t\t\"dsps_change_dspMeta_json\"\n\t],\n\t\"./cycle/dspMeta.json\": [\n\t\t\"./dsps/cycle/dspMeta.json\",\n\t\t\"dsps_cycle_dspMeta_json\"\n\t],\n\t\"./dbtoa/dspMeta.json\": [\n\t\t\"./dsps/dbtoa/dspMeta.json\",\n\t\t\"dsps_dbtoa_dspMeta_json\"\n\t],\n\t\"./div/dspMeta.json\": [\n\t\t\"./dsps/div/dspMeta.json\",\n\t\t\"dsps_div_dspMeta_json\"\n\t],\n\t\"./eq/dspMeta.json\": [\n\t\t\"./dsps/eq/dspMeta.json\",\n\t\t\"dsps_eq_dspMeta_json\"\n\t],\n\t\"./filtercoeff/dspMeta.json\": [\n\t\t\"./dsps/filtercoeff/dspMeta.json\",\n\t\t\"dsps_filtercoeff_dspMeta_json\"\n\t],\n\t\"./ftom/dspMeta.json\": [\n\t\t\"./dsps/ftom/dspMeta.json\",\n\t\t\"dsps_ftom_dspMeta_json\"\n\t],\n\t\"./geq/dspMeta.json\": [\n\t\t\"./dsps/geq/dspMeta.json\",\n\t\t\"dsps_geq_dspMeta_json\"\n\t],\n\t\"./gtr/dspMeta.json\": [\n\t\t\"./dsps/gtr/dspMeta.json\",\n\t\t\"dsps_gtr_dspMeta_json\"\n\t],\n\t\"./highpass/dspMeta.json\": [\n\t\t\"./dsps/highpass/dspMeta.json\",\n\t\t\"dsps_highpass_dspMeta_json\"\n\t],\n\t\"./highshelf/dspMeta.json\": [\n\t\t\"./dsps/highshelf/dspMeta.json\",\n\t\t\"dsps_highshelf_dspMeta_json\"\n\t],\n\t\"./leq/dspMeta.json\": [\n\t\t\"./dsps/leq/dspMeta.json\",\n\t\t\"dsps_leq_dspMeta_json\"\n\t],\n\t\"./log/dspMeta.json\": [\n\t\t\"./dsps/log/dspMeta.json\",\n\t\t\"dsps_log_dspMeta_json\"\n\t],\n\t\"./lowpass/dspMeta.json\": [\n\t\t\"./dsps/lowpass/dspMeta.json\",\n\t\t\"dsps_lowpass_dspMeta_json\"\n\t],\n\t\"./lowshelf/dspMeta.json\": [\n\t\t\"./dsps/lowshelf/dspMeta.json\",\n\t\t\"dsps_lowshelf_dspMeta_json\"\n\t],\n\t\"./lss/dspMeta.json\": [\n\t\t\"./dsps/lss/dspMeta.json\",\n\t\t\"dsps_lss_dspMeta_json\"\n\t],\n\t\"./max/dspMeta.json\": [\n\t\t\"./dsps/max/dspMeta.json\",\n\t\t\"dsps_max_dspMeta_json\"\n\t],\n\t\"./min/dspMeta.json\": [\n\t\t\"./dsps/min/dspMeta.json\",\n\t\t\"dsps_min_dspMeta_json\"\n\t],\n\t\"./mod/dspMeta.json\": [\n\t\t\"./dsps/mod/dspMeta.json\",\n\t\t\"dsps_mod_dspMeta_json\"\n\t],\n\t\"./mtof/dspMeta.json\": [\n\t\t\"./dsps/mtof/dspMeta.json\",\n\t\t\"dsps_mtof_dspMeta_json\"\n\t],\n\t\"./mul/dspMeta.json\": [\n\t\t\"./dsps/mul/dspMeta.json\",\n\t\t\"dsps_mul_dspMeta_json\"\n\t],\n\t\"./neq/dspMeta.json\": [\n\t\t\"./dsps/neq/dspMeta.json\",\n\t\t\"dsps_neq_dspMeta_json\"\n\t],\n\t\"./noise/dspMeta.json\": [\n\t\t\"./dsps/noise/dspMeta.json\",\n\t\t\"dsps_noise_dspMeta_json\"\n\t],\n\t\"./notch/dspMeta.json\": [\n\t\t\"./dsps/notch/dspMeta.json\",\n\t\t\"dsps_notch_dspMeta_json\"\n\t],\n\t\"./peaknotch/dspMeta.json\": [\n\t\t\"./dsps/peaknotch/dspMeta.json\",\n\t\t\"dsps_peaknotch_dspMeta_json\"\n\t],\n\t\"./phasor/dspMeta.json\": [\n\t\t\"./dsps/phasor/dspMeta.json\",\n\t\t\"dsps_phasor_dspMeta_json\"\n\t],\n\t\"./pink/dspMeta.json\": [\n\t\t\"./dsps/pink/dspMeta.json\",\n\t\t\"dsps_pink_dspMeta_json\"\n\t],\n\t\"./rdiv/dspMeta.json\": [\n\t\t\"./dsps/rdiv/dspMeta.json\",\n\t\t\"dsps_rdiv_dspMeta_json\"\n\t],\n\t\"./rect/dspMeta.json\": [\n\t\t\"./dsps/rect/dspMeta.json\",\n\t\t\"dsps_rect_dspMeta_json\"\n\t],\n\t\"./rsub/dspMeta.json\": [\n\t\t\"./dsps/rsub/dspMeta.json\",\n\t\t\"dsps_rsub_dspMeta_json\"\n\t],\n\t\"./smooth/dspMeta.json\": [\n\t\t\"./dsps/smooth/dspMeta.json\",\n\t\t\"dsps_smooth_dspMeta_json\"\n\t],\n\t\"./sub/dspMeta.json\": [\n\t\t\"./dsps/sub/dspMeta.json\",\n\t\t\"dsps_sub_dspMeta_json\"\n\t],\n\t\"./tri/dspMeta.json\": [\n\t\t\"./dsps/tri/dspMeta.json\",\n\t\t\"dsps_tri_dspMeta_json\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./dsps lazy recursive ^\\\\.\\\\/.*\\\\/dspMeta\\\\.json$\";\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./abs/dspModule.wasm\": [\n\t\t\"./dsps/abs/dspModule.wasm\",\n\t\t\"dsps_abs_dspModule_wasm\"\n\t],\n\t\"./acos/dspModule.wasm\": [\n\t\t\"./dsps/acos/dspModule.wasm\",\n\t\t\"dsps_acos_dspModule_wasm\"\n\t],\n\t\"./acosh/dspModule.wasm\": [\n\t\t\"./dsps/acosh/dspModule.wasm\",\n\t\t\"dsps_acosh_dspModule_wasm\"\n\t],\n\t\"./add/dspModule.wasm\": [\n\t\t\"./dsps/add/dspModule.wasm\",\n\t\t\"dsps_add_dspModule_wasm\"\n\t],\n\t\"./allpass/dspModule.wasm\": [\n\t\t\"./dsps/allpass/dspModule.wasm\",\n\t\t\"dsps_allpass_dspModule_wasm\"\n\t],\n\t\"./asin/dspModule.wasm\": [\n\t\t\"./dsps/asin/dspModule.wasm\",\n\t\t\"dsps_asin_dspModule_wasm\"\n\t],\n\t\"./asinh/dspModule.wasm\": [\n\t\t\"./dsps/asinh/dspModule.wasm\",\n\t\t\"dsps_asinh_dspModule_wasm\"\n\t],\n\t\"./atan/dspModule.wasm\": [\n\t\t\"./dsps/atan/dspModule.wasm\",\n\t\t\"dsps_atan_dspModule_wasm\"\n\t],\n\t\"./atan2/dspModule.wasm\": [\n\t\t\"./dsps/atan2/dspModule.wasm\",\n\t\t\"dsps_atan2_dspModule_wasm\"\n\t],\n\t\"./atanh/dspModule.wasm\": [\n\t\t\"./dsps/atanh/dspModule.wasm\",\n\t\t\"dsps_atanh_dspModule_wasm\"\n\t],\n\t\"./atodb/dspModule.wasm\": [\n\t\t\"./dsps/atodb/dspModule.wasm\",\n\t\t\"dsps_atodb_dspModule_wasm\"\n\t],\n\t\"./bandpass/dspModule.wasm\": [\n\t\t\"./dsps/bandpass/dspModule.wasm\",\n\t\t\"dsps_bandpass_dspModule_wasm\"\n\t],\n\t\"./biquad/dspModule.wasm\": [\n\t\t\"./dsps/biquad/dspModule.wasm\",\n\t\t\"dsps_biquad_dspModule_wasm\"\n\t],\n\t\"./bitand/dspModule.wasm\": [\n\t\t\"./dsps/bitand/dspModule.wasm\",\n\t\t\"dsps_bitand_dspModule_wasm\"\n\t],\n\t\"./bitor/dspModule.wasm\": [\n\t\t\"./dsps/bitor/dspModule.wasm\",\n\t\t\"dsps_bitor_dspModule_wasm\"\n\t],\n\t\"./bitxor/dspModule.wasm\": [\n\t\t\"./dsps/bitxor/dspModule.wasm\",\n\t\t\"dsps_bitxor_dspModule_wasm\"\n\t],\n\t\"./change/dspModule.wasm\": [\n\t\t\"./dsps/change/dspModule.wasm\",\n\t\t\"dsps_change_dspModule_wasm\"\n\t],\n\t\"./cycle/dspModule.wasm\": [\n\t\t\"./dsps/cycle/dspModule.wasm\",\n\t\t\"dsps_cycle_dspModule_wasm\"\n\t],\n\t\"./dbtoa/dspModule.wasm\": [\n\t\t\"./dsps/dbtoa/dspModule.wasm\",\n\t\t\"dsps_dbtoa_dspModule_wasm\"\n\t],\n\t\"./div/dspModule.wasm\": [\n\t\t\"./dsps/div/dspModule.wasm\",\n\t\t\"dsps_div_dspModule_wasm\"\n\t],\n\t\"./eq/dspModule.wasm\": [\n\t\t\"./dsps/eq/dspModule.wasm\",\n\t\t\"dsps_eq_dspModule_wasm\"\n\t],\n\t\"./filtercoeff/dspModule.wasm\": [\n\t\t\"./dsps/filtercoeff/dspModule.wasm\",\n\t\t\"dsps_filtercoeff_dspModule_wasm\"\n\t],\n\t\"./ftom/dspModule.wasm\": [\n\t\t\"./dsps/ftom/dspModule.wasm\",\n\t\t\"dsps_ftom_dspModule_wasm\"\n\t],\n\t\"./geq/dspModule.wasm\": [\n\t\t\"./dsps/geq/dspModule.wasm\",\n\t\t\"dsps_geq_dspModule_wasm\"\n\t],\n\t\"./gtr/dspModule.wasm\": [\n\t\t\"./dsps/gtr/dspModule.wasm\",\n\t\t\"dsps_gtr_dspModule_wasm\"\n\t],\n\t\"./highpass/dspModule.wasm\": [\n\t\t\"./dsps/highpass/dspModule.wasm\",\n\t\t\"dsps_highpass_dspModule_wasm\"\n\t],\n\t\"./highshelf/dspModule.wasm\": [\n\t\t\"./dsps/highshelf/dspModule.wasm\",\n\t\t\"dsps_highshelf_dspModule_wasm\"\n\t],\n\t\"./leq/dspModule.wasm\": [\n\t\t\"./dsps/leq/dspModule.wasm\",\n\t\t\"dsps_leq_dspModule_wasm\"\n\t],\n\t\"./log/dspModule.wasm\": [\n\t\t\"./dsps/log/dspModule.wasm\",\n\t\t\"dsps_log_dspModule_wasm\"\n\t],\n\t\"./lowpass/dspModule.wasm\": [\n\t\t\"./dsps/lowpass/dspModule.wasm\",\n\t\t\"dsps_lowpass_dspModule_wasm\"\n\t],\n\t\"./lowshelf/dspModule.wasm\": [\n\t\t\"./dsps/lowshelf/dspModule.wasm\",\n\t\t\"dsps_lowshelf_dspModule_wasm\"\n\t],\n\t\"./lss/dspModule.wasm\": [\n\t\t\"./dsps/lss/dspModule.wasm\",\n\t\t\"dsps_lss_dspModule_wasm\"\n\t],\n\t\"./max/dspModule.wasm\": [\n\t\t\"./dsps/max/dspModule.wasm\",\n\t\t\"dsps_max_dspModule_wasm\"\n\t],\n\t\"./min/dspModule.wasm\": [\n\t\t\"./dsps/min/dspModule.wasm\",\n\t\t\"dsps_min_dspModule_wasm\"\n\t],\n\t\"./mod/dspModule.wasm\": [\n\t\t\"./dsps/mod/dspModule.wasm\",\n\t\t\"dsps_mod_dspModule_wasm\"\n\t],\n\t\"./mtof/dspModule.wasm\": [\n\t\t\"./dsps/mtof/dspModule.wasm\",\n\t\t\"dsps_mtof_dspModule_wasm\"\n\t],\n\t\"./mul/dspModule.wasm\": [\n\t\t\"./dsps/mul/dspModule.wasm\",\n\t\t\"dsps_mul_dspModule_wasm\"\n\t],\n\t\"./neq/dspModule.wasm\": [\n\t\t\"./dsps/neq/dspModule.wasm\",\n\t\t\"dsps_neq_dspModule_wasm\"\n\t],\n\t\"./noise/dspModule.wasm\": [\n\t\t\"./dsps/noise/dspModule.wasm\",\n\t\t\"dsps_noise_dspModule_wasm\"\n\t],\n\t\"./notch/dspModule.wasm\": [\n\t\t\"./dsps/notch/dspModule.wasm\",\n\t\t\"dsps_notch_dspModule_wasm\"\n\t],\n\t\"./peaknotch/dspModule.wasm\": [\n\t\t\"./dsps/peaknotch/dspModule.wasm\",\n\t\t\"dsps_peaknotch_dspModule_wasm\"\n\t],\n\t\"./phasor/dspModule.wasm\": [\n\t\t\"./dsps/phasor/dspModule.wasm\",\n\t\t\"dsps_phasor_dspModule_wasm\"\n\t],\n\t\"./pink/dspModule.wasm\": [\n\t\t\"./dsps/pink/dspModule.wasm\",\n\t\t\"dsps_pink_dspModule_wasm\"\n\t],\n\t\"./rdiv/dspModule.wasm\": [\n\t\t\"./dsps/rdiv/dspModule.wasm\",\n\t\t\"dsps_rdiv_dspModule_wasm\"\n\t],\n\t\"./rect/dspModule.wasm\": [\n\t\t\"./dsps/rect/dspModule.wasm\",\n\t\t\"dsps_rect_dspModule_wasm\"\n\t],\n\t\"./rsub/dspModule.wasm\": [\n\t\t\"./dsps/rsub/dspModule.wasm\",\n\t\t\"dsps_rsub_dspModule_wasm\"\n\t],\n\t\"./smooth/dspModule.wasm\": [\n\t\t\"./dsps/smooth/dspModule.wasm\",\n\t\t\"dsps_smooth_dspModule_wasm\"\n\t],\n\t\"./sub/dspModule.wasm\": [\n\t\t\"./dsps/sub/dspModule.wasm\",\n\t\t\"dsps_sub_dspModule_wasm\"\n\t],\n\t\"./tri/dspModule.wasm\": [\n\t\t\"./dsps/tri/dspModule.wasm\",\n\t\t\"dsps_tri_dspModule_wasm\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./dsps lazy recursive ^\\\\.\\\\/.*\\\\/dspModule\\\\.wasm$\";\nmodule.exports = webpackAsyncContext;","import { FaustAudioWorkletNode, FaustDspMeta, FaustMonoDspGenerator, LooseFaustDspFactory } from \"@shren/faustwasm\";\r\nimport { author, name, version, description } from \"./index\";\r\nimport { Bang, DefaultObject, DefaultUI } from \"./sdk\";\r\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta, IPropsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface FaustDspInternalState {\r\n    dspFactory: LooseFaustDspFactory;\r\n    faustDspGenerator: FaustMonoDspGenerator;\r\n    dspId: string;\r\n    merger: ChannelMergerNode;\r\n    node: FaustAudioWorkletNode;\r\n    splitter: ChannelSplitterNode;\r\n    defaultInputs: [];\r\n    constants: ConstantSourceNode[];\r\n    constantsConnected: boolean[];\r\n    argsOffset: number;\r\n}\r\n\r\ninterface Props {\r\n    smoothInput: number;\r\n}\r\n\r\nexport default class FaustDspObject<\r\n    S = {},\r\n    I extends [Bang | any, ...any[]] = [Bang],\r\n    O extends any[] = [],\r\n    A extends any[] = any[],\r\n    P = Partial<Props> & Record<string, any>\r\n> extends DefaultObject<{}, S, I, O, A, P & Props> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"audio input connection\",\r\n        varLength: true\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"signal\",\r\n        description: \"audio output connection\",\r\n        varLength: true\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"number\",\r\n        optional: true,\r\n        varLength: true,\r\n        description: \"Initial inputs\",\r\n        default: 0\r\n    }];\r\n    static props: IPropsMeta<Props> = {\r\n        smoothInput: {\r\n            type: \"number\",\r\n            description: \"Linear interpolate to input values within a duration in seconds\",\r\n            default: 0.01,\r\n        }\r\n    };\r\n    static UI = DefaultUI;\r\n    _: Partial<FaustDspInternalState> = {\r\n        defaultInputs: [],\r\n        constants: [],\r\n        constantsConnected: [],\r\n        argsOffset: 0\r\n    };\r\n    get audioConnections() {\r\n        return this.inletLines.map(set => [...set].find(l => !l.disabled && l.isConnectableByAudio)).map(l => !!l);\r\n    }\r\n    checkAndFillUnconnected() {\r\n        const { audioConnections } = this;\r\n        const { constants, constantsConnected } = this._;\r\n        if (!this.inlets) return;\r\n        for (let i = 0; i < this.inlets; i++) {\r\n            if (audioConnections[i] === constantsConnected[i]) continue;\r\n            const constant = constants[i];\r\n            if (audioConnections[i]) {\r\n                constant.offset.value = 0;\r\n            } else if (!audioConnections[i] && !constantsConnected[i]) {\r\n                constant.offset.value = this._.defaultInputs[i] || 0;\r\n            }\r\n            constantsConnected[i] = audioConnections[i];\r\n        }\r\n    }\r\n    subscribe() {\r\n        super.subscribe();\r\n        this.on(\"preInit\", () => {\r\n            const meta: FaustDspMeta = JSON.parse(this._.dspFactory.json);\r\n            const { inputs, outputs, meta: declaredMeta } = meta;\r\n            const defaultInputsStr = declaredMeta.find(m => \"defaultInputs\" in m)?.defaultInputs;\r\n            if (defaultInputsStr) this._.defaultInputs = JSON.parse(defaultInputsStr);\r\n            this._.argsOffset = +declaredMeta.find(m => \"argsOffset\" in m)?.argsOffset || 0;\r\n            if (inputs) {\r\n                const merger = this.audioCtx.createChannelMerger(inputs);\r\n                this._.merger = merger;\r\n                for (let i = 0; i < inputs; i++) {\r\n                    const constant = this.audioCtx.createConstantSource();\r\n                    this._.constants[i] = constant;\r\n                    constant.connect(merger, 0, i);\r\n                    this._.constantsConnected[i] = false;\r\n                }\r\n            }\r\n            const splitter = this.audioCtx.createChannelSplitter(outputs);\r\n            this._.splitter = splitter;\r\n\r\n            this.inlets = inputs;\r\n            this.outlets = outputs;\r\n            this.disconnectAudio();\r\n            this.inletAudioConnections = this._.constants.map((node) => ({ node: node.offset, index: 0 }));\r\n            this.outletAudioConnections = new Array(outputs).fill(null).map((v, i) => ({ node: splitter, index: i }));\r\n            this.connectAudio();\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            const { dspFactory, faustDspGenerator, dspId, constants, merger, splitter, argsOffset } = this._;\r\n            const node = await faustDspGenerator.createNode(this.audioCtx, dspId, dspFactory);\r\n            this._.node = node;\r\n            this.checkAndFillUnconnected();\r\n            merger?.connect(node);\r\n            node.connect(splitter);\r\n            constants.forEach((constant, i) => {\r\n                if (!this._.constantsConnected[i]) constant.offset.value = +this.args[i - argsOffset] || (this._.defaultInputs[i] ?? 0);\r\n                constant.start();\r\n            });\r\n        });\r\n        this.on(\"argsUpdated\", () => {\r\n            this._.constants.forEach((constant, i) => {\r\n                if (!this._.constantsConnected[i]) constant.offset.value = +this.args[i - this._.argsOffset] || (this._.defaultInputs[i] ?? 0);\r\n            });\r\n        })\r\n        this.on(\"inlet\", ({ inlet, data }) => {\r\n            if (typeof data === \"number\") {\r\n                if (this._.constants[inlet] && !this._.constantsConnected[inlet]) {\r\n                    const constant = this._.constants[inlet];\r\n                    constant.offset.value = constant.offset.value;\r\n                    constant.offset.linearRampToValueAtTime(data, this.audioCtx.currentTime + this.getProp(\"smoothInput\"));\r\n                }\r\n            }\r\n        });\r\n        this.on(\"connectedInlet\", () => this.checkAndFillUnconnected());\r\n        this.on(\"disconnectedInlet\", () => this.checkAndFillUnconnected());\r\n        this.on(\"destroy\", () => {\r\n            const { constants, merger, splitter, node } = this._;\r\n            constants.forEach(constant => constant?.disconnect());\r\n            merger?.disconnect();\r\n            splitter?.disconnect();\r\n            node?.disconnect();\r\n            node?.destroy();\r\n        })\r\n    }\r\n}\r\n","import type { LooseFaustDspFactory } from \"@shren/faustwasm\";\r\n\r\nexport default async () => {\r\n    const dsps: Record<string, LooseFaustDspFactory> = {};\r\n    const listIn = await import(\"../dsps/dsps.json\") as any;\r\n    const list = JSON.parse(listIn.default);\r\n    for (const dspId of list) {\r\n        const moduleUri = (await import(`../dsps/${dspId}/dspModule.wasm`)).default as string;\r\n        const moduleRes = await fetch(moduleUri);\r\n        const module = await WebAssembly.compileStreaming(moduleRes);\r\n        const json = (await import(`../dsps/${dspId}/dspMeta.json`)).default;\r\n        dsps[dspId] = {\r\n            module,\r\n            json\r\n        }\r\n    }\r\n    return dsps;\r\n};\r\n","import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;\r\n","const json = require(\"../package.json\");\r\n\r\nexport default JSON.parse(json);\r\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    PatcherAudio,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../faustwasm/dist/esm lazy recursive\";\nmodule.exports = webpackEmptyAsyncContext;","// src/instantiateFaustModuleFromFile.ts\nvar instantiateFaustModuleFromFile = async (jsFile, dataFile = jsFile.replace(/c?js$/, \"data\"), wasmFile = jsFile.replace(/c?js$/, \"wasm\")) => {\n  let FaustModule;\n  let dataBinary;\n  let wasmBinary;\n  if (typeof globalThis.fetch === \"function\") {\n    let jsCode = await (await fetch(jsFile)).text();\n    jsCode = `${jsCode}\nexport default FaustModule;\n`;\n    const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n    FaustModule = (await import(jsFileMod)).default;\n    dataBinary = await (await fetch(dataFile)).arrayBuffer();\n    wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n  } else {\n    const fs = await import(\"fs/promises\");\n    const { pathToFileURL } = await import(\"url\");\n    let jsCode = await fs.readFile(jsFile, { encoding: \"utf-8\" });\n    jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default FaustModule;\n`;\n    const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n    await fs.writeFile(jsFileMod, jsCode);\n    FaustModule = (await import(pathToFileURL(jsFileMod).href)).default;\n    await fs.unlink(jsFileMod);\n    dataBinary = (await fs.readFile(dataFile)).buffer;\n    wasmBinary = (await fs.readFile(wasmFile)).buffer;\n  }\n  const faustModule = await FaustModule({\n    wasmBinary,\n    getPreloadedPackage: (remotePackageName, remotePackageSize) => {\n      if (remotePackageName === \"libfaust-wasm.data\")\n        return dataBinary;\n      return new ArrayBuffer(0);\n    }\n  });\n  return faustModule;\n};\nvar instantiateFaustModuleFromFile_default = instantiateFaustModuleFromFile;\n\n// src/FaustAudioWorkletProcessor.ts\nvar getFaustAudioWorkletProcessor = (dependencies, faustData) => {\n  const { registerProcessor, AudioWorkletProcessor, sampleRate } = globalThis;\n  const {\n    FaustBaseWebAudioDsp: FaustBaseWebAudioDsp2,\n    FaustWasmInstantiator: FaustWasmInstantiator2\n  } = dependencies;\n  const {\n    dspName,\n    dspMeta,\n    effectMeta,\n    poly\n  } = faustData;\n  class FaustAudioWorkletProcessor extends AudioWorkletProcessor {\n    constructor(options) {\n      super(options);\n      this.port.onmessage = (e) => this.handleMessageAux(e);\n    }\n    static get parameterDescriptors() {\n      const params = [];\n      const callback = (item) => {\n        if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\n          if (!poly || !item.address.endsWith(\"/gate\") && !item.address.endsWith(\"/freq\") && !item.address.endsWith(\"/gain\")) {\n            params.push({ name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 });\n          }\n        } else if (item.type === \"button\" || item.type === \"checkbox\") {\n          if (!poly || !item.address.endsWith(\"/gate\") && !item.address.endsWith(\"/freq\") && !item.address.endsWith(\"/gain\")) {\n            params.push({ name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 });\n          }\n        }\n      };\n      FaustBaseWebAudioDsp2.parseUI(dspMeta.ui, callback);\n      if (effectMeta)\n        FaustBaseWebAudioDsp2.parseUI(effectMeta.ui, callback);\n      return params;\n    }\n    process(inputs, outputs, parameters) {\n      for (const path in parameters) {\n        const paramArray = parameters[path];\n        this.fDSPCode.setParamValue(path, paramArray[0]);\n      }\n      return this.fDSPCode.compute(inputs[0], outputs[0]);\n    }\n    handleMessageAux(e) {\n      const msg = e.data;\n      switch (msg.type) {\n        case \"midi\":\n          this.midiMessage(msg.data);\n          break;\n        case \"ctrlChange\":\n          this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]);\n          break;\n        case \"pitchWheel\":\n          this.pitchWheel(msg.data[0], msg.data[1]);\n          break;\n        case \"param\":\n          this.setParamValue(msg.data.path, msg.data.value);\n          break;\n        case \"setPlotHandler\": {\n          if (msg.data) {\n            this.fDSPCode.setPlotHandler((output, index, events) => this.port.postMessage({ type: \"plot\", value: output, index, events }));\n          } else {\n            this.fDSPCode.setPlotHandler(null);\n          }\n          break;\n        }\n        case \"start\": {\n          this.fDSPCode.start();\n          break;\n        }\n        case \"stop\": {\n          this.fDSPCode.stop();\n          break;\n        }\n        case \"destroy\": {\n          this.port.close();\n          this.fDSPCode.destroy();\n          break;\n        }\n        default:\n          break;\n      }\n    }\n    setParamValue(path, value) {\n      this.fDSPCode.setParamValue(path, value);\n    }\n    midiMessage(data) {\n      this.fDSPCode.midiMessage(data);\n    }\n    ctrlChange(channel, ctrl, value) {\n      this.fDSPCode.ctrlChange(channel, ctrl, value);\n    }\n    pitchWheel(channel, wheel) {\n      this.fDSPCode.pitchWheel(channel, wheel);\n    }\n  }\n  class FaustMonoAudioWorkletProcessor extends FaustAudioWorkletProcessor {\n    constructor(options) {\n      super(options);\n      const { FaustMonoWebAudioDsp: FaustWebAudioMonoDSP } = dependencies;\n      const { factory, sampleSize } = options.processorOptions;\n      const instance = FaustWasmInstantiator2.createSyncMonoDSPInstance(factory);\n      this.fDSPCode = new FaustWebAudioMonoDSP(instance, sampleRate, sampleSize, 128);\n      this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n      this.fDSPCode.start();\n    }\n  }\n  class FaustPolyAudioWorkletProcessor extends FaustAudioWorkletProcessor {\n    constructor(options) {\n      super(options);\n      this.handleMessageAux = (e) => {\n        const msg = e.data;\n        switch (msg.type) {\n          case \"keyOn\":\n            this.keyOn(msg.data[0], msg.data[1], msg.data[2]);\n            break;\n          case \"keyOff\":\n            this.keyOff(msg.data[0], msg.data[1], msg.data[2]);\n            break;\n          default:\n            super.handleMessageAux(e);\n            break;\n        }\n      };\n      const { FaustPolyWebAudioDsp: FaustWebAudioPolyDSP } = dependencies;\n      const { voiceFactory, mixerModule, voices, effectFactory, sampleSize } = options.processorOptions;\n      const instance = FaustWasmInstantiator2.createSyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory);\n      this.fDSPCode = new FaustWebAudioPolyDSP(instance, sampleRate, sampleSize, 128);\n      this.port.onmessage = (e) => this.handleMessageAux(e);\n      this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n      this.fDSPCode.start();\n    }\n    midiMessage(data) {\n      const cmd = data[0] >> 4;\n      const channel = data[0] & 15;\n      const data1 = data[1];\n      const data2 = data[2];\n      if (cmd === 8 || cmd === 9 && data2 === 0)\n        this.keyOff(channel, data1, data2);\n      else if (cmd === 9)\n        this.keyOn(channel, data1, data2);\n      else\n        super.midiMessage(data);\n    }\n    keyOn(channel, pitch, velocity) {\n      this.fDSPCode.keyOn(channel, pitch, velocity);\n    }\n    keyOff(channel, pitch, velocity) {\n      this.fDSPCode.keyOff(channel, pitch, velocity);\n    }\n    allNotesOff(hard) {\n      this.fDSPCode.allNotesOff(hard);\n    }\n  }\n  try {\n    if (poly) {\n      registerProcessor(dspName || \"mydsp_poly\", FaustPolyAudioWorkletProcessor);\n    } else {\n      registerProcessor(dspName || \"mydsp\", FaustMonoAudioWorkletProcessor);\n    }\n  } catch (error) {\n    console.warn(error);\n  }\n};\nvar FaustAudioWorkletProcessor_default = getFaustAudioWorkletProcessor;\n\n// src/FaustCompiler.ts\nvar sha256 = async (str) => {\n  if (typeof crypto !== \"undefined\" && crypto?.subtle) {\n    const inputBuffer = new TextEncoder().encode(str);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", inputBuffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n    return hashHex;\n  }\n  const crypto_node = await import(\"crypto\");\n  return crypto_node.createHash(\"sha256\").update(str).digest(\"hex\");\n};\nvar _FaustCompiler = class {\n  constructor(libFaust) {\n    this.fLibFaust = libFaust;\n    this.fErrorMessage = \"\";\n  }\n  intVec2intArray(vec) {\n    const size = vec.size();\n    const ui8Code = new Uint8Array(size);\n    for (let i = 0; i < size; i++) {\n      ui8Code[i] = vec.get(i);\n    }\n    return ui8Code;\n  }\n  async createDSPFactory(name, code, args, poly) {\n    if (_FaustCompiler.gFactories.size > 10) {\n      _FaustCompiler.gFactories.clear();\n    }\n    let shaKey = await sha256(name + code + args + (poly ? \"poly\" : \"mono\"));\n    if (_FaustCompiler.gFactories.has(shaKey)) {\n      return _FaustCompiler.gFactories.get(shaKey) || null;\n    } else {\n      try {\n        const faustWasm = this.fLibFaust.createDSPFactory(name, code, args, !poly);\n        try {\n          const code2 = this.intVec2intArray(faustWasm.data);\n          faustWasm.data.delete();\n          const module = await WebAssembly.compile(code2);\n          const factory = { cfactory: faustWasm.cfactory, code: code2, module, json: faustWasm.json, poly };\n          this.deleteDSPFactory(factory);\n          _FaustCompiler.gFactories.set(shaKey, factory);\n          return factory;\n        } catch (e) {\n          console.error(e);\n          return null;\n        }\n      } catch {\n        this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n        console.error(`=> exception raised while running createDSPFactory: ${this.fErrorMessage}`);\n        this.fLibFaust.cleanupAfterException();\n        return null;\n      }\n    }\n  }\n  version() {\n    return this.fLibFaust.version();\n  }\n  getErrorMessage() {\n    return this.fErrorMessage;\n  }\n  async createMonoDSPFactory(name, code, args) {\n    return this.createDSPFactory(name, code, args, false);\n  }\n  async createPolyDSPFactory(name, code, args) {\n    return this.createDSPFactory(name, code, args, true);\n  }\n  deleteDSPFactory(factory) {\n    this.fLibFaust.deleteDSPFactory(factory.cfactory);\n    factory.cfactory = 0;\n  }\n  expandDSP(code, args) {\n    try {\n      return this.fLibFaust.expandDSP(\"FaustDSP\", code, args);\n    } catch {\n      this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n      console.error(`=> exception raised while running expandDSP: ${this.fErrorMessage}`);\n      this.fLibFaust.cleanupAfterException();\n      return null;\n    }\n  }\n  generateAuxFiles(name, code, args) {\n    try {\n      return this.fLibFaust.generateAuxFiles(name, code, args);\n    } catch {\n      this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n      console.error(`=> exception raised while running generateAuxFiles: ${this.fErrorMessage}`);\n      this.fLibFaust.cleanupAfterException();\n      return false;\n    }\n  }\n  deleteAllDSPFactories() {\n    this.fLibFaust.deleteAllDSPFactories();\n  }\n  fs() {\n    return this.fLibFaust.fs();\n  }\n  async getAsyncInternalMixerModule(isDouble = false) {\n    const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n    const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n    if (this[moduleKey])\n      return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n    const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n    const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n    this[bufferKey] = mixerBuffer;\n    const mixerModule = await WebAssembly.compile(mixerBuffer);\n    this[moduleKey] = mixerModule;\n    return { mixerBuffer, mixerModule };\n  }\n  getSyncInternalMixerModule(isDouble = false) {\n    const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n    const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n    if (this[moduleKey])\n      return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n    const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n    const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n    this[bufferKey] = mixerBuffer;\n    const mixerModule = new WebAssembly.Module(mixerBuffer);\n    this[moduleKey] = mixerModule;\n    return { mixerBuffer, mixerModule };\n  }\n};\nvar FaustCompiler = _FaustCompiler;\nFaustCompiler.gFactories = /* @__PURE__ */ new Map();\nvar FaustCompiler_default = FaustCompiler;\n\n// src/FaustDspInstance.ts\nvar FaustDspInstance = class {\n  constructor(exports) {\n    this.fExports = exports;\n  }\n  compute($dsp, count, $input, $output) {\n    this.fExports.compute($dsp, count, $input, $output);\n  }\n  getNumInputs($dsp) {\n    return this.fExports.getNumInputs($dsp);\n  }\n  getNumOutputs($dsp) {\n    return this.fExports.getNumOutputs($dsp);\n  }\n  getParamValue($dsp, index) {\n    return this.fExports.getParamValue($dsp, index);\n  }\n  getSampleRate($dsp) {\n    return this.fExports.getSampleRate($dsp);\n  }\n  init($dsp, sampleRate) {\n    this.fExports.init($dsp, sampleRate);\n  }\n  instanceClear($dsp) {\n    this.fExports.instanceClear($dsp);\n  }\n  instanceConstants($dsp, sampleRate) {\n    this.fExports.instanceConstants($dsp, sampleRate);\n  }\n  instanceInit($dsp, sampleRate) {\n    this.fExports.instanceInit($dsp, sampleRate);\n  }\n  instanceResetUserInterface($dsp) {\n    this.fExports.instanceResetUserInterface($dsp);\n  }\n  setParamValue($dsp, index, value) {\n    this.fExports.setParamValue($dsp, index, value);\n  }\n};\nvar FaustDspInstance_default = FaustDspInstance;\n\n// src/FaustWasmInstantiator.ts\nvar FaustWasmInstantiator = class {\n  static createWasmImport(memory) {\n    return {\n      env: {\n        memory: memory || new WebAssembly.Memory({ initial: 100 }),\n        memoryBase: 0,\n        tableBase: 0,\n        _abs: Math.abs,\n        _acosf: Math.acos,\n        _asinf: Math.asin,\n        _atanf: Math.atan,\n        _atan2f: Math.atan2,\n        _ceilf: Math.ceil,\n        _cosf: Math.cos,\n        _expf: Math.exp,\n        _floorf: Math.floor,\n        _fmodf: (x, y) => x % y,\n        _logf: Math.log,\n        _log10f: Math.log10,\n        _max_f: Math.max,\n        _min_f: Math.min,\n        _remainderf: (x, y) => x - Math.round(x / y) * y,\n        _powf: Math.pow,\n        _roundf: Math.fround,\n        _sinf: Math.sin,\n        _sqrtf: Math.sqrt,\n        _tanf: Math.tan,\n        _acoshf: Math.acosh,\n        _asinhf: Math.asinh,\n        _atanhf: Math.atanh,\n        _coshf: Math.cosh,\n        _sinhf: Math.sinh,\n        _tanhf: Math.tanh,\n        _isnanf: Number.isNaN,\n        _isinff: (x) => !isFinite(x),\n        _copysignf: (x, y) => Math.sign(x) === Math.sign(y) ? x : -x,\n        _acos: Math.acos,\n        _asin: Math.asin,\n        _atan: Math.atan,\n        _atan2: Math.atan2,\n        _ceil: Math.ceil,\n        _cos: Math.cos,\n        _exp: Math.exp,\n        _floor: Math.floor,\n        _fmod: (x, y) => x % y,\n        _log: Math.log,\n        _log10: Math.log10,\n        _max_: Math.max,\n        _min_: Math.min,\n        _remainder: (x, y) => x - Math.round(x / y) * y,\n        _pow: Math.pow,\n        _round: Math.fround,\n        _sin: Math.sin,\n        _sqrt: Math.sqrt,\n        _tan: Math.tan,\n        _acosh: Math.acosh,\n        _asinh: Math.asinh,\n        _atanh: Math.atanh,\n        _cosh: Math.cosh,\n        _sinh: Math.sinh,\n        _tanh: Math.tanh,\n        _isnan: Number.isNaN,\n        _isinf: (x) => !isFinite(x),\n        _copysign: (x, y) => Math.sign(x) === Math.sign(y) ? x : -x,\n        table: new WebAssembly.Table({ initial: 0, element: \"anyfunc\" })\n      }\n    };\n  }\n  static createWasmMemory(voicesIn, sampleSize, dspMeta, effectMeta, bufferSize) {\n    const voices = Math.max(4, voicesIn);\n    const ptrSize = sampleSize;\n    const pow2limit = (x) => {\n      let n = 65536;\n      while (n < x) {\n        n *= 2;\n      }\n      return n;\n    };\n    const effectSize = effectMeta ? effectMeta.size : 0;\n    let memorySize = pow2limit(effectSize + dspMeta.size * voices + (dspMeta.inputs + dspMeta.outputs * 2) * (ptrSize + bufferSize * sampleSize)) / 65536;\n    memorySize = Math.max(2, memorySize);\n    return new WebAssembly.Memory({ initial: memorySize, maximum: memorySize });\n  }\n  static createMonoDSPInstanceAux(instance, json) {\n    const functions = instance.exports;\n    const api = new FaustDspInstance_default(functions);\n    const memory = instance.exports.memory;\n    return { memory, api, json };\n  }\n  static createMemoryAux(voices, voiceFactory, effectFactory) {\n    const voiceMeta = JSON.parse(voiceFactory.json);\n    const effectMeta = effectFactory && effectFactory.json ? JSON.parse(effectFactory.json) : null;\n    const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n    return this.createWasmMemory(voices, sampleSize, voiceMeta, effectMeta, 8192);\n  }\n  static createMixerAux(mixerModule, memory) {\n    const mixerImport = {\n      imports: { print: console.log },\n      memory: { memory }\n    };\n    const mixerInstance = new WebAssembly.Instance(mixerModule, mixerImport);\n    const mixerFunctions = mixerInstance.exports;\n    return mixerFunctions;\n  }\n  static async loadDSPFactory(wasmPath, jsonPath) {\n    const wasmFile = await fetch(wasmPath);\n    if (!wasmFile.ok) {\n      console.error(`=> exception raised while running loadDSPFactory, file not found: ${wasmPath}`);\n      return null;\n    }\n    try {\n      const wasmBuffer = await wasmFile.arrayBuffer();\n      const module = await WebAssembly.compile(wasmBuffer);\n      const jsonFile = await fetch(jsonPath);\n      const json = await jsonFile.text();\n      const meta = JSON.parse(json);\n      const cOptions = meta.compile_options;\n      const poly = cOptions.indexOf(\"wasm-e\") !== -1;\n      return { cfactory: 0, code: new Uint8Array(wasmBuffer), module, json, poly };\n    } catch (e) {\n      console.error(`=> exception raised while running loadDSPFactory: ${e}`);\n      return null;\n    }\n  }\n  static async loadDSPMixer(mixerPath, fs) {\n    try {\n      let mixerBuffer = null;\n      if (fs) {\n        mixerBuffer = fs.readFile(mixerPath, { encoding: \"binary\" });\n      } else {\n        const mixerFile = await fetch(mixerPath);\n        mixerBuffer = await mixerFile.arrayBuffer();\n      }\n      return WebAssembly.compile(mixerBuffer);\n    } catch (e) {\n      console.error(`=> exception raised while running loadMixer: ${e}`);\n      return null;\n    }\n  }\n  static async createAsyncMonoDSPInstance(factory) {\n    const instance = await WebAssembly.instantiate(factory.module, this.createWasmImport());\n    return this.createMonoDSPInstanceAux(instance, factory.json);\n  }\n  static createSyncMonoDSPInstance(factory) {\n    const instance = new WebAssembly.Instance(factory.module, this.createWasmImport());\n    return this.createMonoDSPInstanceAux(instance, factory.json);\n  }\n  static async createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory) {\n    const memory = this.createMemoryAux(voices, voiceFactory, effectFactory);\n    const voiceInstance = await WebAssembly.instantiate(voiceFactory.module, this.createWasmImport(memory));\n    const voiceFunctions = voiceInstance.exports;\n    const voiceAPI = new FaustDspInstance_default(voiceFunctions);\n    const mixerAPI = this.createMixerAux(mixerModule, memory);\n    if (effectFactory) {\n      const effectInstance = await WebAssembly.instantiate(effectFactory.module, this.createWasmImport(memory));\n      const effectFunctions = effectInstance.exports;\n      const effectAPI = new FaustDspInstance_default(effectFunctions);\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        effectAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json,\n        effectJSON: effectFactory.json\n      };\n    } else {\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json\n      };\n    }\n  }\n  static createSyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory) {\n    const memory = this.createMemoryAux(voices, voiceFactory, effectFactory);\n    const voiceInstance = new WebAssembly.Instance(voiceFactory.module, this.createWasmImport(memory));\n    const voiceFunctions = voiceInstance.exports;\n    const voiceAPI = new FaustDspInstance_default(voiceFunctions);\n    const mixerAPI = this.createMixerAux(mixerModule, memory);\n    if (effectFactory) {\n      const effectInstance = new WebAssembly.Instance(effectFactory.module, this.createWasmImport(memory));\n      const effectFunctions = effectInstance.exports;\n      const effectAPI = new FaustDspInstance_default(effectFunctions);\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        effectAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json,\n        effectJSON: effectFactory.json\n      };\n    } else {\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json\n      };\n    }\n  }\n};\nvar FaustWasmInstantiator_default = FaustWasmInstantiator;\n\n// src/FaustOfflineProcessor.ts\nvar FaustOfflineProcessor = class {\n  constructor(instance, bufferSize) {\n    this.fDSPCode = instance;\n    this.fBufferSize = bufferSize;\n    this.fInputs = new Array(this.fDSPCode.getNumInputs()).fill(null).map(() => new Float32Array(bufferSize));\n    this.fOutputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(bufferSize));\n  }\n  render(inputs = [], length = this.fBufferSize, onUpdate) {\n    let l = 0;\n    const outputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(length));\n    this.fDSPCode.start();\n    while (l < length) {\n      const sliceLength = Math.min(length - l, this.fBufferSize);\n      for (let i = 0; i < this.fDSPCode.getNumInputs(); i++) {\n        let input;\n        if (inputs[i]) {\n          if (inputs[i].length <= l) {\n            input = new Float32Array(sliceLength);\n          } else if (inputs[i].length > l + sliceLength) {\n            input = inputs[i].subarray(l, l + sliceLength);\n          } else {\n            input = inputs[i].subarray(l, inputs[i].length);\n          }\n        } else {\n          input = new Float32Array(sliceLength);\n        }\n        this.fInputs[i] = input;\n      }\n      this.fDSPCode.compute(this.fInputs, this.fOutputs);\n      for (let i = 0; i < this.fDSPCode.getNumOutputs(); i++) {\n        const output = this.fOutputs[i];\n        if (sliceLength < this.fBufferSize) {\n          outputs[i].set(output.subarray(0, sliceLength), l);\n        } else {\n          outputs[i].set(output, l);\n        }\n      }\n      l += this.fBufferSize;\n      onUpdate?.(l);\n    }\n    this.fDSPCode.stop();\n    return outputs;\n  }\n};\nvar FaustOfflineProcessor_default = FaustOfflineProcessor;\n\n// src/FaustSvgDiagrams.ts\nvar FaustSvgDiagrams = class {\n  constructor(compiler) {\n    this.compiler = compiler;\n  }\n  from(name, code, args) {\n    const fs = this.compiler.fs();\n    try {\n      const files2 = fs.readdir(`/${name}-svg/`);\n      files2.filter((file) => file !== \".\" && file !== \"..\").forEach((file) => fs.unlink(`/${name}-svg/${file}`));\n    } catch {\n    }\n    const success = this.compiler.generateAuxFiles(name, code, `-lang wasm -svg ${args}`);\n    if (!success)\n      throw new Error(this.compiler.getErrorMessage());\n    const svgs = {};\n    const files = fs.readdir(`/${name}-svg/`);\n    files.filter((file) => file !== \".\" && file !== \"..\").forEach((file) => svgs[file] = fs.readFile(`/${name}-svg/${file}`, { encoding: \"utf8\" }));\n    return svgs;\n  }\n};\nvar FaustSvgDiagrams_default = FaustSvgDiagrams;\n\n// src/LibFaust.ts\nvar LibFaust = class {\n  constructor(module) {\n    this.fModule = module;\n    this.fCompiler = new module.libFaustWasm();\n    this.fFileSystem = this.fModule.FS;\n  }\n  module() {\n    return this.fModule;\n  }\n  fs() {\n    return this.fFileSystem;\n  }\n  version() {\n    return this.fCompiler.version();\n  }\n  createDSPFactory(name, code, args, useInternalMemory) {\n    return this.fCompiler.createDSPFactory(name, code, args, useInternalMemory);\n  }\n  deleteDSPFactory(cFactory) {\n    return this.fCompiler.deleteDSPFactory(cFactory);\n  }\n  expandDSP(name, code, args) {\n    return this.fCompiler.expandDSP(name, code, args);\n  }\n  generateAuxFiles(name, code, args) {\n    return this.fCompiler.generateAuxFiles(name, code, args);\n  }\n  deleteAllDSPFactories() {\n    return this.fCompiler.deleteAllDSPFactories();\n  }\n  getErrorAfterException() {\n    return this.fCompiler.getErrorAfterException();\n  }\n  cleanupAfterException() {\n    return this.fCompiler.cleanupAfterException();\n  }\n  getInfos(what) {\n    return this.fCompiler.getInfos(what);\n  }\n  toString() {\n    return `LibFaust module: ${this.fModule}, compiler: ${this.fCompiler}`;\n  }\n};\nvar LibFaust_default = LibFaust;\n\n// src/WavEncoder.ts\nvar WavEncoder = class {\n  static encode(audioBuffer, options) {\n    const numberOfChannels = audioBuffer.length;\n    const length = audioBuffer[0].length;\n    const { shared, float } = options;\n    const bitDepth = float ? 32 : options.bitDepth | 0 || 16;\n    const byteDepth = bitDepth >> 3;\n    const byteLength = length * numberOfChannels * byteDepth;\n    const AB = shared ? globalThis.SharedArrayBuffer || globalThis.ArrayBuffer : globalThis.ArrayBuffer;\n    const ab = new AB((44 + byteLength) * Uint8Array.BYTES_PER_ELEMENT);\n    const dataView = new DataView(ab);\n    const writer = new Writer(dataView);\n    const format = {\n      formatId: float ? 3 : 1,\n      float: !!float,\n      numberOfChannels,\n      sampleRate: options.sampleRate,\n      symmetric: !!options.symmetric,\n      length,\n      bitDepth,\n      byteDepth\n    };\n    this.writeHeader(writer, format);\n    this.writeData(writer, audioBuffer, format);\n    return ab;\n  }\n  static writeHeader(writer, format) {\n    const { formatId, sampleRate, bitDepth, numberOfChannels, length, byteDepth } = format;\n    writer.string(\"RIFF\");\n    writer.uint32(writer.dataView.byteLength - 8);\n    writer.string(\"WAVE\");\n    writer.string(\"fmt \");\n    writer.uint32(16);\n    writer.uint16(formatId);\n    writer.uint16(numberOfChannels);\n    writer.uint32(sampleRate);\n    writer.uint32(sampleRate * numberOfChannels * byteDepth);\n    writer.uint16(numberOfChannels * byteDepth);\n    writer.uint16(bitDepth);\n    writer.string(\"data\");\n    writer.uint32(length * numberOfChannels * byteDepth);\n    return writer.pos;\n  }\n  static writeData(writer, audioBuffer, format) {\n    const { bitDepth, float, length, numberOfChannels, symmetric } = format;\n    if (bitDepth === 32 && float) {\n      const { dataView, pos } = writer;\n      const ab = dataView.buffer;\n      const f32View = new Float32Array(ab, pos);\n      if (numberOfChannels === 1) {\n        f32View.set(audioBuffer[0]);\n        return;\n      }\n      for (let ch = 0; ch < numberOfChannels; ch++) {\n        const channel = audioBuffer[ch];\n        for (let i = 0; i < length; i++) {\n          f32View[i * numberOfChannels + ch] = channel[i];\n        }\n      }\n      return;\n    }\n    const encoderOption = float ? \"f\" : symmetric ? \"s\" : \"\";\n    const methodName = \"pcm\" + bitDepth + encoderOption;\n    if (!writer[methodName]) {\n      throw new TypeError(\"Not supported bit depth: \" + bitDepth);\n    }\n    const write = writer[methodName].bind(writer);\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < numberOfChannels; j++) {\n        write(audioBuffer[j][i]);\n      }\n    }\n  }\n};\nvar Writer = class {\n  constructor(dataView) {\n    this.pos = 0;\n    this.dataView = dataView;\n  }\n  int16(value) {\n    this.dataView.setInt16(this.pos, value, true);\n    this.pos += 2;\n  }\n  uint16(value) {\n    this.dataView.setUint16(this.pos, value, true);\n    this.pos += 2;\n  }\n  uint32(value) {\n    this.dataView.setUint32(this.pos, value, true);\n    this.pos += 4;\n  }\n  string(value) {\n    for (let i = 0, imax = value.length; i < imax; i++) {\n      this.dataView.setUint8(this.pos++, value.charCodeAt(i));\n    }\n  }\n  pcm8(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = (value * 0.5 + 0.5) * 255;\n    value = Math.round(value) | 0;\n    this.dataView.setUint8(this.pos, value);\n    this.pos += 1;\n  }\n  pcm8s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 128) + 128;\n    value = Math.max(0, Math.min(value, 255));\n    this.dataView.setUint8(this.pos, value);\n    this.pos += 1;\n  }\n  pcm16(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = value < 0 ? value * 32768 : value * 32767;\n    value = Math.round(value) | 0;\n    this.dataView.setInt16(this.pos, value, true);\n    this.pos += 2;\n  }\n  pcm16s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 32768);\n    value = Math.max(-32768, Math.min(value, 32767));\n    this.dataView.setInt16(this.pos, value, true);\n    this.pos += 2;\n  }\n  pcm24(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = value < 0 ? 16777216 + value * 8388608 : value * 8388607;\n    value = Math.round(value) | 0;\n    const x0 = value >> 0 & 255;\n    const x1 = value >> 8 & 255;\n    const x2 = value >> 16 & 255;\n    this.dataView.setUint8(this.pos + 0, x0);\n    this.dataView.setUint8(this.pos + 1, x1);\n    this.dataView.setUint8(this.pos + 2, x2);\n    this.pos += 3;\n  }\n  pcm24s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 8388608);\n    value = Math.max(-8388608, Math.min(value, 8388607));\n    const x0 = value >> 0 & 255;\n    const x1 = value >> 8 & 255;\n    const x2 = value >> 16 & 255;\n    this.dataView.setUint8(this.pos + 0, x0);\n    this.dataView.setUint8(this.pos + 1, x1);\n    this.dataView.setUint8(this.pos + 2, x2);\n    this.pos += 3;\n  }\n  pcm32(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = value < 0 ? value * 2147483648 : value * 2147483647;\n    value = Math.round(value) | 0;\n    this.dataView.setInt32(this.pos, value, true);\n    this.pos += 4;\n  }\n  pcm32s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 2147483648);\n    value = Math.max(-2147483648, Math.min(value, 2147483647));\n    this.dataView.setInt32(this.pos, value, true);\n    this.pos += 4;\n  }\n  pcm32f(value) {\n    this.dataView.setFloat32(this.pos, value, true);\n    this.pos += 4;\n  }\n};\nvar WavEncoder_default = WavEncoder;\n\n// src/WavDecoder.ts\nvar WavDecoder = class {\n  static decode(buffer, options) {\n    const dataView = new DataView(buffer);\n    const reader = new Reader(dataView);\n    if (reader.string(4) !== \"RIFF\") {\n      throw new TypeError(\"Invalid WAV file\");\n    }\n    reader.uint32();\n    if (reader.string(4) !== \"WAVE\") {\n      throw new TypeError(\"Invalid WAV file\");\n    }\n    let format = null;\n    let audioData = null;\n    do {\n      const chunkType = reader.string(4);\n      const chunkSize = reader.uint32();\n      if (chunkType === \"fmt \") {\n        format = this.decodeFormat(reader, chunkSize);\n      } else if (chunkType === \"data\") {\n        audioData = this.decodeData(reader, chunkSize, format, options || {});\n      } else {\n        reader.skip(chunkSize);\n      }\n    } while (audioData === null);\n    return audioData;\n  }\n  static decodeFormat(reader, chunkSize) {\n    const formats = {\n      1: \"lpcm\",\n      3: \"lpcm\"\n    };\n    const formatId = reader.uint16();\n    if (!formats.hasOwnProperty(formatId)) {\n      throw new TypeError(\"Unsupported format in WAV file: 0x\" + formatId.toString(16));\n    }\n    const format = {\n      formatId,\n      float: formatId === 3,\n      numberOfChannels: reader.uint16(),\n      sampleRate: reader.uint32(),\n      byteRate: reader.uint32(),\n      blockSize: reader.uint16(),\n      bitDepth: reader.uint16()\n    };\n    reader.skip(chunkSize - 16);\n    return format;\n  }\n  static decodeData(reader, chunkSizeIn, format, options) {\n    const chunkSize = Math.min(chunkSizeIn, reader.remain());\n    const length = Math.floor(chunkSize / format.blockSize);\n    const numberOfChannels = format.numberOfChannels;\n    const sampleRate = format.sampleRate;\n    const channelData = new Array(numberOfChannels);\n    for (let ch = 0; ch < numberOfChannels; ch++) {\n      const AB = options.shared ? globalThis.SharedArrayBuffer || globalThis.ArrayBuffer : globalThis.ArrayBuffer;\n      const ab = new AB(length * Float32Array.BYTES_PER_ELEMENT);\n      channelData[ch] = new Float32Array(ab);\n    }\n    this.readPCM(reader, channelData, length, format, options);\n    return {\n      numberOfChannels,\n      length,\n      sampleRate,\n      channelData\n    };\n  }\n  static readPCM(reader, channelData, length, format, options) {\n    const bitDepth = format.bitDepth;\n    const decoderOption = format.float ? \"f\" : options.symmetric ? \"s\" : \"\";\n    const methodName = \"pcm\" + bitDepth + decoderOption;\n    if (!reader[methodName]) {\n      throw new TypeError(\"Not supported bit depth: \" + format.bitDepth);\n    }\n    const read = reader[methodName].bind(reader);\n    const numberOfChannels = format.numberOfChannels;\n    for (let i = 0; i < length; i++) {\n      for (let ch = 0; ch < numberOfChannels; ch++) {\n        channelData[ch][i] = read();\n      }\n    }\n  }\n};\nvar Reader = class {\n  constructor(dataView) {\n    this.pos = 0;\n    this.dataView = dataView;\n  }\n  remain() {\n    return this.dataView.byteLength - this.pos;\n  }\n  skip(n) {\n    this.pos += n;\n  }\n  uint8() {\n    const data = this.dataView.getUint8(this.pos);\n    this.pos += 1;\n    return data;\n  }\n  int16() {\n    const data = this.dataView.getInt16(this.pos, true);\n    this.pos += 2;\n    return data;\n  }\n  uint16() {\n    const data = this.dataView.getUint16(this.pos, true);\n    this.pos += 2;\n    return data;\n  }\n  uint32() {\n    const data = this.dataView.getUint32(this.pos, true);\n    this.pos += 4;\n    return data;\n  }\n  string(n) {\n    let data = \"\";\n    for (let i = 0; i < n; i++) {\n      data += String.fromCharCode(this.uint8());\n    }\n    return data;\n  }\n  pcm8() {\n    const data = this.dataView.getUint8(this.pos) - 128;\n    this.pos += 1;\n    return data < 0 ? data / 128 : data / 127;\n  }\n  pcm8s() {\n    const data = this.dataView.getUint8(this.pos) - 127.5;\n    this.pos += 1;\n    return data / 127.5;\n  }\n  pcm16() {\n    const data = this.dataView.getInt16(this.pos, true);\n    this.pos += 2;\n    return data < 0 ? data / 32768 : data / 32767;\n  }\n  pcm16s() {\n    const data = this.dataView.getInt16(this.pos, true);\n    this.pos += 2;\n    return data / 32768;\n  }\n  pcm24() {\n    const x0 = this.dataView.getUint8(this.pos + 0);\n    const x1 = this.dataView.getUint8(this.pos + 1);\n    const x2 = this.dataView.getUint8(this.pos + 2);\n    const xx = x0 + (x1 << 8) + (x2 << 16);\n    const data = xx > 8388608 ? xx - 16777216 : xx;\n    this.pos += 3;\n    return data < 0 ? data / 8388608 : data / 8388607;\n  }\n  pcm24s() {\n    const x0 = this.dataView.getUint8(this.pos + 0);\n    const x1 = this.dataView.getUint8(this.pos + 1);\n    const x2 = this.dataView.getUint8(this.pos + 2);\n    const xx = x0 + (x1 << 8) + (x2 << 16);\n    const data = xx > 8388608 ? xx - 16777216 : xx;\n    this.pos += 3;\n    return data / 8388608;\n  }\n  pcm32() {\n    const data = this.dataView.getInt32(this.pos, true);\n    this.pos += 4;\n    return data < 0 ? data / 2147483648 : data / 2147483647;\n  }\n  pcm32s() {\n    const data = this.dataView.getInt32(this.pos, true);\n    this.pos += 4;\n    return data / 2147483648;\n  }\n  pcm32f() {\n    const data = this.dataView.getFloat32(this.pos, true);\n    this.pos += 4;\n    return data;\n  }\n  pcm64f() {\n    const data = this.dataView.getFloat64(this.pos, true);\n    this.pos += 8;\n    return data;\n  }\n};\nvar WavDecoder_default = WavDecoder;\n\n// src/FaustWebAudioDsp.ts\nvar FaustBaseWebAudioDsp = class {\n  constructor(sampleSize, bufferSize) {\n    this.fOutputHandler = null;\n    this.fComputeHandler = null;\n    this.fCachedEvents = [];\n    this.fBufferNum = 0;\n    this.fPlotHandler = null;\n    this.fBufferSize = bufferSize;\n    this.fInChannels = [];\n    this.fOutChannels = [];\n    this.gPtrSize = sampleSize;\n    this.gSampleSize = sampleSize;\n    this.fOutputsTimer = 5;\n    this.fInputsItems = [];\n    this.fOutputsItems = [];\n    this.fDescriptor = [];\n    this.fPitchwheelLabel = [];\n    this.fCtrlLabel = new Array(128).fill(null).map(() => []);\n    this.fPathTable = {};\n    this.fProcessing = false;\n    this.fDestroyed = false;\n    this.fUICallback = (item) => {\n      if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n        this.fOutputsItems.push(item.address);\n        this.fPathTable[item.address] = item.index;\n      } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n        this.fInputsItems.push(item.address);\n        this.fPathTable[item.address] = item.index;\n        this.fDescriptor.push(item);\n        if (!item.meta)\n          return;\n        item.meta.forEach((meta) => {\n          const { midi } = meta;\n          if (!midi)\n            return;\n          const strMidi = midi.trim();\n          if (strMidi === \"pitchwheel\") {\n            this.fPitchwheelLabel.push({ path: item.address, min: item.min, max: item.max });\n          } else {\n            const matched = strMidi.match(/^ctrl\\s(\\d+)/);\n            if (!matched)\n              return;\n            this.fCtrlLabel[parseInt(matched[1])].push({ path: item.address, min: item.min, max: item.max });\n          }\n        });\n      }\n    };\n  }\n  static remap(v, mn0, mx0, mn1, mx1) {\n    return (v - mn0) / (mx0 - mn0) * (mx1 - mn1) + mn1;\n  }\n  static parseUI(ui, callback) {\n    ui.forEach((group) => this.parseGroup(group, callback));\n  }\n  static parseGroup(group, callback) {\n    if (group.items) {\n      this.parseItems(group.items, callback);\n    }\n  }\n  static parseItems(items, callback) {\n    items.forEach((item) => this.parseItem(item, callback));\n  }\n  static parseItem(item, callback) {\n    if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n      this.parseItems(item.items, callback);\n    } else {\n      callback(item);\n    }\n  }\n  updateOutputs() {\n    if (this.fOutputsItems.length > 0 && this.fOutputHandler && this.fOutputsTimer-- === 0) {\n      this.fOutputsTimer = 5;\n      this.fOutputsItems.forEach((item) => this.fOutputHandler?.(item, this.getParamValue(item)));\n    }\n  }\n  metadata(handler) {\n    if (this.fJSONDsp.meta) {\n      this.fJSONDsp.meta.forEach((meta) => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n    }\n  }\n  compute(input, output) {\n    return false;\n  }\n  setOutputParamHandler(handler) {\n    this.fOutputHandler = handler;\n  }\n  getOutputParamHandler() {\n    return this.fOutputHandler;\n  }\n  setComputeHandler(handler) {\n    this.fComputeHandler = handler;\n  }\n  getComputeHandler() {\n    return this.fComputeHandler;\n  }\n  setPlotHandler(handler) {\n    this.fPlotHandler = handler;\n  }\n  getPlotHandler() {\n    return this.fPlotHandler;\n  }\n  getNumInputs() {\n    return -1;\n  }\n  getNumOutputs() {\n    return -1;\n  }\n  midiMessage(data) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ data, type: \"midi\" });\n    const cmd = data[0] >> 4;\n    const channel = data[0] & 15;\n    const data1 = data[1];\n    const data2 = data[2];\n    if (cmd === 11)\n      return this.ctrlChange(channel, data1, data2);\n    if (cmd === 14)\n      return this.pitchWheel(channel, data2 * 128 + data1);\n  }\n  ctrlChange(channel, ctrl, value) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"ctrlChange\", data: [channel, ctrl, value] });\n    if (this.fCtrlLabel[ctrl].length) {\n      this.fCtrlLabel[ctrl].forEach((ctrl2) => {\n        const { path } = ctrl2;\n        this.setParamValue(path, FaustBaseWebAudioDsp.remap(value, 0, 127, ctrl2.min, ctrl2.max));\n        if (this.fOutputHandler)\n          this.fOutputHandler(path, this.getParamValue(path));\n      });\n    }\n  }\n  pitchWheel(channel, wheel) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"pitchWheel\", data: [channel, wheel] });\n    this.fPitchwheelLabel.forEach((pw) => {\n      this.setParamValue(pw.path, FaustBaseWebAudioDsp.remap(wheel, 0, 16383, pw.min, pw.max));\n      if (this.fOutputHandler)\n        this.fOutputHandler(pw.path, this.getParamValue(pw.path));\n    });\n  }\n  setParamValue(path, value) {\n  }\n  getParamValue(path) {\n    return 0;\n  }\n  getParams() {\n    return this.fInputsItems;\n  }\n  getMeta() {\n    return this.fJSONDsp;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.fJSONDsp.ui;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  start() {\n    this.fProcessing = true;\n  }\n  stop() {\n    this.fProcessing = false;\n  }\n  destroy() {\n    this.fDestroyed = true;\n    this.fOutputHandler = null;\n    this.fComputeHandler = null;\n    this.fPlotHandler = null;\n  }\n};\nvar FaustMonoWebAudioDsp = class extends FaustBaseWebAudioDsp {\n  constructor(instance, sampleRate, sampleSize, bufferSize) {\n    super(sampleSize, bufferSize);\n    this.fInstance = instance;\n    this.fJSONDsp = JSON.parse(this.fInstance.json);\n    FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n    this.initMemory();\n    this.fInstance.api.init(this.fDSP, sampleRate);\n  }\n  initMemory() {\n    this.fDSP = 0;\n    const $audio = this.fJSONDsp.size;\n    this.fAudioInputs = $audio;\n    this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.gPtrSize;\n    const $audioInputs = this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize;\n    const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.gSampleSize;\n    const HEAP = this.fInstance.memory.buffer;\n    const HEAP32 = new Int32Array(HEAP);\n    const HEAPF = this.gSampleSize === 4 ? new Float32Array(HEAP) : new Float64Array(HEAP);\n    if (this.getNumInputs() > 0) {\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.gSampleSize * chan;\n      }\n      const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, this.fAudioInputs + this.getNumInputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.gSampleSize), dspInChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n    if (this.getNumOutputs() > 0) {\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.gSampleSize * chan;\n      }\n      const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.gSampleSize), dspOutChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n  }\n  toString() {\n    return `============== Mono Memory layout ==============\nthis.fBufferSize: ${this.fBufferSize}\nthis.fJSONDsp.size: ${this.fJSONDsp.size}\nthis.fAudioInputs: ${this.fAudioInputs}\nthis.fAudioOutputs: ${this.fAudioOutputs}\nthis.fDSP: ${this.fDSP}`;\n  }\n  compute(input, output) {\n    if (this.fDestroyed)\n      return false;\n    if (!this.fProcessing)\n      return true;\n    if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n      return true;\n    }\n    if (this.getNumOutputs() > 0 && (!output || !output[0] || output[0].length === 0)) {\n      return true;\n    }\n    if (input !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); ++chan) {\n        const dspInput = this.fInChannels[chan];\n        dspInput.set(input[chan]);\n      }\n    }\n    if (this.fComputeHandler)\n      this.fComputeHandler(this.fBufferSize);\n    this.fInstance.api.compute(this.fDSP, this.fBufferSize, this.fAudioInputs, this.fAudioOutputs);\n    this.updateOutputs();\n    if (output !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n        const dspOutput = this.fOutChannels[chan];\n        output[chan].set(dspOutput);\n      }\n      if (this.fPlotHandler) {\n        this.fPlotHandler(output, this.fBufferNum++, this.fCachedEvents.length ? this.fCachedEvents : void 0);\n        this.fCachedEvents = [];\n      }\n    }\n    return true;\n  }\n  metadata(handler) {\n    super.metadata(handler);\n  }\n  getNumInputs() {\n    return this.fInstance.api.getNumInputs(this.fDSP);\n  }\n  getNumOutputs() {\n    return this.fInstance.api.getNumOutputs(this.fDSP);\n  }\n  setParamValue(path, value) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n    this.fInstance.api.setParamValue(this.fDSP, this.fPathTable[path], value);\n  }\n  getParamValue(path) {\n    return this.fInstance.api.getParamValue(this.fDSP, this.fPathTable[path]);\n  }\n  getMeta() {\n    return this.fJSONDsp;\n  }\n  getJSON() {\n    return this.fInstance.json;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  getUI() {\n    return this.fJSONDsp.ui;\n  }\n};\nvar FaustWebAudioDspVoice = class {\n  constructor($dsp, api, inputItems, pathTable, sampleRate) {\n    FaustWebAudioDspVoice.kActiveVoice = 0;\n    FaustWebAudioDspVoice.kFreeVoice = -1;\n    FaustWebAudioDspVoice.kReleaseVoice = -2;\n    FaustWebAudioDspVoice.kLegatoVoice = -3;\n    FaustWebAudioDspVoice.kNoVoice = -4;\n    FaustWebAudioDspVoice.VOICE_STOP_LEVEL = 5e-4;\n    this.fKeyFun = (pitch) => FaustWebAudioDspVoice.midiToFreq(pitch);\n    this.fVelFun = (velocity) => velocity / 127;\n    this.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n    this.fNextNote = this.fNextVel = -1;\n    this.fLevel = 0;\n    this.fDate = this.fRelease = 0;\n    this.fDSP = $dsp;\n    this.fAPI = api;\n    this.fGateLabel = [];\n    this.fGainLabel = [];\n    this.fFreqLabel = [];\n    this.fAPI.init(this.fDSP, sampleRate);\n    this.extractPaths(inputItems, pathTable);\n  }\n  static midiToFreq(note) {\n    return 440 * 2 ** ((note - 69) / 12);\n  }\n  extractPaths(inputItems, pathTable) {\n    inputItems.forEach((item) => {\n      if (item.endsWith(\"/gate\")) {\n        this.fGateLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/freq\")) {\n        this.fKeyFun = (pitch) => FaustWebAudioDspVoice.midiToFreq(pitch);\n        this.fFreqLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/key\")) {\n        this.fKeyFun = (pitch) => pitch;\n        this.fFreqLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/gain\")) {\n        this.fVelFun = (velocity) => velocity / 127;\n        this.fGainLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/vel\") && item.endsWith(\"/velocity\")) {\n        this.fVelFun = (velocity) => velocity;\n        this.fGainLabel.push(pathTable[item]);\n      }\n    });\n  }\n  keyOn(pitch, velocity, legato = false) {\n    if (legato) {\n      this.fNextNote = pitch;\n      this.fNextVel = velocity;\n    } else {\n      this.fFreqLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, this.fKeyFun(pitch)));\n      this.fGateLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, 1));\n      this.fGainLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, this.fVelFun(velocity)));\n      this.fCurNote = pitch;\n    }\n  }\n  keyOff(hard = false) {\n    this.fGateLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, 0));\n    if (hard) {\n      this.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n    } else {\n      this.fRelease = this.fAPI.getSampleRate(this.fDSP) / 2;\n      this.fCurNote = FaustWebAudioDspVoice.kReleaseVoice;\n    }\n  }\n  computeLegato(bufferSize, $inputs, $outputZero, $outputsHalf) {\n    let size = bufferSize / 2;\n    this.fGateLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, 0));\n    this.fAPI.compute(this.fDSP, size, $inputs, $outputZero);\n    this.keyOn(this.fNextNote, this.fNextVel);\n    this.fAPI.compute(this.fDSP, size, $inputs, $outputsHalf);\n  }\n  compute(bufferSize, $inputs, $outputs) {\n    this.fAPI.compute(this.fDSP, bufferSize, $inputs, $outputs);\n  }\n  setParamValue(index, value) {\n    this.fAPI.setParamValue(this.fDSP, index, value);\n  }\n  getParamValue(index) {\n    return this.fAPI.getParamValue(this.fDSP, index);\n  }\n};\nvar FaustPolyWebAudioDsp = class extends FaustBaseWebAudioDsp {\n  constructor(instance, sampleRate, sampleSize, bufferSize) {\n    super(sampleSize, bufferSize);\n    this.fInstance = instance;\n    this.fJSONDsp = JSON.parse(this.fInstance.voiceJSON);\n    this.fJSONEffect = this.fInstance.effectAPI && this.fInstance.effectJSON ? JSON.parse(this.fInstance.effectJSON) : null;\n    FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n    if (this.fJSONEffect)\n      FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n    this.initMemory();\n    this.fVoiceTable = [];\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      this.fVoiceTable.push(new FaustWebAudioDspVoice(this.fJSONDsp.size * voice, this.fInstance.voiceAPI, this.fInputsItems, this.fPathTable, sampleRate));\n    }\n    if (this.fInstance.effectAPI)\n      this.fInstance.effectAPI.init(this.fEffect, sampleRate);\n  }\n  initMemory() {\n    this.fEffect = this.fJSONDsp.size * this.fInstance.voices;\n    const $audio = this.fEffect + (this.fJSONEffect ? this.fJSONEffect.size : 0);\n    this.fAudioInputs = $audio;\n    this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.gPtrSize;\n    this.fAudioMixing = this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize;\n    this.fAudioMixingHalf = this.fAudioMixing + this.getNumOutputs() * this.gPtrSize;\n    const $audioInputs = this.fAudioMixingHalf + this.getNumOutputs() * this.gPtrSize;\n    const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.gSampleSize;\n    const $audioMixing = $audioOutputs + this.getNumOutputs() * this.fBufferSize * this.gSampleSize;\n    const HEAP = this.fInstance.memory.buffer;\n    const HEAP32 = new Int32Array(HEAP);\n    const HEAPF = this.gSampleSize === 4 ? new Float32Array(HEAP) : new Float64Array(HEAP);\n    if (this.getNumInputs() > 0) {\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.gSampleSize * chan;\n      }\n      const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, this.fAudioInputs + this.getNumInputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.gSampleSize), dspInChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n    if (this.getNumOutputs() > 0) {\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.gSampleSize * chan;\n        HEAP32[(this.fAudioMixing >> 2) + chan] = $audioMixing + this.fBufferSize * this.gSampleSize * chan;\n        HEAP32[(this.fAudioMixingHalf >> 2) + chan] = $audioMixing + this.fBufferSize * this.gSampleSize * chan + this.fBufferSize / 2 * this.gSampleSize;\n      }\n      const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.gSampleSize), dspOutChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n  }\n  toString() {\n    return `============== Poly Memory layout ==============\nthis.fBufferSize: ${this.fBufferSize}\nthis.fJSONDsp.size: ${this.fJSONDsp.size}\nthis.fAudioInputs: ${this.fAudioInputs}\nthis.fAudioOutputs: ${this.fAudioOutputs}\nthis.fAudioMixing: ${this.fAudioMixing}\nthis.fAudioMixingHalf: ${this.fAudioMixingHalf}`;\n  }\n  allocVoice(voice, type) {\n    this.fVoiceTable[voice].fDate++;\n    this.fVoiceTable[voice].fCurNote = type;\n    return voice;\n  }\n  getPlayingVoice(pitch) {\n    let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n    let oldestDatePlaying = Number.MAX_VALUE;\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      if (this.fVoiceTable[voice].fCurNote === pitch) {\n        if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n          oldestDatePlaying = this.fVoiceTable[voice].fDate;\n          voicePlaying = voice;\n        }\n      }\n    }\n    return voicePlaying;\n  }\n  getFreeVoice() {\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kFreeVoice) {\n        return this.allocVoice(voice, FaustWebAudioDspVoice.kActiveVoice);\n      }\n    }\n    let voiceRelease = FaustWebAudioDspVoice.kNoVoice;\n    let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n    let oldestDateRelease = Number.MAX_VALUE;\n    let oldestDatePlaying = Number.MAX_VALUE;\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kReleaseVoice) {\n        if (this.fVoiceTable[voice].fDate < oldestDateRelease) {\n          oldestDateRelease = this.fVoiceTable[voice].fDate;\n          voiceRelease = voice;\n        }\n      } else if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n        oldestDatePlaying = this.fVoiceTable[voice].fDate;\n        voicePlaying = voice;\n      }\n    }\n    if (oldestDateRelease !== Number.MAX_VALUE) {\n      console.log(`Steal release voice : voice_date = ${this.fVoiceTable[voiceRelease].fDate} voice = ${voiceRelease}`);\n      return this.allocVoice(voiceRelease, FaustWebAudioDspVoice.kLegatoVoice);\n    }\n    if (oldestDatePlaying !== Number.MAX_VALUE) {\n      console.log(`Steal playing voice : voice_date = ${this.fVoiceTable[voicePlaying].fDate} voice = ${voicePlaying}`);\n      return this.allocVoice(voicePlaying, FaustWebAudioDspVoice.kLegatoVoice);\n    }\n    return FaustWebAudioDspVoice.kNoVoice;\n  }\n  compute(input, output) {\n    if (this.fDestroyed)\n      return false;\n    if (!this.fProcessing)\n      return true;\n    if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n      return true;\n    }\n    if (this.getNumOutputs() > 0 && (!output || !output[0] || output[0].length === 0)) {\n      return true;\n    }\n    if (input !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); ++chan) {\n        const dspInput = this.fInChannels[chan];\n        dspInput.set(input[chan]);\n      }\n    }\n    if (this.fComputeHandler)\n      this.fComputeHandler(this.fBufferSize);\n    this.fInstance.mixerAPI.clearOutput(this.fBufferSize, this.getNumOutputs(), this.fAudioOutputs);\n    this.fVoiceTable.forEach((voice) => {\n      if (voice.fCurNote === FaustWebAudioDspVoice.kLegatoVoice) {\n        voice.computeLegato(this.fBufferSize, this.fAudioInputs, this.fAudioMixing, this.fAudioMixingHalf);\n        this.fInstance.mixerAPI.fadeOut(this.fBufferSize / 2, this.getNumOutputs(), this.fAudioMixing);\n        voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n      } else if (voice.fCurNote !== FaustWebAudioDspVoice.kFreeVoice) {\n        voice.compute(this.fBufferSize, this.fAudioInputs, this.fAudioMixing);\n        voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n        voice.fRelease -= this.fBufferSize;\n        if (voice.fCurNote == FaustWebAudioDspVoice.kReleaseVoice && (voice.fLevel < FaustWebAudioDspVoice.VOICE_STOP_LEVEL && voice.fRelease < 0)) {\n          voice.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n        }\n      }\n    });\n    if (this.fInstance.effectAPI)\n      this.fInstance.effectAPI.compute(this.fEffect, this.fBufferSize, this.fAudioOutputs, this.fAudioOutputs);\n    this.updateOutputs();\n    if (output !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n        const dspOutput = this.fOutChannels[chan];\n        output[chan].set(dspOutput);\n      }\n      if (this.fPlotHandler) {\n        this.fPlotHandler(output, this.fBufferNum++, this.fCachedEvents.length ? this.fCachedEvents : void 0);\n        this.fCachedEvents = [];\n      }\n    }\n    return true;\n  }\n  getNumInputs() {\n    return this.fInstance.voiceAPI.getNumInputs(0);\n  }\n  getNumOutputs() {\n    return this.fInstance.voiceAPI.getNumOutputs(0);\n  }\n  static findPath(o, p) {\n    if (typeof o !== \"object\") {\n      return false;\n    } else if (o.address) {\n      return o.address === p;\n    } else {\n      for (const k in o) {\n        if (FaustPolyWebAudioDsp.findPath(o[k], p))\n          return true;\n      }\n      return false;\n    }\n  }\n  setParamValue(path, value) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n    if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n      this.fInstance.effectAPI.setParamValue(this.fEffect, this.fPathTable[path], value);\n    } else {\n      this.fVoiceTable.forEach((voice) => voice.setParamValue(this.fPathTable[path], value));\n    }\n  }\n  getParamValue(path) {\n    if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n      return this.fInstance.effectAPI.getParamValue(this.fEffect, this.fPathTable[path]);\n    } else {\n      return this.fVoiceTable[0].getParamValue(this.fPathTable[path]);\n    }\n  }\n  getMeta() {\n    const o = this.fJSONDsp;\n    const e = this.fJSONEffect;\n    const r = { ...o };\n    if (e) {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Sequencer\",\n        items: [\n          { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n          { type: \"vgroup\", label: \"Effect\", items: e.ui }\n        ]\n      }];\n    } else {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Polyphonic\",\n        items: [\n          { type: \"vgroup\", label: \"Voices\", items: o.ui }\n        ]\n      }];\n    }\n    return r;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.getMeta().ui;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  midiMessage(data) {\n    const cmd = data[0] >> 4;\n    const channel = data[0] & 15;\n    const data1 = data[1];\n    const data2 = data[2];\n    if (cmd === 8 || cmd === 9 && data2 === 0)\n      return this.keyOff(channel, data1, data2);\n    else if (cmd === 9)\n      return this.keyOn(channel, data1, data2);\n    else\n      super.midiMessage(data);\n  }\n  ctrlChange(channel, ctrl, value) {\n    if (ctrl === 123 || ctrl === 120) {\n      this.allNotesOff(true);\n    } else {\n      super.ctrlChange(channel, ctrl, value);\n    }\n  }\n  keyOn(channel, pitch, velocity) {\n    const voice = this.getFreeVoice();\n    this.fVoiceTable[voice].keyOn(pitch, velocity, this.fVoiceTable[voice].fCurNote == FaustWebAudioDspVoice.kLegatoVoice);\n  }\n  keyOff(channel, pitch, velocity) {\n    const voice = this.getPlayingVoice(pitch);\n    if (voice !== FaustWebAudioDspVoice.kNoVoice) {\n      this.fVoiceTable[voice].keyOff();\n    } else {\n      console.log(\"Playing pitch = %d not found\\n\", pitch);\n    }\n  }\n  allNotesOff(hard = true) {\n    this.fCachedEvents.push({ type: \"ctrlChange\", data: [0, 123, 0] });\n    this.fVoiceTable.forEach((voice) => voice.keyOff(hard));\n  }\n};\n\n// src/FaustAudioWorkletNode.ts\nvar FaustAudioWorkletNode = class extends (globalThis.AudioWorkletNode || null) {\n  constructor(context, name, factory, options) {\n    const JSONObj = JSON.parse(factory.json);\n    super(context, name, {\n      numberOfInputs: JSONObj.inputs > 0 ? 1 : 0,\n      numberOfOutputs: JSONObj.outputs > 0 ? 1 : 0,\n      channelCount: Math.max(1, JSONObj.inputs),\n      outputChannelCount: [JSONObj.outputs],\n      channelCountMode: \"explicit\",\n      channelInterpretation: \"speakers\",\n      processorOptions: options\n    });\n    this.fJSONDsp = JSONObj;\n    this.fJSON = factory.json;\n    this.fOutputHandler = null;\n    this.fComputeHandler = null;\n    this.fPlotHandler = null;\n    this.fDescriptor = [];\n    this.fInputsItems = [];\n    this.fUICallback = (item) => {\n      if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n        this.fInputsItems.push(item.address);\n        this.fDescriptor.push(item);\n      }\n    };\n    FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n    this.port.onmessage = (e) => {\n      if (e.data.type === \"param\" && this.fOutputHandler) {\n        this.fOutputHandler(e.data.path, e.data.value);\n      } else if (e.data.type === \"plot\" && this.fPlotHandler) {\n        this.fPlotHandler(e.data.value, e.data.index, e.data.events);\n      }\n    };\n  }\n  setOutputParamHandler(handler) {\n    this.fOutputHandler = handler;\n  }\n  getOutputParamHandler() {\n    return this.fOutputHandler;\n  }\n  setComputeHandler(handler) {\n    this.fComputeHandler = handler;\n  }\n  getComputeHandler() {\n    return this.fComputeHandler;\n  }\n  setPlotHandler(handler) {\n    this.fPlotHandler = handler;\n    if (this.fPlotHandler) {\n      this.port.postMessage({ type: \"setPlotHandler\", data: true });\n    } else {\n      this.port.postMessage({ type: \"setPlotHandler\", data: false });\n    }\n  }\n  getPlotHandler() {\n    return this.fPlotHandler;\n  }\n  getNumInputs() {\n    return this.fJSONDsp.inputs;\n  }\n  getNumOutputs() {\n    return this.fJSONDsp.outputs;\n  }\n  compute(inputs, outputs) {\n    return false;\n  }\n  metadata(handler) {\n    if (this.fJSONDsp.meta) {\n      this.fJSONDsp.meta.forEach((meta) => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n    }\n  }\n  midiMessage(data) {\n    const cmd = data[0] >> 4;\n    const channel = data[0] & 15;\n    const data1 = data[1];\n    const data2 = data[2];\n    if (cmd === 11)\n      this.ctrlChange(channel, data1, data2);\n    else if (cmd === 14)\n      this.pitchWheel(channel, data2 * 128 + data1);\n    else\n      this.port.postMessage({ type: \"midi\", data });\n  }\n  ctrlChange(channel, ctrl, value) {\n    const e = { type: \"ctrlChange\", data: [channel, ctrl, value] };\n    this.port.postMessage(e);\n  }\n  pitchWheel(channel, wheel) {\n    const e = { type: \"pitchWheel\", data: [channel, wheel] };\n    this.port.postMessage(e);\n  }\n  setParamValue(path, value) {\n    const e = { type: \"param\", data: { path, value } };\n    this.port.postMessage(e);\n    const param = this.parameters.get(path);\n    if (param)\n      param.setValueAtTime(value, this.context.currentTime);\n  }\n  getParamValue(path) {\n    const param = this.parameters.get(path);\n    return param ? param.value : 0;\n  }\n  getParams() {\n    return this.fInputsItems;\n  }\n  getMeta() {\n    return this.fJSONDsp;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.fJSONDsp.ui;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  start() {\n    this.port.postMessage({ type: \"start\" });\n  }\n  stop() {\n    this.port.postMessage({ type: \"stop\" });\n  }\n  destroy() {\n    this.port.postMessage({ type: \"destroy\" });\n    this.port.close();\n  }\n};\nvar FaustMonoAudioWorkletNode = class extends FaustAudioWorkletNode {\n  constructor(context, name, factory, sampleSize) {\n    super(context, name, factory, { name, factory, sampleSize });\n    this.onprocessorerror = (e) => {\n      console.error(\"Error from \" + this.fJSONDsp.name + \" FaustMonoAudioWorkletNode\");\n      throw e;\n    };\n  }\n};\nvar FaustPolyAudioWorkletNode = class extends FaustAudioWorkletNode {\n  constructor(context, name, voiceFactory, mixerModule, voices, sampleSize, effectFactory) {\n    super(context, name, voiceFactory, {\n      name,\n      voiceFactory,\n      mixerModule,\n      voices,\n      sampleSize,\n      effectFactory\n    });\n    this.onprocessorerror = (e) => {\n      console.error(\"Error from \" + this.fJSONDsp.name + \" FaustPolyAudioWorkletNode\");\n      throw e;\n    };\n    this.fJSONEffect = effectFactory ? JSON.parse(effectFactory.json) : null;\n    if (this.fJSONEffect) {\n      FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n    }\n  }\n  keyOn(channel, pitch, velocity) {\n    const e = { type: \"keyOn\", data: [channel, pitch, velocity] };\n    this.port.postMessage(e);\n  }\n  keyOff(channel, pitch, velocity) {\n    const e = { type: \"keyOff\", data: [channel, pitch, velocity] };\n    this.port.postMessage(e);\n  }\n  allNotesOff(hard) {\n    const e = { type: \"ctrlChange\", data: [0, 123, 0] };\n    this.port.postMessage(e);\n  }\n  getMeta() {\n    const o = this.fJSONDsp;\n    const e = this.fJSONEffect;\n    const r = { ...o };\n    if (e) {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Sequencer\",\n        items: [\n          { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n          { type: \"vgroup\", label: \"Effect\", items: e.ui }\n        ]\n      }];\n    } else {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Polyphonic\",\n        items: [\n          { type: \"vgroup\", label: \"Voices\", items: o.ui }\n        ]\n      }];\n    }\n    return r;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.getMeta().ui;\n  }\n};\n\n// src/FaustScriptProcessorNode.ts\nvar FaustScriptProcessorNode = class extends (globalThis.ScriptProcessorNode || null) {\n  init(instance) {\n    this.fDSPCode = instance;\n    this.fInputs = new Array(this.fDSPCode.getNumInputs());\n    this.fOutputs = new Array(this.fDSPCode.getNumOutputs());\n    this.onaudioprocess = (e) => {\n      for (let chan = 0; chan < this.fDSPCode.getNumInputs(); chan++) {\n        this.fInputs[chan] = e.inputBuffer.getChannelData(chan);\n      }\n      for (let chan = 0; chan < this.fDSPCode.getNumOutputs(); chan++) {\n        this.fOutputs[chan] = e.outputBuffer.getChannelData(chan);\n      }\n      return this.fDSPCode.compute(this.fInputs, this.fOutputs);\n    };\n    this.start();\n  }\n  compute(input, output) {\n    return this.fDSPCode.compute(input, output);\n  }\n  setOutputParamHandler(handler) {\n    this.fDSPCode.setOutputParamHandler(handler);\n  }\n  getOutputParamHandler() {\n    return this.fDSPCode.getOutputParamHandler();\n  }\n  setComputeHandler(handler) {\n    this.fDSPCode.setComputeHandler(handler);\n  }\n  getComputeHandler() {\n    return this.fDSPCode.getComputeHandler();\n  }\n  setPlotHandler(handler) {\n    this.fDSPCode.setPlotHandler(handler);\n  }\n  getPlotHandler() {\n    return this.fDSPCode.getPlotHandler();\n  }\n  getNumInputs() {\n    return this.fDSPCode.getNumInputs();\n  }\n  getNumOutputs() {\n    return this.fDSPCode.getNumOutputs();\n  }\n  metadata(handler) {\n  }\n  midiMessage(data) {\n    this.fDSPCode.midiMessage(data);\n  }\n  ctrlChange(chan, ctrl, value) {\n    this.fDSPCode.ctrlChange(chan, ctrl, value);\n  }\n  pitchWheel(chan, value) {\n    this.fDSPCode.pitchWheel(chan, value);\n  }\n  setParamValue(path, value) {\n    this.fDSPCode.setParamValue(path, value);\n  }\n  getParamValue(path) {\n    return this.fDSPCode.getParamValue(path);\n  }\n  getParams() {\n    return this.fDSPCode.getParams();\n  }\n  getMeta() {\n    return this.fDSPCode.getMeta();\n  }\n  getJSON() {\n    return this.fDSPCode.getJSON();\n  }\n  getDescriptors() {\n    return this.fDSPCode.getDescriptors();\n  }\n  getUI() {\n    return this.fDSPCode.getUI();\n  }\n  start() {\n    this.fDSPCode.start();\n  }\n  stop() {\n    this.fDSPCode.stop();\n  }\n  destroy() {\n    this.fDSPCode.destroy();\n  }\n};\nvar FaustMonoScriptProcessorNode = class extends FaustScriptProcessorNode {\n};\nvar FaustPolyScriptProcessorNode = class extends FaustScriptProcessorNode {\n  keyOn(channel, pitch, velocity) {\n    this.fDSPCode.keyOn(channel, pitch, velocity);\n  }\n  keyOff(channel, pitch, velocity) {\n    this.fDSPCode.keyOff(channel, pitch, velocity);\n  }\n  allNotesOff(hard) {\n    this.fDSPCode.allNotesOff(hard);\n  }\n};\n\n// src/FaustDspGenerator.ts\nvar _FaustMonoDspGenerator = class {\n  constructor() {\n    this.factory = null;\n  }\n  async compile(compiler, name, code, args) {\n    this.factory = await compiler.createMonoDSPFactory(name, code, args);\n    if (!this.factory)\n      return null;\n    this.name = name + this.factory.cfactory.toString();\n    return this;\n  }\n  async createNode(context, name = this.name, factory = this.factory, sp = false, bufferSize = 1024) {\n    if (!factory)\n      throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n    const meta = JSON.parse(factory.json);\n    const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n    if (sp) {\n      const instance = await FaustWasmInstantiator_default.createAsyncMonoDSPInstance(factory);\n      const monoDsp = new FaustMonoWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize);\n      const sp2 = context.createScriptProcessor(bufferSize, monoDsp.getNumInputs(), monoDsp.getNumOutputs());\n      Object.setPrototypeOf(sp2, FaustMonoScriptProcessorNode.prototype);\n      sp2.init(monoDsp);\n      return sp2;\n    } else {\n      if (!_FaustMonoDspGenerator.gWorkletProcessors.has(name)) {\n        try {\n          const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n            dspName: name,\n            dspMeta: meta,\n            poly: false\n          })};\n// Implementation needed classes of functions\nconst ${FaustDspInstance_default.name}_default = ${FaustDspInstance_default.toString()}\nconst ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nconst ${FaustMonoWebAudioDsp.name} = ${FaustMonoWebAudioDsp.toString()}\nconst ${FaustWasmInstantiator_default.name} = ${FaustWasmInstantiator_default.toString()}\n// Put them in dependencies\nconst dependencies = {\n    ${FaustBaseWebAudioDsp.name},\n    ${FaustMonoWebAudioDsp.name},\n    ${FaustWasmInstantiator_default.name}\n};\n// Generate the actual AudioWorkletProcessor code\n(${FaustAudioWorkletProcessor_default.toString()})(dependencies, faustData);\n`;\n          const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n          await context.audioWorklet.addModule(url);\n          _FaustMonoDspGenerator.gWorkletProcessors.add(name);\n        } catch (e) {\n          console.error(`=> exception raised while running createMonoNode: ${e}`);\n          console.error(`=> check that your page is served using https.${e}`);\n          return null;\n        }\n      }\n      const node = new FaustMonoAudioWorkletNode(context, name, factory, sampleSize);\n      return node;\n    }\n  }\n  async createOfflineProcessor(sampleRate, bufferSize, factory = this.factory) {\n    if (!factory)\n      throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n    const meta = JSON.parse(factory.json);\n    const instance = await FaustWasmInstantiator_default.createAsyncMonoDSPInstance(factory);\n    const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n    const monoDsp = new FaustMonoWebAudioDsp(instance, sampleRate, sampleSize, bufferSize);\n    return new FaustOfflineProcessor_default(monoDsp, bufferSize);\n  }\n};\nvar FaustMonoDspGenerator = _FaustMonoDspGenerator;\nFaustMonoDspGenerator.gWorkletProcessors = /* @__PURE__ */ new Set();\nvar _FaustPolyDspGenerator = class {\n  constructor() {\n    this.voiceFactory = null;\n    this.effectFactory = null;\n  }\n  async compile(compiler, name, dspCode, args, effectCode = `\nadapt(1,1) = _; adapt(2,2) = _,_; adapt(1,2) = _ <: _,_; adapt(2,1) = _,_ :> _;\nadaptor(F,G) = adapt(outputs(F),inputs(G));\ndsp_code = environment{${dspCode}};\nprocess = adaptor(dsp_code.process, dsp_code.effect) : dsp_code.effect;`) {\n    this.voiceFactory = await compiler.createPolyDSPFactory(name, dspCode, args);\n    if (!this.voiceFactory)\n      return null;\n    this.effectFactory = await compiler.createPolyDSPFactory(name, effectCode, args);\n    this.name = name + this.voiceFactory.cfactory.toString() + \"_poly\";\n    const voiceMeta = JSON.parse(this.voiceFactory.json);\n    const isDouble = voiceMeta.compile_options.match(\"-double\");\n    const { mixerBuffer, mixerModule } = await compiler.getAsyncInternalMixerModule(!!isDouble);\n    this.mixerBuffer = mixerBuffer;\n    this.mixerModule = mixerModule;\n    return this;\n  }\n  async createNode(context, voices, name = this.name, voiceFactory = this.voiceFactory, mixerModule = this.mixerModule, effectFactory = this.effectFactory, sp = false, bufferSize = 1024) {\n    if (!voiceFactory)\n      throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n    const voiceMeta = JSON.parse(voiceFactory.json);\n    const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : void 0;\n    const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n    if (sp) {\n      const instance = await FaustWasmInstantiator_default.createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory || void 0);\n      const polyDsp = new FaustPolyWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize);\n      const sp2 = context.createScriptProcessor(bufferSize, polyDsp.getNumInputs(), polyDsp.getNumOutputs());\n      Object.setPrototypeOf(sp2, FaustPolyScriptProcessorNode.prototype);\n      sp2.init(polyDsp);\n      return sp2;\n    } else {\n      if (!_FaustPolyDspGenerator.gWorkletProcessors.has(name)) {\n        try {\n          const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n            dspName: name,\n            dspMeta: voiceMeta,\n            poly: true,\n            effectMeta\n          })};\n// Implementation needed classes of functions\nconst ${FaustDspInstance_default.name}_default = ${FaustDspInstance_default.toString()}\nconst ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nconst ${FaustPolyWebAudioDsp.name} = ${FaustPolyWebAudioDsp.toString()}\nconst ${FaustWebAudioDspVoice.name} = ${FaustWebAudioDspVoice.toString()}\nconst ${FaustWasmInstantiator_default.name} = ${FaustWasmInstantiator_default.toString()}\n// Put them in dependencies\nconst dependencies = {\n    ${FaustBaseWebAudioDsp.name},\n    ${FaustPolyWebAudioDsp.name},\n    ${FaustWasmInstantiator_default.name}\n};\n// Generate the actual AudioWorkletProcessor code\n(${FaustAudioWorkletProcessor_default.toString()})(dependencies, faustData);\n`;\n          const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n          await context.audioWorklet.addModule(url);\n          _FaustPolyDspGenerator.gWorkletProcessors.add(name);\n        } catch (e) {\n          console.error(`=> exception raised while running createMonoNode: ${e}`);\n          console.error(`=> check that your page is served using https.${e}`);\n          return null;\n        }\n      }\n      const node = new FaustPolyAudioWorkletNode(context, name, voiceFactory, mixerModule, voices, sampleSize, effectFactory || void 0);\n      return node;\n    }\n  }\n};\nvar FaustPolyDspGenerator = _FaustPolyDspGenerator;\nFaustPolyDspGenerator.gWorkletProcessors = /* @__PURE__ */ new Set();\n\n// src/index.ts\nvar src_default = {\n  instantiateFaustModuleFromFile: instantiateFaustModuleFromFile_default,\n  getFaustAudioWorkletProcessor: FaustAudioWorkletProcessor_default,\n  FaustDspInstance: FaustDspInstance_default,\n  FaustCompiler: FaustCompiler_default,\n  FaustWasmInstantiator: FaustWasmInstantiator_default,\n  FaustOfflineProcessor: FaustOfflineProcessor_default,\n  FaustSvgDiagrams: FaustSvgDiagrams_default,\n  LibFaust: LibFaust_default,\n  WavEncoder: WavEncoder_default,\n  WavDecoder: WavDecoder_default\n};\nexport {\n  FaustAudioWorkletNode,\n  FaustBaseWebAudioDsp,\n  FaustCompiler_default as FaustCompiler,\n  FaustDspInstance_default as FaustDspInstance,\n  FaustMonoAudioWorkletNode,\n  FaustMonoDspGenerator,\n  FaustMonoScriptProcessorNode,\n  FaustMonoWebAudioDsp,\n  FaustOfflineProcessor_default as FaustOfflineProcessor,\n  FaustPolyAudioWorkletNode,\n  FaustPolyDspGenerator,\n  FaustPolyScriptProcessorNode,\n  FaustPolyWebAudioDsp,\n  FaustScriptProcessorNode,\n  FaustSvgDiagrams_default as FaustSvgDiagrams,\n  FaustWasmInstantiator_default as FaustWasmInstantiator,\n  FaustWebAudioDspVoice,\n  LibFaust_default as LibFaust,\n  WavDecoder_default as WavDecoder,\n  WavEncoder_default as WavEncoder,\n  src_default as default,\n  FaustAudioWorkletProcessor_default as getFaustAudioWorkletProcessor,\n  instantiateFaustModuleFromFile_default as instantiateFaustModuleFromFile\n};\n//# sourceMappingURL=index.js.map\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"js/\" + {\"_1e4a\":\"f75741ecb1df978717d1\",\"_c3b6\":\"ac795581fa2dad8352c7\",\"_7a82\":\"5758065bbde73098ecd9\",\"dsps_dsps_json\":\"b94d417b259f91304c8d\",\"dsps_abs_dspModule_wasm\":\"0e895ee6791de50053bb\",\"dsps_acos_dspModule_wasm\":\"e26672c503d40f2111d4\",\"dsps_acosh_dspModule_wasm\":\"6f0aa6108ac31d9d293e\",\"dsps_add_dspModule_wasm\":\"59520c3ffa47a43cb833\",\"dsps_allpass_dspModule_wasm\":\"eb0fb3b0e585933c48fc\",\"dsps_asin_dspModule_wasm\":\"9353243215bc0de84983\",\"dsps_asinh_dspModule_wasm\":\"7b13096f6480c9b64a41\",\"dsps_atan_dspModule_wasm\":\"17811b5924fc4bcfa2d0\",\"dsps_atan2_dspModule_wasm\":\"f39523de16707d695fab\",\"dsps_atanh_dspModule_wasm\":\"46eefbd4bf523e0daada\",\"dsps_atodb_dspModule_wasm\":\"4b669635bed770a4f84d\",\"dsps_bandpass_dspModule_wasm\":\"3da35965e7fba7a06bed\",\"dsps_biquad_dspModule_wasm\":\"e712f4c98963a774b5ae\",\"dsps_bitand_dspModule_wasm\":\"e24cfbc81b220bb510c0\",\"dsps_bitor_dspModule_wasm\":\"7ec716da07a4d1ec02ed\",\"dsps_bitxor_dspModule_wasm\":\"1d3783e006ec0a56cd38\",\"dsps_change_dspModule_wasm\":\"a3e83b249ba823cce546\",\"dsps_cycle_dspModule_wasm\":\"370efb0d1ee02849f919\",\"dsps_dbtoa_dspModule_wasm\":\"42f19657f03936408587\",\"dsps_div_dspModule_wasm\":\"27e6a55f17c85264824b\",\"dsps_eq_dspModule_wasm\":\"5df9245c238da4a4c65e\",\"dsps_filtercoeff_dspModule_wasm\":\"205943ce972f1f0cf51f\",\"dsps_ftom_dspModule_wasm\":\"ceb793c4c0589a21cab7\",\"dsps_geq_dspModule_wasm\":\"e1579605d823cde93805\",\"dsps_gtr_dspModule_wasm\":\"e59fbc64dbabf8bece3d\",\"dsps_highpass_dspModule_wasm\":\"14e2a352382d7ef2bb77\",\"dsps_highshelf_dspModule_wasm\":\"dcc8d4127b3045caf0e4\",\"dsps_leq_dspModule_wasm\":\"427619c4c3c9f858f29e\",\"dsps_log_dspModule_wasm\":\"d01b54837264c52bf1f4\",\"dsps_lowpass_dspModule_wasm\":\"9b864930ceb49b36521b\",\"dsps_lowshelf_dspModule_wasm\":\"566e6fac7ded81855f1d\",\"dsps_lss_dspModule_wasm\":\"9101a9979f4ce4f1f14d\",\"dsps_max_dspModule_wasm\":\"085829973d16a184e581\",\"dsps_min_dspModule_wasm\":\"061389aa700fe93222cc\",\"dsps_mod_dspModule_wasm\":\"9047203c1985fece9fc8\",\"dsps_mtof_dspModule_wasm\":\"489240c018cf3f9993da\",\"dsps_mul_dspModule_wasm\":\"ed0a39232ed1fbf0c58e\",\"dsps_neq_dspModule_wasm\":\"8d999154774832980a82\",\"dsps_noise_dspModule_wasm\":\"91ac41da19a38f77c84e\",\"dsps_notch_dspModule_wasm\":\"14caf76091da1bbfa5a1\",\"dsps_peaknotch_dspModule_wasm\":\"1bd5591107bf5d19f36d\",\"dsps_phasor_dspModule_wasm\":\"e093628cc3e6ac1f5703\",\"dsps_pink_dspModule_wasm\":\"86e1dda760e4f0723259\",\"dsps_rdiv_dspModule_wasm\":\"1e700968a50412e80dbe\",\"dsps_rect_dspModule_wasm\":\"ad3ead814821427e53ef\",\"dsps_rsub_dspModule_wasm\":\"1411b5811e456c7b8a85\",\"dsps_smooth_dspModule_wasm\":\"cafe56cbceb7ad260a00\",\"dsps_sub_dspModule_wasm\":\"0053b421a7aa4a22ae8d\",\"dsps_tri_dspModule_wasm\":\"2245f9469690321f7bc4\",\"dsps_abs_dspMeta_json\":\"6c3817caecba29c40ba9\",\"dsps_acos_dspMeta_json\":\"12133c48a2c05a2cce87\",\"dsps_acosh_dspMeta_json\":\"b3bece826caa86450e9e\",\"dsps_add_dspMeta_json\":\"96dd39bd6be98c8888ce\",\"dsps_allpass_dspMeta_json\":\"e33d4407bd2b8d3dc448\",\"dsps_asin_dspMeta_json\":\"8140f9f4a99b46a1bc5c\",\"dsps_asinh_dspMeta_json\":\"78bed74ab6c90673e1b6\",\"dsps_atan_dspMeta_json\":\"e31ac747e32e12fbe13a\",\"dsps_atan2_dspMeta_json\":\"b2f14bc3000a1b641238\",\"dsps_atanh_dspMeta_json\":\"1500841eee8536170e3f\",\"dsps_atodb_dspMeta_json\":\"2711f4fa9a20a08f5fd1\",\"dsps_bandpass_dspMeta_json\":\"4cd9c98d910da452b060\",\"dsps_biquad_dspMeta_json\":\"1121a5ebe355b33da5de\",\"dsps_bitand_dspMeta_json\":\"a7d8d8a168ba83e036fb\",\"dsps_bitor_dspMeta_json\":\"eaf6bfdb89fe3b675a68\",\"dsps_bitxor_dspMeta_json\":\"0d65eed8efaf26e6b6ee\",\"dsps_change_dspMeta_json\":\"dc2acf5598e3f9530b88\",\"dsps_cycle_dspMeta_json\":\"f4ed75a5700751a38c75\",\"dsps_dbtoa_dspMeta_json\":\"facbf9ea77af396e0dd7\",\"dsps_div_dspMeta_json\":\"201ef8f68aaecd6e06bc\",\"dsps_eq_dspMeta_json\":\"d4e1e7931eda67d94427\",\"dsps_filtercoeff_dspMeta_json\":\"1ff62a0a82f47115a0f6\",\"dsps_ftom_dspMeta_json\":\"0b9e94d6c6980b077adc\",\"dsps_geq_dspMeta_json\":\"199550099c85f5f73a4b\",\"dsps_gtr_dspMeta_json\":\"fe67ff275178efcc1dae\",\"dsps_highpass_dspMeta_json\":\"14ec9ea61df8dae0a795\",\"dsps_highshelf_dspMeta_json\":\"509308f23fc38caba727\",\"dsps_leq_dspMeta_json\":\"b0e3cb32371252bb4869\",\"dsps_log_dspMeta_json\":\"a9424e6939342a36f126\",\"dsps_lowpass_dspMeta_json\":\"440e7ee501ec5cb3d301\",\"dsps_lowshelf_dspMeta_json\":\"b7928a3a225815b2798b\",\"dsps_lss_dspMeta_json\":\"36961c3db5868cbbef4f\",\"dsps_max_dspMeta_json\":\"76cdfa7d6d90f906f826\",\"dsps_min_dspMeta_json\":\"0d98b880e53095f4e8b5\",\"dsps_mod_dspMeta_json\":\"d96a637731e7ee3f8451\",\"dsps_mtof_dspMeta_json\":\"7f2e7c95d94bb7756967\",\"dsps_mul_dspMeta_json\":\"7b667828b1f1f68b7fdd\",\"dsps_neq_dspMeta_json\":\"4f2b05acbcf5c1d203ac\",\"dsps_noise_dspMeta_json\":\"93457af337c77b0e0bd3\",\"dsps_notch_dspMeta_json\":\"2592ca62b24a84266184\",\"dsps_peaknotch_dspMeta_json\":\"381029988d6e61814dd8\",\"dsps_phasor_dspMeta_json\":\"2754144d946786f4459d\",\"dsps_pink_dspMeta_json\":\"fd5f4cf6c927abf10774\",\"dsps_rdiv_dspMeta_json\":\"37e336166cbd304951c1\",\"dsps_rect_dspMeta_json\":\"0c03c6de7ce275335b56\",\"dsps_rsub_dspMeta_json\":\"16aa81541405c9176c9f\",\"dsps_smooth_dspMeta_json\":\"89fc8050207ddcd23e1b\",\"dsps_sub_dspMeta_json\":\"159f299c6f4fbfe511ce\",\"dsps_tri_dspMeta_json\":\"8ce43441e8192f99c4a9\"}[chunkId] + \".js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"@jspatcher/package-dsp:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\t\tscript.type = \"module\";\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (typeof import.meta.url === \"string\") scriptUrl = import.meta.url\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"index.jspatpkg\": 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_jspatcher_package_dsp\"] = self[\"webpackChunk_jspatcher_package_dsp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import { FaustMonoDspGenerator } from \"@shren/faustwasm\";\r\nimport getDsps from \"./getDsps\";\r\nimport FaustDspObject, { FaustDspInternalState } from \"./FaustDspObject\";\r\n\r\nexport default async () => {\r\n    const objects: Record<string, typeof FaustDspObject> = {};\r\n    const dspIdMap: Record<string, string> = {\r\n        add: \"+\",\r\n        sub: \"-\",\r\n        rsub: \"!-\",\r\n        mul: \"*\",\r\n        div: \"/\",\r\n        rdiv: \"!/\",\r\n        gtr: \">\",\r\n        geq: \">=\",\r\n        lss: \"<\",\r\n        leq: \"<=\",\r\n        eq: \"=\",\r\n        neq: \"!=\",\r\n        mod: \"%\",\r\n        bitand: \"&\",\r\n        bitor: \"|\",\r\n        max: \"maximum\",\r\n        min: \"minimum\",\r\n    };\r\n    const dsps = await getDsps();\r\n    const faustDspGenerator = new FaustMonoDspGenerator();\r\n    for (const dspId in dsps) {\r\n        const dspFactory = dsps[dspId];\r\n        objects[`${dspIdMap[dspId] || dspId}~`] = class extends FaustDspObject<any, any, any, any, any> {\r\n            _: FaustDspInternalState = {\r\n                ...this._,\r\n                dspFactory,\r\n                dspId,\r\n                faustDspGenerator\r\n            }\r\n        }\r\n    }\r\n    return objects;\r\n};\r\n"],"names":[],"sourceRoot":""}