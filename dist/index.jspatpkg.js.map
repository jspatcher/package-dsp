{"version":3,"file":"index.jspatpkg.js","mappingsmEAAmE,aAAa;AAChF;AACA,qDAAqD,aAAa;AAClE;AACA;AACA;AACA;AACA,8BAA8B,kCAAkC;AAChE;AACA;AACA;AACA;AACA;AACA,iCAAiC,kGAAkG;AACnI;AACA;AACA;AACA;AACA,mGAAmG,uEAAuE,+CAA+C,IAAI,kCAAkC;AAC/P;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAM;AACrB,QAAQ;AACR;AACA;AACA;AACA,gBAAgB,KAA4B,IAAI,wwBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0BAA0B;AAC3D;AACA;AACA,YAAY;AACZ,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACdsBAAsB,YAAY;AAClC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,UAAU,mCAAO;AACjB;AACA,WAAW;AAAA,kGAAC;AACZ;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,2EAAQ,MAAM,CAAC;AAC/B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,qCAAqC,YAAY;AACjD;AACA;AACA;;AAEA;AACA;AACA,UAAU,uDAAuD;AACjE;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oGAAoG;AAC5H,UAAU;AACV,wBAAwB,4EAA4E;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,4CAA4C;AACxI,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6CAA6C;AAC3D,cAAc,sBAAsB;AACpC;AACA;AACA,mFAAmF,4BAA4B;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6CAA6C;AAC3D,cAAc,+DAA+D;AAC7E;AACA;AACA;AACA;AACA;AACA,mFAAmF,4BAA4B;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,QAAQ;AACR;AACA,6EAA6E,mBAAmB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,oEAAoE,mBAAmB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,2EAA2E,mBAAmB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,mDAAmD,oBAAoB;AACvE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,mDAAmD,oBAAoB;AACvE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD,cAAc;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,gCAAgC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0CAA0C;AAC9E;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,SAAS;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,MAAM;AACN,yEAAyE,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oBAAoB;AACnE,QAAQ;AACR;AACA;AACA;AACA;AACA,MAAM;AACN,oEAAoE,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,KAAK;AACzC,6FAA6F,KAAK,OAAO,KAAK;AAC9G,MAAM;AACN;AACA,kFAAkF,KAAK;AACvF;AACA;AACA;AACA,iCAAiC,KAAK;AACtC,yGAAyG,KAAK,OAAO,KAAK,KAAK,kBAAkB;AACjJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa,cAAc,eAAe;AACzE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sEAAsE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAuD;AACnE;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnqBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA,yCAAyC,kDAAkD;AAC3F,YAAY;AACZ;AACA;AACA;AACA,yDAAyD,kDAAkD;AAC3G;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kDAAkD;AAClF;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,gCAAgC,4CAA4C;AAC5E;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA;AACA,yBAAyB,6BAA6B;AACtD;AACA;AACA;AACA,yBAAyB,6BAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sBAAsB;AACtB,qBAAqB;AACrB,sBAAsB;AACtB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAsD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB,eAAe;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA;AACA,yBAAyB,6BAA6B;AACtD;AACA;AACA;AACA;AACA;AACA,yBAAyB,6BAA6B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sBAAsB;AACtB,qBAAqB;AACrB,sBAAsB;AACtB,qBAAqB;AACrB,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,wDAAwD,sCAAsC,UAAU,aAAa;AACrH;AACA;AACA;AACA,wDAAwD,sCAAsC,UAAU,aAAa;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,yBAAyB,sDAAsD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB,eAAe;AACtE;AACA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAkD;AAC9D,YAAY;AACZ;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,8BAA8B,uCAAuC;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oCAAoC;AAClE,MAAM;AACN,8BAA8B,qCAAqC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA,oCAAoC,2BAA2B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAkD;AAC9D,YAAY;AACZ;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA,yBAAyB,sCAAsC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ,8BAA8B,aAAa;AACnD,QAAQ,2BAA2B,IAAI;AACvC,QAAQ,2BAA2B,IAAI;AACvC,QAAQ,oCAAoC,IAAI;AAChD;AACA;AACA,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM;AACN;AACA;AACA,GAAG,8CAA8C;AACjD;AACA,sEAAsE,yBAAyB;AAC/F;AACA;AACA,UAAU;AACV,6EAA6E,EAAE;AAC/E,yEAAyE,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB,uBAAuB;AACzD;AACA,uBAAuB,EAAE;AACzB,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2BAA2B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,QAAQ,8BAA8B,aAAa;AACnD,QAAQ,2BAA2B,IAAI;AACvC,QAAQ,2BAA2B,IAAI;AACvC,QAAQ,4BAA4B,IAAI;AACxC,QAAQ,oCAAoC,IAAI;AAChD;AACA;AACA,MAAM,0BAA0B;AAChC,MAAM,0BAA0B;AAChC,MAAM;AACN;AACA;AACA,GAAG,8CAA8C;AACjD;AACA,sEAAsE,yBAAyB;AAC/F;AACA;AACA,UAAU;AACV,6EAA6E,EAAE;AAC/E,yEAAyE,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtqFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACP6D;AAC7D;AAce,6BAML,+CAAa,CAAoB;AAAA,EAN3C,cAhBA;AAgBA;AA6BI,aAA0D;AAAA,MACtD,UAAU,KAAK,SAAS;AAAA;AAAA;AAAA,MAExB,cAAc;AACd,WAAO,KAAK,WAAW,IAAI,SAAO,CAAC,GAAG,KAAK,KAAK,OAAK,EAAE,uBAAuB,UAAU,OAAK,CAAC;AAAA;AAAA,EAElG,0BAA0B;AACtB,UAAM,EAAE,gBAAgB;AACxB,UAAM,EAAE,UAAU,QAAQ,sBAAsB,KAAK;AACrD,QAAI,CAAC;AAAQ;AACb,QAAI,gBAAgB,mBAAmB;AACnC,UAAI,sBAAsB;AAAI,iBAAS;AACvC,UAAI,gBAAgB;AAAI,iBAAS,QAAQ,QAAQ,GAAG;AACpD,WAAK,EAAE,oBAAoB;AAAA;AAAA;AAAA,EAGnC,YAAY;AACR,SAAK,GAAG,WAAW,MAAM;AACrB,YAAM,OAAqB,KAAK,MAAM,KAAK,EAAE,WAAW;AACxD,YAAM,EAAE,QAAQ,YAAY;AAC5B,WAAK,SAAS;AACd,WAAK,UAAU;AACf,WAAK;AACL,UAAI,QAAQ;AACR,cAAM,SAAS,KAAK,SAAS,oBAAoB;AACjD,aAAK,EAAE,SAAS;AAChB,aAAK,wBAAwB,IAAI,MAAM,QAAQ,KAAK,MAAM,IAAI,CAAC,GAAG,MAAO,GAAE,MAAM,QAAQ,OAAO;AAAA;AAEpG,YAAM,WAAW,KAAK,SAAS,sBAAsB;AACrD,WAAK,EAAE,WAAW;AAClB,WAAK,yBAAyB,IAAI,MAAM,SAAS,KAAK,MAAM,IAAI,CAAC,GAAG,MAAO,GAAE,MAAM,UAAU,OAAO;AACpG,WAAK;AAAA;AAET,SAAK,GAAG,YAAY,YAAY;AAC5B,YAAM,EAAE,YAAY,mBAAmB,OAAO,UAAU,QAAQ,aAAa,KAAK;AAClF,YAAM,OAAO,MAAM,kBAAkB,WAAW,KAAK,UAAU,OAAO;AACtE,WAAK,EAAE,OAAO;AACd,uCAAQ,QAAQ;AAChB,WAAK,QAAQ;AACb,eAAS,OAAO,QAAQ,CAAC,KAAK,KAAK,MAAM;AACzC,eAAS;AACT,WAAK;AAAA;AAET,SAAK,GAAG,eAAe,CAAC,EAAE,WAAW;AACjC,WAAK,EAAE,SAAS,OAAO,QAAQ,CAAC,KAAK,MAAM;AAAA;AAE/C,SAAK,GAAG,SAAS,CAAC,EAAE,OAAO,WAAW;AAClC,UAAI,OAAO,SAAS,UAAU;AAC1B,aAAK,EAAE,SAAS,OAAO,QAAQ;AAAA;AAAA;AAGvC,SAAK,GAAG,kBAAkB,MAAM,KAAK;AACrC,SAAK,GAAG,qBAAqB,MAAM,KAAK;AACxC,SAAK,GAAG,WAAW,MAAM;AACrB,YAAM,EAAE,UAAU,QAAQ,UAAU,SAAS,KAAK;AAClD,2CAAU;AACV,uCAAQ;AACR,2CAAU;AACV,mCAAM;AACN,mCAAM;AAAA;AAAA;AAAA;AAjFP,yBAAU,wCAAI;AACd,wBAAS,0CAAM;AACf,yBAAU,2CAAO;AACjB,6BAAc,+CAAW;AACzB,wBAAsB,CAAC;AAAA,EAC1B,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,WAAW;AAAA;AAER,yBAAwB,CAAC;AAAA,EAC5B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,WAAW;AAAA;AAER,sBAAkB,CAAC;AAAA,EACtB,MAAM;AAAA,EACN,UAAU;AAAA,EACV,aAAa;AAAA,EACb,SAAS;AAAA;AAEN,oBAAK,2CAAS;;;;;;;;;;;;;;;AC1CzB,iEAAe,YAAY;AACvB,QAAM,OAA6C;AACnD,QAAM,SAAS,MAAM,8JAA2B;AAChD,QAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,aAAW,SAAS,MAAM;AACtB,UAAM,YAAa,OAAM,2EAAO,GAAS,EAAE,MAAM,gBAAgB,CAAC,EAAE;AACpE,UAAM,YAAY,MAAM,MAAM;AAC9B,UAAM,SAAS,MAAM,YAAY,iBAAiB;AAClD,UAAM,OAAQ,OAAM,yEAAO,GAAS,EAAE,MAAM,cAAc,CAAC,EAAE;AAC7D,SAAK,SAAS;AAAA,MACV;AAAA,MACA;AAAA;AAAA;AAGR,SAAO;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChB8B;AAGlC,MAAM,OAAO,gEAAsB,CAAC,KAAK,MAAM,QAAQ,aAAa;AAEpE,MAAM,EAAE,QAAQ,SAAS,UAAU,SAAS,aAAa,cAAc,qDAAW;AAEzF,iEAAe,iBAAE,MAAM,QAAQ,SAAS,UAAU,SAAS,eAAgB;;;;;;;;;;;;;;;ACP3E,MAAM,OAAO,mBAAO,CAAC,uCAAiB;AAEtC,iEAAe,KAAK,MAAM,KAAK,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAhC,MAAM,MAAO,WAAmB,aAAa;AACtC,MAAM;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACA;;;;;;;;;;;;;;;;;SClBJ;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;SAEA;SACA;;;;;UCzBA;;;;;UCAA;UACA;UACA;UACA;UACA;UACA,iCAAiC,WAAW;UAC5C;UACA;;;;;UCPA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,sDAAsD;UACtD,sCAAsC,iEAAiE;UACvG;UACA;UACA;UACA;UACA;UACA;;;;;UCzBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,EAAE;UACF;;;;;UCRA;UACA;UACA;UACA,iBAAiB,wyGAAwyG;UACzzG;;;;;UCJA;UACA;UACA;UACA;UACA,GAAG;UACH;UACA;UACA,CAAC;;;;;UCPD;;;;;UCAA;UACA;UACA;UACA;UACA,uBAAuB,4BAA4B;UACnD;UACA;UACA;UACA,iBAAiB,oBAAoB;UACrC;UACA,mGAAmG,YAAY;UAC/G;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,mEAAmE,iCAAiC;UACpG;UACA;UACA;UACA;;;;;UCzCA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;UCNA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;UCNA;;UAEA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA,iCAAiC;;UAEjC;UACA;UACA;UACA,KAAK;UACL,eAAe;UACf;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,MAAM;UACN;UACA;UACA;;UAEA;;UAEA;;UAEA;;UAEA;;UAEA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,MAAM,qBAAqB;UAC3B;UACA;UACA;UACA;UACA;UACA;;UAEA;;UAEA;UACA;UACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFyD;AACzB;AAChC;AAEA,iEAAe,YAAY;AACvB,QAAM,UAAiD;AACvD,QAAM,WAAmC;AAAA,IACrC,KAAK;AAAA,IACL,KAAK;AAAA,IACL,MAAM;AAAA,IACN,KAAK;AAAA,IACL,KAAK;AAAA,IACL,MAAM;AAAA,IACN,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,IAAI;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,KAAK;AAAA,IACL,KAAK;AAAA;AAET,QAAM,OAAO,MAAM,oDAAO;AAC1B,QAAM,oBAAoB,IAAI,mEAAqB;AACnD,aAAW,SAAS,MAAM;AACtB,UAAM,aAAa,KAAK;AACxB,YAAQ,GAAG,SAAS,UAAU,YAAY,cAAc,uDAAc,CAA0B;AAAA,MAAtD,cA7BlD;AA6BkD;AACtC,iBAA2B,iCACpB,KAAK,IADe;AAAA,UAEvB;AAAA,UACA;AAAA,UACA;AAAA;AAAA;AAAA;AAAA;AAIZ,SAAO;AAAA","sources":["webpack://@jspatcher/package-dsp/./dsps|lazy|/^/.*/dspMeta/.json$/|groupOptions: {}|namespace object","webpack://@jspatcher/package-dsp/./dsps|lazy|/^/.*/dspModule/.wasm$/|groupOptions: {}|namespace object","webpack://@jspatcher/package-dsp/./node_modules/@shren/faustwasm/dist/index.js","webpack://@jspatcher/package-dsp/./node_modules/@shren/faustwasm/dist|sync","webpack://@jspatcher/package-dsp/./src/FaustDspObject.ts","webpack://@jspatcher/package-dsp/./src/getDsps.ts","webpack://@jspatcher/package-dsp/./src/index.ts","webpack://@jspatcher/package-dsp/./src/package-info.ts","webpack://@jspatcher/package-dsp/./src/sdk.ts","webpack://@jspatcher/package-dsp/webpack/bootstrap","webpack://@jspatcher/package-dsp/webpack/runtime/amd options","webpack://@jspatcher/package-dsp/webpack/runtime/compat get default export","webpack://@jspatcher/package-dsp/webpack/runtime/create fake namespace object","webpack://@jspatcher/package-dsp/webpack/runtime/define property getters","webpack://@jspatcher/package-dsp/webpack/runtime/ensure chunk","webpack://@jspatcher/package-dsp/webpack/runtime/get javascript chunk filename","webpack://@jspatcher/package-dsp/webpack/runtime/global","webpack://@jspatcher/package-dsp/webpack/runtime/hasOwnProperty shorthand","webpack://@jspatcher/package-dsp/webpack/runtime/load script","webpack://@jspatcher/package-dsp/webpack/runtime/make namespace object","webpack://@jspatcher/package-dsp/webpack/runtime/publicPath","webpack://@jspatcher/package-dsp/webpack/runtime/jsonp chunk loading","webpack://@jspatcher/package-dsp/./src/index.jspatpkg.ts"],"sourcesContent":["var map = {\n\t\"./abs/dspMeta.json\": [\n\t\t\"./dsps/abs/dspMeta.json\",\n\t\t\"dsps_abs_dspMeta_json\"\n\t],\n\t\"./acos/dspMeta.json\": [\n\t\t\"./dsps/acos/dspMeta.json\",\n\t\t\"dsps_acos_dspMeta_json\"\n\t],\n\t\"./acosh/dspMeta.json\": [\n\t\t\"./dsps/acosh/dspMeta.json\",\n\t\t\"dsps_acosh_dspMeta_json\"\n\t],\n\t\"./add/dspMeta.json\": [\n\t\t\"./dsps/add/dspMeta.json\",\n\t\t\"dsps_add_dspMeta_json\"\n\t],\n\t\"./asin/dspMeta.json\": [\n\t\t\"./dsps/asin/dspMeta.json\",\n\t\t\"dsps_asin_dspMeta_json\"\n\t],\n\t\"./asinh/dspMeta.json\": [\n\t\t\"./dsps/asinh/dspMeta.json\",\n\t\t\"dsps_asinh_dspMeta_json\"\n\t],\n\t\"./atan/dspMeta.json\": [\n\t\t\"./dsps/atan/dspMeta.json\",\n\t\t\"dsps_atan_dspMeta_json\"\n\t],\n\t\"./atan2/dspMeta.json\": [\n\t\t\"./dsps/atan2/dspMeta.json\",\n\t\t\"dsps_atan2_dspMeta_json\"\n\t],\n\t\"./atanh/dspMeta.json\": [\n\t\t\"./dsps/atanh/dspMeta.json\",\n\t\t\"dsps_atanh_dspMeta_json\"\n\t],\n\t\"./atodb/dspMeta.json\": [\n\t\t\"./dsps/atodb/dspMeta.json\",\n\t\t\"dsps_atodb_dspMeta_json\"\n\t],\n\t\"./bitand/dspMeta.json\": [\n\t\t\"./dsps/bitand/dspMeta.json\",\n\t\t\"dsps_bitand_dspMeta_json\"\n\t],\n\t\"./bitor/dspMeta.json\": [\n\t\t\"./dsps/bitor/dspMeta.json\",\n\t\t\"dsps_bitor_dspMeta_json\"\n\t],\n\t\"./bitxor/dspMeta.json\": [\n\t\t\"./dsps/bitxor/dspMeta.json\",\n\t\t\"dsps_bitxor_dspMeta_json\"\n\t],\n\t\"./change/dspMeta.json\": [\n\t\t\"./dsps/change/dspMeta.json\",\n\t\t\"dsps_change_dspMeta_json\"\n\t],\n\t\"./dbtoa/dspMeta.json\": [\n\t\t\"./dsps/dbtoa/dspMeta.json\",\n\t\t\"dsps_dbtoa_dspMeta_json\"\n\t],\n\t\"./div/dspMeta.json\": [\n\t\t\"./dsps/div/dspMeta.json\",\n\t\t\"dsps_div_dspMeta_json\"\n\t],\n\t\"./eq/dspMeta.json\": [\n\t\t\"./dsps/eq/dspMeta.json\",\n\t\t\"dsps_eq_dspMeta_json\"\n\t],\n\t\"./ftom/dspMeta.json\": [\n\t\t\"./dsps/ftom/dspMeta.json\",\n\t\t\"dsps_ftom_dspMeta_json\"\n\t],\n\t\"./geq/dspMeta.json\": [\n\t\t\"./dsps/geq/dspMeta.json\",\n\t\t\"dsps_geq_dspMeta_json\"\n\t],\n\t\"./gtr/dspMeta.json\": [\n\t\t\"./dsps/gtr/dspMeta.json\",\n\t\t\"dsps_gtr_dspMeta_json\"\n\t],\n\t\"./leq/dspMeta.json\": [\n\t\t\"./dsps/leq/dspMeta.json\",\n\t\t\"dsps_leq_dspMeta_json\"\n\t],\n\t\"./log/dspMeta.json\": [\n\t\t\"./dsps/log/dspMeta.json\",\n\t\t\"dsps_log_dspMeta_json\"\n\t],\n\t\"./lss/dspMeta.json\": [\n\t\t\"./dsps/lss/dspMeta.json\",\n\t\t\"dsps_lss_dspMeta_json\"\n\t],\n\t\"./max/dspMeta.json\": [\n\t\t\"./dsps/max/dspMeta.json\",\n\t\t\"dsps_max_dspMeta_json\"\n\t],\n\t\"./min/dspMeta.json\": [\n\t\t\"./dsps/min/dspMeta.json\",\n\t\t\"dsps_min_dspMeta_json\"\n\t],\n\t\"./mod/dspMeta.json\": [\n\t\t\"./dsps/mod/dspMeta.json\",\n\t\t\"dsps_mod_dspMeta_json\"\n\t],\n\t\"./mtof/dspMeta.json\": [\n\t\t\"./dsps/mtof/dspMeta.json\",\n\t\t\"dsps_mtof_dspMeta_json\"\n\t],\n\t\"./mul/dspMeta.json\": [\n\t\t\"./dsps/mul/dspMeta.json\",\n\t\t\"dsps_mul_dspMeta_json\"\n\t],\n\t\"./neq/dspMeta.json\": [\n\t\t\"./dsps/neq/dspMeta.json\",\n\t\t\"dsps_neq_dspMeta_json\"\n\t],\n\t\"./noise/dspMeta.json\": [\n\t\t\"./dsps/noise/dspMeta.json\",\n\t\t\"dsps_noise_dspMeta_json\"\n\t],\n\t\"./pink/dspMeta.json\": [\n\t\t\"./dsps/pink/dspMeta.json\",\n\t\t\"dsps_pink_dspMeta_json\"\n\t],\n\t\"./rdiv/dspMeta.json\": [\n\t\t\"./dsps/rdiv/dspMeta.json\",\n\t\t\"dsps_rdiv_dspMeta_json\"\n\t],\n\t\"./rsub/dspMeta.json\": [\n\t\t\"./dsps/rsub/dspMeta.json\",\n\t\t\"dsps_rsub_dspMeta_json\"\n\t],\n\t\"./sub/dspMeta.json\": [\n\t\t\"./dsps/sub/dspMeta.json\",\n\t\t\"dsps_sub_dspMeta_json\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./dsps lazy recursive ^\\\\.\\\\/.*\\\\/dspMeta\\\\.json$\";\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./abs/dspModule.wasm\": [\n\t\t\"./dsps/abs/dspModule.wasm\",\n\t\t\"dsps_abs_dspModule_wasm\"\n\t],\n\t\"./acos/dspModule.wasm\": [\n\t\t\"./dsps/acos/dspModule.wasm\",\n\t\t\"dsps_acos_dspModule_wasm\"\n\t],\n\t\"./acosh/dspModule.wasm\": [\n\t\t\"./dsps/acosh/dspModule.wasm\",\n\t\t\"dsps_acosh_dspModule_wasm\"\n\t],\n\t\"./add/dspModule.wasm\": [\n\t\t\"./dsps/add/dspModule.wasm\",\n\t\t\"dsps_add_dspModule_wasm\"\n\t],\n\t\"./asin/dspModule.wasm\": [\n\t\t\"./dsps/asin/dspModule.wasm\",\n\t\t\"dsps_asin_dspModule_wasm\"\n\t],\n\t\"./asinh/dspModule.wasm\": [\n\t\t\"./dsps/asinh/dspModule.wasm\",\n\t\t\"dsps_asinh_dspModule_wasm\"\n\t],\n\t\"./atan/dspModule.wasm\": [\n\t\t\"./dsps/atan/dspModule.wasm\",\n\t\t\"dsps_atan_dspModule_wasm\"\n\t],\n\t\"./atan2/dspModule.wasm\": [\n\t\t\"./dsps/atan2/dspModule.wasm\",\n\t\t\"dsps_atan2_dspModule_wasm\"\n\t],\n\t\"./atanh/dspModule.wasm\": [\n\t\t\"./dsps/atanh/dspModule.wasm\",\n\t\t\"dsps_atanh_dspModule_wasm\"\n\t],\n\t\"./atodb/dspModule.wasm\": [\n\t\t\"./dsps/atodb/dspModule.wasm\",\n\t\t\"dsps_atodb_dspModule_wasm\"\n\t],\n\t\"./bitand/dspModule.wasm\": [\n\t\t\"./dsps/bitand/dspModule.wasm\",\n\t\t\"dsps_bitand_dspModule_wasm\"\n\t],\n\t\"./bitor/dspModule.wasm\": [\n\t\t\"./dsps/bitor/dspModule.wasm\",\n\t\t\"dsps_bitor_dspModule_wasm\"\n\t],\n\t\"./bitxor/dspModule.wasm\": [\n\t\t\"./dsps/bitxor/dspModule.wasm\",\n\t\t\"dsps_bitxor_dspModule_wasm\"\n\t],\n\t\"./change/dspModule.wasm\": [\n\t\t\"./dsps/change/dspModule.wasm\",\n\t\t\"dsps_change_dspModule_wasm\"\n\t],\n\t\"./dbtoa/dspModule.wasm\": [\n\t\t\"./dsps/dbtoa/dspModule.wasm\",\n\t\t\"dsps_dbtoa_dspModule_wasm\"\n\t],\n\t\"./div/dspModule.wasm\": [\n\t\t\"./dsps/div/dspModule.wasm\",\n\t\t\"dsps_div_dspModule_wasm\"\n\t],\n\t\"./eq/dspModule.wasm\": [\n\t\t\"./dsps/eq/dspModule.wasm\",\n\t\t\"dsps_eq_dspModule_wasm\"\n\t],\n\t\"./ftom/dspModule.wasm\": [\n\t\t\"./dsps/ftom/dspModule.wasm\",\n\t\t\"dsps_ftom_dspModule_wasm\"\n\t],\n\t\"./geq/dspModule.wasm\": [\n\t\t\"./dsps/geq/dspModule.wasm\",\n\t\t\"dsps_geq_dspModule_wasm\"\n\t],\n\t\"./gtr/dspModule.wasm\": [\n\t\t\"./dsps/gtr/dspModule.wasm\",\n\t\t\"dsps_gtr_dspModule_wasm\"\n\t],\n\t\"./leq/dspModule.wasm\": [\n\t\t\"./dsps/leq/dspModule.wasm\",\n\t\t\"dsps_leq_dspModule_wasm\"\n\t],\n\t\"./log/dspModule.wasm\": [\n\t\t\"./dsps/log/dspModule.wasm\",\n\t\t\"dsps_log_dspModule_wasm\"\n\t],\n\t\"./lss/dspModule.wasm\": [\n\t\t\"./dsps/lss/dspModule.wasm\",\n\t\t\"dsps_lss_dspModule_wasm\"\n\t],\n\t\"./max/dspModule.wasm\": [\n\t\t\"./dsps/max/dspModule.wasm\",\n\t\t\"dsps_max_dspModule_wasm\"\n\t],\n\t\"./min/dspModule.wasm\": [\n\t\t\"./dsps/min/dspModule.wasm\",\n\t\t\"dsps_min_dspModule_wasm\"\n\t],\n\t\"./mod/dspModule.wasm\": [\n\t\t\"./dsps/mod/dspModule.wasm\",\n\t\t\"dsps_mod_dspModule_wasm\"\n\t],\n\t\"./mtof/dspModule.wasm\": [\n\t\t\"./dsps/mtof/dspModule.wasm\",\n\t\t\"dsps_mtof_dspModule_wasm\"\n\t],\n\t\"./mul/dspModule.wasm\": [\n\t\t\"./dsps/mul/dspModule.wasm\",\n\t\t\"dsps_mul_dspModule_wasm\"\n\t],\n\t\"./neq/dspModule.wasm\": [\n\t\t\"./dsps/neq/dspModule.wasm\",\n\t\t\"dsps_neq_dspModule_wasm\"\n\t],\n\t\"./noise/dspModule.wasm\": [\n\t\t\"./dsps/noise/dspModule.wasm\",\n\t\t\"dsps_noise_dspModule_wasm\"\n\t],\n\t\"./pink/dspModule.wasm\": [\n\t\t\"./dsps/pink/dspModule.wasm\",\n\t\t\"dsps_pink_dspModule_wasm\"\n\t],\n\t\"./rdiv/dspModule.wasm\": [\n\t\t\"./dsps/rdiv/dspModule.wasm\",\n\t\t\"dsps_rdiv_dspModule_wasm\"\n\t],\n\t\"./rsub/dspModule.wasm\": [\n\t\t\"./dsps/rsub/dspModule.wasm\",\n\t\t\"dsps_rsub_dspModule_wasm\"\n\t],\n\t\"./sub/dspModule.wasm\": [\n\t\t\"./dsps/sub/dspModule.wasm\",\n\t\t\"dsps_sub_dspModule_wasm\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 1 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./dsps lazy recursive ^\\\\.\\\\/.*\\\\/dspModule\\\\.wasm$\";\nmodule.exports = webpackAsyncContext;","var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && key !== \"default\")\n        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });\n  }\n  return target;\n};\nvar __toModule = (module2) => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);\n};\n\n// node_modules/js-sha256/src/sha256.js\nvar require_sha256 = __commonJS({\n  \"node_modules/js-sha256/src/sha256.js\"(exports, module) {\n    (function() {\n      \"use strict\";\n      var ERROR = \"input is invalid type\";\n      var WINDOW = typeof window === \"object\";\n      var root = WINDOW ? window : {};\n      if (root.JS_SHA256_NO_WINDOW) {\n        WINDOW = false;\n      }\n      var WEB_WORKER = !WINDOW && typeof self === \"object\";\n      var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === \"object\" && process.versions && process.versions.node;\n      if (NODE_JS) {\n        root = global;\n      } else if (WEB_WORKER) {\n        root = self;\n      }\n      var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === \"object\" && module.exports;\n      var AMD = typeof define === \"function\" && define.amd;\n      var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== \"undefined\";\n      var HEX_CHARS = \"0123456789abcdef\".split(\"\");\n      var EXTRA = [-2147483648, 8388608, 32768, 128];\n      var SHIFT = [24, 16, 8, 0];\n      var K = [\n        1116352408,\n        1899447441,\n        3049323471,\n        3921009573,\n        961987163,\n        1508970993,\n        2453635748,\n        2870763221,\n        3624381080,\n        310598401,\n        607225278,\n        1426881987,\n        1925078388,\n        2162078206,\n        2614888103,\n        3248222580,\n        3835390401,\n        4022224774,\n        264347078,\n        604807628,\n        770255983,\n        1249150122,\n        1555081692,\n        1996064986,\n        2554220882,\n        2821834349,\n        2952996808,\n        3210313671,\n        3336571891,\n        3584528711,\n        113926993,\n        338241895,\n        666307205,\n        773529912,\n        1294757372,\n        1396182291,\n        1695183700,\n        1986661051,\n        2177026350,\n        2456956037,\n        2730485921,\n        2820302411,\n        3259730800,\n        3345764771,\n        3516065817,\n        3600352804,\n        4094571909,\n        275423344,\n        430227734,\n        506948616,\n        659060556,\n        883997877,\n        958139571,\n        1322822218,\n        1537002063,\n        1747873779,\n        1955562222,\n        2024104815,\n        2227730452,\n        2361852424,\n        2428436474,\n        2756734187,\n        3204031479,\n        3329325298\n      ];\n      var OUTPUT_TYPES = [\"hex\", \"array\", \"digest\", \"arrayBuffer\"];\n      var blocks = [];\n      if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n        Array.isArray = function(obj) {\n          return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n      }\n      if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n        ArrayBuffer.isView = function(obj) {\n          return typeof obj === \"object\" && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n        };\n      }\n      var createOutputMethod = function(outputType, is2242) {\n        return function(message) {\n          return new Sha256(is2242, true).update(message)[outputType]();\n        };\n      };\n      var createMethod = function(is2242) {\n        var method2 = createOutputMethod(\"hex\", is2242);\n        if (NODE_JS) {\n          method2 = nodeWrap(method2, is2242);\n        }\n        method2.create = function() {\n          return new Sha256(is2242);\n        };\n        method2.update = function(message) {\n          return method2.create().update(message);\n        };\n        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n          var type = OUTPUT_TYPES[i];\n          method2[type] = createOutputMethod(type, is2242);\n        }\n        return method2;\n      };\n      var nodeWrap = function(method, is224) {\n        var crypto = eval(\"require('crypto')\");\n        var Buffer = eval(\"require('buffer').Buffer\");\n        var algorithm = is224 ? \"sha224\" : \"sha256\";\n        var nodeMethod = function(message) {\n          if (typeof message === \"string\") {\n            return crypto.createHash(algorithm).update(message, \"utf8\").digest(\"hex\");\n          } else {\n            if (message === null || message === void 0) {\n              throw new Error(ERROR);\n            } else if (message.constructor === ArrayBuffer) {\n              message = new Uint8Array(message);\n            }\n          }\n          if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {\n            return crypto.createHash(algorithm).update(new Buffer(message)).digest(\"hex\");\n          } else {\n            return method(message);\n          }\n        };\n        return nodeMethod;\n      };\n      var createHmacOutputMethod = function(outputType, is2242) {\n        return function(key, message) {\n          return new HmacSha256(key, is2242, true).update(message)[outputType]();\n        };\n      };\n      var createHmacMethod = function(is2242) {\n        var method2 = createHmacOutputMethod(\"hex\", is2242);\n        method2.create = function(key) {\n          return new HmacSha256(key, is2242);\n        };\n        method2.update = function(key, message) {\n          return method2.create(key).update(message);\n        };\n        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n          var type = OUTPUT_TYPES[i];\n          method2[type] = createHmacOutputMethod(type, is2242);\n        }\n        return method2;\n      };\n      function Sha256(is2242, sharedMemory) {\n        if (sharedMemory) {\n          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n          this.blocks = blocks;\n        } else {\n          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        }\n        if (is2242) {\n          this.h0 = 3238371032;\n          this.h1 = 914150663;\n          this.h2 = 812702999;\n          this.h3 = 4144912697;\n          this.h4 = 4290775857;\n          this.h5 = 1750603025;\n          this.h6 = 1694076839;\n          this.h7 = 3204075428;\n        } else {\n          this.h0 = 1779033703;\n          this.h1 = 3144134277;\n          this.h2 = 1013904242;\n          this.h3 = 2773480762;\n          this.h4 = 1359893119;\n          this.h5 = 2600822924;\n          this.h6 = 528734635;\n          this.h7 = 1541459225;\n        }\n        this.block = this.start = this.bytes = this.hBytes = 0;\n        this.finalized = this.hashed = false;\n        this.first = true;\n        this.is224 = is2242;\n      }\n      Sha256.prototype.update = function(message) {\n        if (this.finalized) {\n          return;\n        }\n        var notString, type = typeof message;\n        if (type !== \"string\") {\n          if (type === \"object\") {\n            if (message === null) {\n              throw new Error(ERROR);\n            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n              message = new Uint8Array(message);\n            } else if (!Array.isArray(message)) {\n              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n                throw new Error(ERROR);\n              }\n            }\n          } else {\n            throw new Error(ERROR);\n          }\n          notString = true;\n        }\n        var code, index = 0, i, length = message.length, blocks2 = this.blocks;\n        while (index < length) {\n          if (this.hashed) {\n            this.hashed = false;\n            blocks2[0] = this.block;\n            blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;\n          }\n          if (notString) {\n            for (i = this.start; index < length && i < 64; ++index) {\n              blocks2[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n          } else {\n            for (i = this.start; index < length && i < 64; ++index) {\n              code = message.charCodeAt(index);\n              if (code < 128) {\n                blocks2[i >> 2] |= code << SHIFT[i++ & 3];\n              } else if (code < 2048) {\n                blocks2[i >> 2] |= (192 | code >> 6) << SHIFT[i++ & 3];\n                blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];\n              } else if (code < 55296 || code >= 57344) {\n                blocks2[i >> 2] |= (224 | code >> 12) << SHIFT[i++ & 3];\n                blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];\n                blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];\n              } else {\n                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);\n                blocks2[i >> 2] |= (240 | code >> 18) << SHIFT[i++ & 3];\n                blocks2[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[i++ & 3];\n                blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];\n                blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];\n              }\n            }\n          }\n          this.lastByteIndex = i;\n          this.bytes += i - this.start;\n          if (i >= 64) {\n            this.block = blocks2[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n          } else {\n            this.start = i;\n          }\n        }\n        if (this.bytes > 4294967295) {\n          this.hBytes += this.bytes / 4294967296 << 0;\n          this.bytes = this.bytes % 4294967296;\n        }\n        return this;\n      };\n      Sha256.prototype.finalize = function() {\n        if (this.finalized) {\n          return;\n        }\n        this.finalized = true;\n        var blocks2 = this.blocks, i = this.lastByteIndex;\n        blocks2[16] = this.block;\n        blocks2[i >> 2] |= EXTRA[i & 3];\n        this.block = blocks2[16];\n        if (i >= 56) {\n          if (!this.hashed) {\n            this.hash();\n          }\n          blocks2[0] = this.block;\n          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;\n        }\n        blocks2[14] = this.hBytes << 3 | this.bytes >>> 29;\n        blocks2[15] = this.bytes << 3;\n        this.hash();\n      };\n      Sha256.prototype.hash = function() {\n        var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6, h = this.h7, blocks2 = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n        for (j = 16; j < 64; ++j) {\n          t1 = blocks2[j - 15];\n          s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;\n          t1 = blocks2[j - 2];\n          s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;\n          blocks2[j] = blocks2[j - 16] + s0 + blocks2[j - 7] + s1 << 0;\n        }\n        bc = b & c;\n        for (j = 0; j < 64; j += 4) {\n          if (this.first) {\n            if (this.is224) {\n              ab = 300032;\n              t1 = blocks2[0] - 1413257819;\n              h = t1 - 150054599 << 0;\n              d = t1 + 24177077 << 0;\n            } else {\n              ab = 704751109;\n              t1 = blocks2[0] - 210244248;\n              h = t1 - 1521486534 << 0;\n              d = t1 + 143694565 << 0;\n            }\n            this.first = false;\n          } else {\n            s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10);\n            s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);\n            ab = a & b;\n            maj = ab ^ a & c ^ bc;\n            ch = e & f ^ ~e & g;\n            t1 = h + s1 + ch + K[j] + blocks2[j];\n            t2 = s0 + maj;\n            h = d + t1 << 0;\n            d = t1 + t2 << 0;\n          }\n          s0 = (d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10);\n          s1 = (h >>> 6 | h << 26) ^ (h >>> 11 | h << 21) ^ (h >>> 25 | h << 7);\n          da = d & a;\n          maj = da ^ d & b ^ ab;\n          ch = h & e ^ ~h & f;\n          t1 = g + s1 + ch + K[j + 1] + blocks2[j + 1];\n          t2 = s0 + maj;\n          g = c + t1 << 0;\n          c = t1 + t2 << 0;\n          s0 = (c >>> 2 | c << 30) ^ (c >>> 13 | c << 19) ^ (c >>> 22 | c << 10);\n          s1 = (g >>> 6 | g << 26) ^ (g >>> 11 | g << 21) ^ (g >>> 25 | g << 7);\n          cd = c & d;\n          maj = cd ^ c & a ^ da;\n          ch = g & h ^ ~g & e;\n          t1 = f + s1 + ch + K[j + 2] + blocks2[j + 2];\n          t2 = s0 + maj;\n          f = b + t1 << 0;\n          b = t1 + t2 << 0;\n          s0 = (b >>> 2 | b << 30) ^ (b >>> 13 | b << 19) ^ (b >>> 22 | b << 10);\n          s1 = (f >>> 6 | f << 26) ^ (f >>> 11 | f << 21) ^ (f >>> 25 | f << 7);\n          bc = b & c;\n          maj = bc ^ b & d ^ cd;\n          ch = f & g ^ ~f & h;\n          t1 = e + s1 + ch + K[j + 3] + blocks2[j + 3];\n          t2 = s0 + maj;\n          e = a + t1 << 0;\n          a = t1 + t2 << 0;\n        }\n        this.h0 = this.h0 + a << 0;\n        this.h1 = this.h1 + b << 0;\n        this.h2 = this.h2 + c << 0;\n        this.h3 = this.h3 + d << 0;\n        this.h4 = this.h4 + e << 0;\n        this.h5 = this.h5 + f << 0;\n        this.h6 = this.h6 + g << 0;\n        this.h7 = this.h7 + h << 0;\n      };\n      Sha256.prototype.hex = function() {\n        this.finalize();\n        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n        var hex = HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h4 >> 28 & 15] + HEX_CHARS[h4 >> 24 & 15] + HEX_CHARS[h4 >> 20 & 15] + HEX_CHARS[h4 >> 16 & 15] + HEX_CHARS[h4 >> 12 & 15] + HEX_CHARS[h4 >> 8 & 15] + HEX_CHARS[h4 >> 4 & 15] + HEX_CHARS[h4 & 15] + HEX_CHARS[h5 >> 28 & 15] + HEX_CHARS[h5 >> 24 & 15] + HEX_CHARS[h5 >> 20 & 15] + HEX_CHARS[h5 >> 16 & 15] + HEX_CHARS[h5 >> 12 & 15] + HEX_CHARS[h5 >> 8 & 15] + HEX_CHARS[h5 >> 4 & 15] + HEX_CHARS[h5 & 15] + HEX_CHARS[h6 >> 28 & 15] + HEX_CHARS[h6 >> 24 & 15] + HEX_CHARS[h6 >> 20 & 15] + HEX_CHARS[h6 >> 16 & 15] + HEX_CHARS[h6 >> 12 & 15] + HEX_CHARS[h6 >> 8 & 15] + HEX_CHARS[h6 >> 4 & 15] + HEX_CHARS[h6 & 15];\n        if (!this.is224) {\n          hex += HEX_CHARS[h7 >> 28 & 15] + HEX_CHARS[h7 >> 24 & 15] + HEX_CHARS[h7 >> 20 & 15] + HEX_CHARS[h7 >> 16 & 15] + HEX_CHARS[h7 >> 12 & 15] + HEX_CHARS[h7 >> 8 & 15] + HEX_CHARS[h7 >> 4 & 15] + HEX_CHARS[h7 & 15];\n        }\n        return hex;\n      };\n      Sha256.prototype.toString = Sha256.prototype.hex;\n      Sha256.prototype.digest = function() {\n        this.finalize();\n        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;\n        var arr = [\n          h0 >> 24 & 255,\n          h0 >> 16 & 255,\n          h0 >> 8 & 255,\n          h0 & 255,\n          h1 >> 24 & 255,\n          h1 >> 16 & 255,\n          h1 >> 8 & 255,\n          h1 & 255,\n          h2 >> 24 & 255,\n          h2 >> 16 & 255,\n          h2 >> 8 & 255,\n          h2 & 255,\n          h3 >> 24 & 255,\n          h3 >> 16 & 255,\n          h3 >> 8 & 255,\n          h3 & 255,\n          h4 >> 24 & 255,\n          h4 >> 16 & 255,\n          h4 >> 8 & 255,\n          h4 & 255,\n          h5 >> 24 & 255,\n          h5 >> 16 & 255,\n          h5 >> 8 & 255,\n          h5 & 255,\n          h6 >> 24 & 255,\n          h6 >> 16 & 255,\n          h6 >> 8 & 255,\n          h6 & 255\n        ];\n        if (!this.is224) {\n          arr.push(h7 >> 24 & 255, h7 >> 16 & 255, h7 >> 8 & 255, h7 & 255);\n        }\n        return arr;\n      };\n      Sha256.prototype.array = Sha256.prototype.digest;\n      Sha256.prototype.arrayBuffer = function() {\n        this.finalize();\n        var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n        var dataView = new DataView(buffer);\n        dataView.setUint32(0, this.h0);\n        dataView.setUint32(4, this.h1);\n        dataView.setUint32(8, this.h2);\n        dataView.setUint32(12, this.h3);\n        dataView.setUint32(16, this.h4);\n        dataView.setUint32(20, this.h5);\n        dataView.setUint32(24, this.h6);\n        if (!this.is224) {\n          dataView.setUint32(28, this.h7);\n        }\n        return buffer;\n      };\n      function HmacSha256(key, is2242, sharedMemory) {\n        var i, type = typeof key;\n        if (type === \"string\") {\n          var bytes = [], length = key.length, index = 0, code;\n          for (i = 0; i < length; ++i) {\n            code = key.charCodeAt(i);\n            if (code < 128) {\n              bytes[index++] = code;\n            } else if (code < 2048) {\n              bytes[index++] = 192 | code >> 6;\n              bytes[index++] = 128 | code & 63;\n            } else if (code < 55296 || code >= 57344) {\n              bytes[index++] = 224 | code >> 12;\n              bytes[index++] = 128 | code >> 6 & 63;\n              bytes[index++] = 128 | code & 63;\n            } else {\n              code = 65536 + ((code & 1023) << 10 | key.charCodeAt(++i) & 1023);\n              bytes[index++] = 240 | code >> 18;\n              bytes[index++] = 128 | code >> 12 & 63;\n              bytes[index++] = 128 | code >> 6 & 63;\n              bytes[index++] = 128 | code & 63;\n            }\n          }\n          key = bytes;\n        } else {\n          if (type === \"object\") {\n            if (key === null) {\n              throw new Error(ERROR);\n            } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n              key = new Uint8Array(key);\n            } else if (!Array.isArray(key)) {\n              if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n                throw new Error(ERROR);\n              }\n            }\n          } else {\n            throw new Error(ERROR);\n          }\n        }\n        if (key.length > 64) {\n          key = new Sha256(is2242, true).update(key).array();\n        }\n        var oKeyPad = [], iKeyPad = [];\n        for (i = 0; i < 64; ++i) {\n          var b = key[i] || 0;\n          oKeyPad[i] = 92 ^ b;\n          iKeyPad[i] = 54 ^ b;\n        }\n        Sha256.call(this, is2242, sharedMemory);\n        this.update(iKeyPad);\n        this.oKeyPad = oKeyPad;\n        this.inner = true;\n        this.sharedMemory = sharedMemory;\n      }\n      HmacSha256.prototype = new Sha256();\n      HmacSha256.prototype.finalize = function() {\n        Sha256.prototype.finalize.call(this);\n        if (this.inner) {\n          this.inner = false;\n          var innerHash = this.array();\n          Sha256.call(this, this.is224, this.sharedMemory);\n          this.update(this.oKeyPad);\n          this.update(innerHash);\n          Sha256.prototype.finalize.call(this);\n        }\n      };\n      var exports = createMethod();\n      exports.sha256 = exports;\n      exports.sha224 = createMethod(true);\n      exports.sha256.hmac = createHmacMethod();\n      exports.sha224.hmac = createHmacMethod(true);\n      if (COMMON_JS) {\n        module.exports = exports;\n      } else {\n        root.sha256 = exports.sha256;\n        root.sha224 = exports.sha224;\n        if (AMD) {\n          define(function() {\n            return exports;\n          });\n        }\n      }\n    })();\n  }\n});\n\n// src/index.ts\n__export(exports, {\n  FaustAudioWorkletNode: () => FaustAudioWorkletNode,\n  FaustBaseWebAudioDsp: () => FaustBaseWebAudioDsp,\n  FaustCompiler: () => FaustCompiler_default,\n  FaustDspInstance: () => FaustDspInstance_default,\n  FaustMonoAudioWorkletNode: () => FaustMonoAudioWorkletNode,\n  FaustMonoDspGenerator: () => FaustMonoDspGenerator,\n  FaustMonoScriptProcessorNode: () => FaustMonoScriptProcessorNode,\n  FaustMonoWebAudioDsp: () => FaustMonoWebAudioDsp,\n  FaustOfflineProcessor: () => FaustOfflineProcessor_default,\n  FaustPolyAudioWorkletNode: () => FaustPolyAudioWorkletNode,\n  FaustPolyDspGenerator: () => FaustPolyDspGenerator,\n  FaustPolyScriptProcessorNode: () => FaustPolyScriptProcessorNode,\n  FaustPolyWebAudioDsp: () => FaustPolyWebAudioDsp,\n  FaustScriptProcessorNode: () => FaustScriptProcessorNode,\n  FaustSvgDiagrams: () => FaustSvgDiagrams_default,\n  FaustWasmInstantiator: () => FaustWasmInstantiator_default,\n  FaustWebAudioDspVoice: () => FaustWebAudioDspVoice,\n  LibFaust: () => LibFaust_default,\n  WavDecoder: () => WavDecoder_default,\n  WavEncoder: () => WavEncoder_default,\n  default: () => src_default,\n  getFaustAudioWorkletProcessor: () => FaustAudioWorkletProcessor_default,\n  instantiateFaustModule: () => instantiateFaustModule_default\n});\n\n// src/fetchModule.ts\nvar global2 = globalThis;\nvar cache = global2.fetchModuleCache || new Map();\nvar fetchModule = async (url) => {\n  const absoluteUrl = new URL(url, location.href).href;\n  if (cache.has(absoluteUrl))\n    return cache.get(absoluteUrl);\n  let exported;\n  const toExport = {};\n  global2.exports = toExport;\n  global2.module = { exports: toExport };\n  const esm = await import(\n    /* webpackIgnore: true */\n    absoluteUrl\n  );\n  const esmKeys = Object.keys(esm);\n  if (esmKeys.length)\n    exported = esm;\n  else\n    exported = global2.module.exports;\n  delete global2.exports;\n  delete global2.module;\n  cache.set(absoluteUrl, exported);\n  return exported;\n};\nif (!global2.fetchModuleCache)\n  global2.fetchModuleCache = cache;\nvar fetchModule_default = fetchModule;\n\n// src/instantiateFaustModule.ts\nvar instantiateFaustModule = async (jsFile, dataFile = jsFile.replace(/c?js$/, \"data\"), wasmFile = jsFile.replace(/c?js$/, \"wasm\")) => {\n  let LibFaust2;\n  try {\n    LibFaust2 = require(jsFile);\n  } catch (error) {\n    LibFaust2 = await fetchModule_default(jsFile);\n  }\n  const locateFile = (url, scriptDirectory) => ({\n    \"libfaust-wasm.wasm\": wasmFile,\n    \"libfaust-wasm.data\": dataFile\n  })[url] || scriptDirectory + url;\n  const libFaust = await LibFaust2({ locateFile });\n  return libFaust;\n};\nvar instantiateFaustModule_default = instantiateFaustModule;\n\n// src/FaustAudioWorkletProcessor.ts\nvar getFaustAudioWorkletProcessor = (dependencies, faustData) => {\n  const { registerProcessor, AudioWorkletProcessor, sampleRate } = globalThis;\n  const {\n    FaustBaseWebAudioDsp: FaustBaseWebAudioDsp2,\n    FaustWasmInstantiator: FaustWasmInstantiator2\n  } = dependencies;\n  const {\n    dspName,\n    dspMeta,\n    effectMeta,\n    poly\n  } = faustData;\n  class FaustAudioWorkletProcessor extends AudioWorkletProcessor {\n    constructor(options) {\n      super(options);\n      this.port.onmessage = (e) => {\n        this.handleMessageAux(e);\n      };\n    }\n    static get parameterDescriptors() {\n      const params = [];\n      const callback = (item) => {\n        if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\n          params.push({ name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 });\n        } else if (item.type === \"button\" || item.type === \"checkbox\") {\n          params.push({ name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 });\n        }\n      };\n      FaustBaseWebAudioDsp2.parseUI(dspMeta.ui, callback);\n      if (effectMeta)\n        FaustBaseWebAudioDsp2.parseUI(effectMeta.ui, callback);\n      return params;\n    }\n    process(inputs, outputs, parameters) {\n      return this.fDSPCode.compute(inputs[0], outputs[0]);\n    }\n    handleMessageAux(e) {\n      const msg = e.data;\n      switch (msg.type) {\n        case \"midi\":\n          this.midiMessage(msg.data);\n          break;\n        case \"ctrlChange\":\n          this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]);\n          break;\n        case \"pitchWheel\":\n          this.pitchWheel(msg.data[0], msg.data[1]);\n          break;\n        case \"param\":\n          this.setParamValue(msg.data.path, msg.data.value);\n          break;\n        case \"setPlotHandler\": {\n          if (msg.data) {\n            this.fDSPCode.setPlotHandler((output, index, events) => this.port.postMessage({ type: \"plot\", value: output, index, events }));\n          } else {\n            this.fDSPCode.setPlotHandler(null);\n          }\n          break;\n        }\n        case \"start\": {\n          this.fDSPCode.start();\n          break;\n        }\n        case \"stop\": {\n          this.fDSPCode.stop();\n          break;\n        }\n        case \"destroy\": {\n          this.port.close();\n          this.fDSPCode.destroy();\n          break;\n        }\n        default:\n          break;\n      }\n    }\n    setParamValue(path, value) {\n      this.fDSPCode.setParamValue(path, value);\n    }\n    midiMessage(data) {\n      this.fDSPCode.midiMessage(data);\n    }\n    ctrlChange(channel, ctrl, value) {\n      this.fDSPCode.ctrlChange(channel, ctrl, value);\n    }\n    pitchWheel(channel, wheel) {\n      this.fDSPCode.pitchWheel(channel, wheel);\n    }\n  }\n  class FaustMonoAudioWorkletProcessor extends FaustAudioWorkletProcessor {\n    constructor(options) {\n      super(options);\n      const { FaustMonoWebAudioDsp: FaustWebAudioMonoDSP } = dependencies;\n      const { factory, sampleSize } = options.processorOptions;\n      const instance = FaustWasmInstantiator2.createSyncMonoDSPInstance(factory);\n      this.fDSPCode = new FaustWebAudioMonoDSP(instance, sampleRate, sampleSize, 128);\n      this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n      this.fDSPCode.start();\n    }\n  }\n  class FaustPolyAudioWorkletProcessor extends FaustAudioWorkletProcessor {\n    constructor(options) {\n      super(options);\n      this.handleMessageAux = (e) => {\n        const msg = e.data;\n        switch (msg.type) {\n          case \"keyOn\":\n            this.keyOn(msg.data[0], msg.data[1], msg.data[2]);\n            break;\n          case \"keyOff\":\n            this.keyOff(msg.data[0], msg.data[1], msg.data[2]);\n            break;\n          default:\n            super.handleMessageAux(e);\n            break;\n        }\n      };\n      const { FaustPolyWebAudioDsp: FaustWebAudioPolyDSP } = dependencies;\n      const { voiceFactory, mixerModule, voices, effectFactory, sampleSize } = options.processorOptions;\n      const instance = FaustWasmInstantiator2.createSyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory);\n      this.fDSPCode = new FaustWebAudioPolyDSP(instance, sampleRate, sampleSize, 128);\n      this.port.onmessage = (e) => {\n        this.handleMessageAux(e);\n      };\n      this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n      this.fDSPCode.start();\n    }\n    midiMessage(data) {\n      const cmd = data[0] >> 4;\n      const channel = data[0] & 15;\n      const data1 = data[1];\n      const data2 = data[2];\n      if (cmd === 8 || cmd === 9 && data2 === 0)\n        this.keyOff(channel, data1, data2);\n      else if (cmd === 9)\n        this.keyOn(channel, data1, data2);\n      else\n        super.midiMessage(data);\n    }\n    keyOn(channel, pitch, velocity) {\n      this.fDSPCode.keyOn(channel, pitch, velocity);\n    }\n    keyOff(channel, pitch, velocity) {\n      this.fDSPCode.keyOff(channel, pitch, velocity);\n    }\n    allNotesOff(hard) {\n      this.fDSPCode.allNotesOff(hard);\n    }\n  }\n  try {\n    if (poly) {\n      registerProcessor(dspName || \"mydsp_poly\", FaustPolyAudioWorkletProcessor);\n    } else {\n      registerProcessor(dspName || \"mydsp\", FaustMonoAudioWorkletProcessor);\n    }\n  } catch (error) {\n    console.warn(error);\n  }\n};\nvar FaustAudioWorkletProcessor_default = getFaustAudioWorkletProcessor;\n\n// src/FaustCompiler.ts\nvar import_js_sha256 = __toModule(require_sha256());\nvar _FaustCompiler = class {\n  constructor(libFaust) {\n    this.fLibFaust = libFaust;\n    this.fErrorMessage = \"\";\n  }\n  intVec2intArray(vec) {\n    const size = vec.size();\n    const ui8Code = new Uint8Array(size);\n    for (let i = 0; i < size; i++) {\n      ui8Code[i] = vec.get(i);\n    }\n    return ui8Code;\n  }\n  async createDSPFactory(name, code, args, poly) {\n    if (_FaustCompiler.gFactories.size > 10) {\n      _FaustCompiler.gFactories.clear();\n    }\n    let shaKey = (0, import_js_sha256.sha256)(name + code + args + (poly ? \"poly\" : \"mono\"));\n    if (_FaustCompiler.gFactories.has(shaKey)) {\n      return _FaustCompiler.gFactories.get(shaKey) || null;\n    } else {\n      try {\n        const faustWasm = this.fLibFaust.createDSPFactory(name, code, args, !poly);\n        try {\n          const code2 = this.intVec2intArray(faustWasm.data);\n          faustWasm.data.delete();\n          const module2 = await WebAssembly.compile(code2);\n          const factory = { cfactory: faustWasm.cfactory, code: code2, module: module2, json: faustWasm.json, poly };\n          this.deleteDSPFactory(factory);\n          _FaustCompiler.gFactories.set(shaKey, factory);\n          return factory;\n        } catch (e) {\n          console.error(e);\n          return null;\n        }\n      } catch {\n        this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n        console.error(`=> exception raised while running createDSPFactory: ${this.fErrorMessage}`);\n        this.fLibFaust.cleanupAfterException();\n        return null;\n      }\n    }\n  }\n  version() {\n    return this.fLibFaust.version();\n  }\n  getErrorMessage() {\n    return this.fErrorMessage;\n  }\n  async createMonoDSPFactory(name, code, args) {\n    return this.createDSPFactory(name, code, args, false);\n  }\n  async createPolyDSPFactory(name, code, args) {\n    return this.createDSPFactory(name, code, args, true);\n  }\n  deleteDSPFactory(factory) {\n    this.fLibFaust.deleteDSPFactory(factory.cfactory);\n    factory.cfactory = 0;\n  }\n  expandDSP(code, args) {\n    try {\n      return this.fLibFaust.expandDSP(\"FaustDSP\", code, args);\n    } catch {\n      this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n      console.error(`=> exception raised while running expandDSP: ${this.fErrorMessage}`);\n      this.fLibFaust.cleanupAfterException();\n      return null;\n    }\n  }\n  generateAuxFiles(name, code, args) {\n    try {\n      return this.fLibFaust.generateAuxFiles(name, code, args);\n    } catch {\n      this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n      console.error(`=> exception raised while running generateAuxFiles: ${this.fErrorMessage}`);\n      this.fLibFaust.cleanupAfterException();\n      return false;\n    }\n  }\n  deleteAllDSPFactories() {\n    this.fLibFaust.deleteAllDSPFactories();\n  }\n  fs() {\n    return this.fLibFaust.fs();\n  }\n  async getAsyncInternalMixerModule(isDouble = false) {\n    const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n    const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n    if (this[moduleKey])\n      return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n    const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n    const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n    this[bufferKey] = mixerBuffer;\n    const mixerModule = await WebAssembly.compile(mixerBuffer);\n    this[moduleKey] = mixerModule;\n    return { mixerBuffer, mixerModule };\n  }\n  getSyncInternalMixerModule(isDouble = false) {\n    const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n    const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n    if (this[moduleKey])\n      return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n    const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n    const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n    this[bufferKey] = mixerBuffer;\n    const mixerModule = new WebAssembly.Module(mixerBuffer);\n    this[moduleKey] = mixerModule;\n    return { mixerBuffer, mixerModule };\n  }\n};\nvar FaustCompiler = _FaustCompiler;\nFaustCompiler.gFactories = new Map();\nvar FaustCompiler_default = FaustCompiler;\n\n// src/FaustDspInstance.ts\nvar FaustDspInstance = class {\n  constructor(exports2) {\n    this.fExports = exports2;\n  }\n  compute($dsp, count, $input, $output) {\n    this.fExports.compute($dsp, count, $input, $output);\n  }\n  getNumInputs($dsp) {\n    return this.fExports.getNumInputs($dsp);\n  }\n  getNumOutputs($dsp) {\n    return this.fExports.getNumOutputs($dsp);\n  }\n  getParamValue($dsp, index) {\n    return this.fExports.getParamValue($dsp, index);\n  }\n  getSampleRate($dsp) {\n    return this.fExports.getSampleRate($dsp);\n  }\n  init($dsp, sampleRate) {\n    this.fExports.init($dsp, sampleRate);\n  }\n  instanceClear($dsp) {\n    this.fExports.instanceClear($dsp);\n  }\n  instanceConstants($dsp, sampleRate) {\n    this.fExports.instanceConstants($dsp, sampleRate);\n  }\n  instanceInit($dsp, sampleRate) {\n    this.fExports.instanceInit($dsp, sampleRate);\n  }\n  instanceResetUserInterface($dsp) {\n    this.fExports.instanceResetUserInterface($dsp);\n  }\n  setParamValue($dsp, index, value) {\n    this.fExports.setParamValue($dsp, index, value);\n  }\n};\nvar FaustDspInstance_default = FaustDspInstance;\n\n// src/FaustWasmInstantiator.ts\nvar FaustWasmInstantiator = class {\n  static createWasmImport(memory) {\n    return {\n      env: {\n        memory: memory || new WebAssembly.Memory({ initial: 100 }),\n        memoryBase: 0,\n        tableBase: 0,\n        _abs: Math.abs,\n        _acosf: Math.acos,\n        _asinf: Math.asin,\n        _atanf: Math.atan,\n        _atan2f: Math.atan2,\n        _ceilf: Math.ceil,\n        _cosf: Math.cos,\n        _expf: Math.exp,\n        _floorf: Math.floor,\n        _fmodf: (x, y) => x % y,\n        _logf: Math.log,\n        _log10f: Math.log10,\n        _max_f: Math.max,\n        _min_f: Math.min,\n        _remainderf: (x, y) => x - Math.round(x / y) * y,\n        _powf: Math.pow,\n        _roundf: Math.fround,\n        _sinf: Math.sin,\n        _sqrtf: Math.sqrt,\n        _tanf: Math.tan,\n        _acoshf: Math.acosh,\n        _asinhf: Math.asinh,\n        _atanhf: Math.atanh,\n        _coshf: Math.cosh,\n        _sinhf: Math.sinh,\n        _tanhf: Math.tanh,\n        _isnanf: Number.isNaN,\n        _isinff: (x) => !isFinite(x),\n        _copysignf: (x, y) => Math.sign(x) === Math.sign(y) ? x : -x,\n        _acos: Math.acos,\n        _asin: Math.asin,\n        _atan: Math.atan,\n        _atan2: Math.atan2,\n        _ceil: Math.ceil,\n        _cos: Math.cos,\n        _exp: Math.exp,\n        _floor: Math.floor,\n        _fmod: (x, y) => x % y,\n        _log: Math.log,\n        _log10: Math.log10,\n        _max_: Math.max,\n        _min_: Math.min,\n        _remainder: (x, y) => x - Math.round(x / y) * y,\n        _pow: Math.pow,\n        _round: Math.fround,\n        _sin: Math.sin,\n        _sqrt: Math.sqrt,\n        _tan: Math.tan,\n        _acosh: Math.acosh,\n        _asinh: Math.asinh,\n        _atanh: Math.atanh,\n        _cosh: Math.cosh,\n        _sinh: Math.sinh,\n        _tanh: Math.tanh,\n        _isnan: Number.isNaN,\n        _isinf: (x) => !isFinite(x),\n        _copysign: (x, y) => Math.sign(x) === Math.sign(y) ? x : -x,\n        table: new WebAssembly.Table({ initial: 0, element: \"anyfunc\" })\n      }\n    };\n  }\n  static createWasmMemory(voicesIn, sampleSize, dspMeta, effectMeta, bufferSize) {\n    const voices = Math.max(4, voicesIn);\n    const ptrSize = sampleSize;\n    const pow2limit = (x) => {\n      let n = 65536;\n      while (n < x) {\n        n *= 2;\n      }\n      return n;\n    };\n    const effectSize = effectMeta ? effectMeta.size : 0;\n    let memorySize = pow2limit(effectSize + dspMeta.size * voices + (dspMeta.inputs + dspMeta.outputs * 2) * (ptrSize + bufferSize * sampleSize)) / 65536;\n    memorySize = Math.max(2, memorySize);\n    return new WebAssembly.Memory({ initial: memorySize, maximum: memorySize });\n  }\n  static createMonoDSPInstanceAux(instance, json) {\n    const functions = instance.exports;\n    const api = new FaustDspInstance_default(functions);\n    const memory = instance.exports.memory;\n    return { memory, api, json };\n  }\n  static createMemoryAux(voices, voiceFactory, effectFactory) {\n    const voiceMeta = JSON.parse(voiceFactory.json);\n    const effectMeta = effectFactory && effectFactory.json ? JSON.parse(effectFactory.json) : null;\n    const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n    return this.createWasmMemory(voices, sampleSize, voiceMeta, effectMeta, 8192);\n  }\n  static createMixerAux(mixerModule, memory) {\n    const mixerImport = {\n      imports: { print: console.log },\n      memory: { memory }\n    };\n    const mixerInstance = new WebAssembly.Instance(mixerModule, mixerImport);\n    const mixerFunctions = mixerInstance.exports;\n    return mixerFunctions;\n  }\n  static async loadDSPFactory(wasmPath, jsonPath) {\n    const wasmFile = await fetch(wasmPath);\n    if (!wasmFile.ok) {\n      console.error(`=> exception raised while running loadDSPFactory, file not found: ${wasmPath}`);\n      return null;\n    }\n    try {\n      const wasmBuffer = await wasmFile.arrayBuffer();\n      const module2 = await WebAssembly.compile(wasmBuffer);\n      const jsonFile = await fetch(jsonPath);\n      const json = await jsonFile.text();\n      const meta = JSON.parse(json);\n      const cOptions = meta.compile_options;\n      const poly = cOptions.indexOf(\"wasm-e\") !== -1;\n      return { cfactory: 0, code: new Uint8Array(wasmBuffer), module: module2, json, poly };\n    } catch (e) {\n      console.error(`=> exception raised while running loadDSPFactory: ${e}`);\n      return null;\n    }\n  }\n  static async loadDSPMixer(mixerPath, fs) {\n    try {\n      let mixerBuffer = null;\n      if (fs) {\n        mixerBuffer = fs.readFile(mixerPath, { encoding: \"binary\" });\n      } else {\n        const mixerFile = await fetch(mixerPath);\n        mixerBuffer = await mixerFile.arrayBuffer();\n      }\n      return WebAssembly.compile(mixerBuffer);\n    } catch (e) {\n      console.error(`=> exception raised while running loadMixer: ${e}`);\n      return null;\n    }\n  }\n  static async createAsyncMonoDSPInstance(factory) {\n    const instance = await WebAssembly.instantiate(factory.module, this.createWasmImport());\n    return this.createMonoDSPInstanceAux(instance, factory.json);\n  }\n  static createSyncMonoDSPInstance(factory) {\n    const instance = new WebAssembly.Instance(factory.module, this.createWasmImport());\n    return this.createMonoDSPInstanceAux(instance, factory.json);\n  }\n  static async createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory) {\n    const memory = this.createMemoryAux(voices, voiceFactory, effectFactory);\n    const voiceInstance = await WebAssembly.instantiate(voiceFactory.module, this.createWasmImport(memory));\n    const voiceFunctions = voiceInstance.exports;\n    const voiceAPI = new FaustDspInstance_default(voiceFunctions);\n    const mixerAPI = this.createMixerAux(mixerModule, memory);\n    if (effectFactory) {\n      const effectInstance = await WebAssembly.instantiate(effectFactory.module, this.createWasmImport(memory));\n      const effectFunctions = effectInstance.exports;\n      const effectAPI = new FaustDspInstance_default(effectFunctions);\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        effectAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json,\n        effectJSON: effectFactory.json\n      };\n    } else {\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json\n      };\n    }\n  }\n  static createSyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory) {\n    const memory = this.createMemoryAux(voices, voiceFactory, effectFactory);\n    const voiceInstance = new WebAssembly.Instance(voiceFactory.module, this.createWasmImport(memory));\n    const voiceFunctions = voiceInstance.exports;\n    const voiceAPI = new FaustDspInstance_default(voiceFunctions);\n    const mixerAPI = this.createMixerAux(mixerModule, memory);\n    if (effectFactory) {\n      const effectInstance = new WebAssembly.Instance(effectFactory.module, this.createWasmImport(memory));\n      const effectFunctions = effectInstance.exports;\n      const effectAPI = new FaustDspInstance_default(effectFunctions);\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        effectAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json,\n        effectJSON: effectFactory.json\n      };\n    } else {\n      return {\n        memory,\n        voices,\n        voiceAPI,\n        mixerAPI,\n        voiceJSON: voiceFactory.json\n      };\n    }\n  }\n};\nvar FaustWasmInstantiator_default = FaustWasmInstantiator;\n\n// src/FaustOfflineProcessor.ts\nvar FaustOfflineProcessor = class {\n  constructor(instance, bufferSize) {\n    this.fDSPCode = instance;\n    this.fBufferSize = bufferSize;\n    this.fInputs = new Array(this.fDSPCode.getNumInputs()).fill(null).map(() => new Float32Array(bufferSize));\n    this.fOutputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(bufferSize));\n  }\n  render(inputs = [], length = this.fBufferSize, onUpdate) {\n    let l = 0;\n    const outputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(length));\n    this.fDSPCode.start();\n    while (l < length) {\n      const sliceLength = Math.min(length - l, this.fBufferSize);\n      for (let i = 0; i < this.fDSPCode.getNumInputs(); i++) {\n        let input;\n        if (inputs[i]) {\n          if (inputs[i].length <= l) {\n            input = new Float32Array(sliceLength);\n          } else if (inputs[i].length > l + sliceLength) {\n            input = inputs[i].subarray(l, l + sliceLength);\n          } else {\n            input = inputs[i].subarray(l, inputs[i].length);\n          }\n        } else {\n          input = new Float32Array(sliceLength);\n        }\n        this.fInputs[i] = input;\n      }\n      this.fDSPCode.compute(this.fInputs, this.fOutputs);\n      for (let i = 0; i < this.fDSPCode.getNumOutputs(); i++) {\n        const output = this.fOutputs[i];\n        if (sliceLength < this.fBufferSize) {\n          outputs[i].set(output.subarray(0, sliceLength), l);\n        } else {\n          outputs[i].set(output, l);\n        }\n      }\n      l += this.fBufferSize;\n      onUpdate?.(l);\n    }\n    this.fDSPCode.stop();\n    return outputs;\n  }\n};\nvar FaustOfflineProcessor_default = FaustOfflineProcessor;\n\n// src/FaustSvgDiagrams.ts\nvar FaustSvgDiagrams = class {\n  constructor(compiler) {\n    this.compiler = compiler;\n  }\n  from(name, code, args) {\n    const fs = this.compiler.fs();\n    try {\n      const files2 = fs.readdir(`/${name}-svg/`);\n      files2.filter((file) => file !== \".\" && file !== \"..\").forEach((file) => fs.unlink(`/${name}-svg/${file}`));\n    } catch {\n    }\n    const success = this.compiler.generateAuxFiles(name, code, `-lang wasm -svg ${args}`);\n    if (!success)\n      throw new Error(this.compiler.getErrorMessage());\n    const svgs = {};\n    const files = fs.readdir(`/${name}-svg/`);\n    files.filter((file) => file !== \".\" && file !== \"..\").forEach((file) => svgs[file] = fs.readFile(`/${name}-svg/${file}`, { encoding: \"utf8\" }));\n    return svgs;\n  }\n};\nvar FaustSvgDiagrams_default = FaustSvgDiagrams;\n\n// src/LibFaust.ts\nvar LibFaust = class {\n  constructor(module2) {\n    this.fModule = module2;\n    this.fCompiler = new module2.libFaustWasm();\n    this.fFileSystem = this.fModule.FS;\n  }\n  module() {\n    return this.fModule;\n  }\n  fs() {\n    return this.fFileSystem;\n  }\n  version() {\n    return this.fCompiler.version();\n  }\n  createDSPFactory(name, code, args, useInternalMemory) {\n    return this.fCompiler.createDSPFactory(name, code, args, useInternalMemory);\n  }\n  deleteDSPFactory(cFactory) {\n    return this.fCompiler.deleteDSPFactory(cFactory);\n  }\n  expandDSP(name, code, args) {\n    return this.fCompiler.expandDSP(name, code, args);\n  }\n  generateAuxFiles(name, code, args) {\n    return this.fCompiler.generateAuxFiles(name, code, args);\n  }\n  deleteAllDSPFactories() {\n    return this.fCompiler.deleteAllDSPFactories();\n  }\n  getErrorAfterException() {\n    return this.fCompiler.getErrorAfterException();\n  }\n  cleanupAfterException() {\n    return this.fCompiler.cleanupAfterException();\n  }\n  getInfos(what) {\n    return this.fCompiler.getInfos(what);\n  }\n  toString() {\n    return `LibFaust module: ${this.fModule}, compiler: ${this.fCompiler}`;\n  }\n};\nvar LibFaust_default = LibFaust;\n\n// src/WavEncoder.ts\nvar WavEncoder = class {\n  static encode(audioBuffer, options) {\n    const numberOfChannels = audioBuffer.length;\n    const length = audioBuffer[0].length;\n    const { shared, float } = options;\n    const bitDepth = float ? 32 : options.bitDepth | 0 || 16;\n    const byteDepth = bitDepth >> 3;\n    const byteLength = length * numberOfChannels * byteDepth;\n    const AB = shared ? globalThis.SharedArrayBuffer || globalThis.ArrayBuffer : globalThis.ArrayBuffer;\n    const ab = new AB((44 + byteLength) * Uint8Array.BYTES_PER_ELEMENT);\n    const dataView = new DataView(ab);\n    const writer = new Writer(dataView);\n    const format = {\n      formatId: float ? 3 : 1,\n      float: !!float,\n      numberOfChannels,\n      sampleRate: options.sampleRate,\n      symmetric: !!options.symmetric,\n      length,\n      bitDepth,\n      byteDepth\n    };\n    this.writeHeader(writer, format);\n    this.writeData(writer, audioBuffer, format);\n    return ab;\n  }\n  static writeHeader(writer, format) {\n    const { formatId, sampleRate, bitDepth, numberOfChannels, length, byteDepth } = format;\n    writer.string(\"RIFF\");\n    writer.uint32(writer.dataView.byteLength - 8);\n    writer.string(\"WAVE\");\n    writer.string(\"fmt \");\n    writer.uint32(16);\n    writer.uint16(formatId);\n    writer.uint16(numberOfChannels);\n    writer.uint32(sampleRate);\n    writer.uint32(sampleRate * numberOfChannels * byteDepth);\n    writer.uint16(numberOfChannels * byteDepth);\n    writer.uint16(bitDepth);\n    writer.string(\"data\");\n    writer.uint32(length * numberOfChannels * byteDepth);\n    return writer.pos;\n  }\n  static writeData(writer, audioBuffer, format) {\n    const { bitDepth, float, length, numberOfChannels, symmetric } = format;\n    if (bitDepth === 32 && float) {\n      const { dataView, pos } = writer;\n      const ab = dataView.buffer;\n      const f32View = new Float32Array(ab, pos);\n      if (numberOfChannels === 1) {\n        f32View.set(audioBuffer[0]);\n        return;\n      }\n      for (let ch = 0; ch < numberOfChannels; ch++) {\n        const channel = audioBuffer[ch];\n        for (let i = 0; i < length; i++) {\n          f32View[i * numberOfChannels + ch] = channel[i];\n        }\n      }\n      return;\n    }\n    const encoderOption = float ? \"f\" : symmetric ? \"s\" : \"\";\n    const methodName = \"pcm\" + bitDepth + encoderOption;\n    if (!writer[methodName]) {\n      throw new TypeError(\"Not supported bit depth: \" + bitDepth);\n    }\n    const write = writer[methodName].bind(writer);\n    for (let i = 0; i < length; i++) {\n      for (let j = 0; j < numberOfChannels; j++) {\n        write(audioBuffer[j][i]);\n      }\n    }\n  }\n};\nvar Writer = class {\n  constructor(dataView) {\n    this.pos = 0;\n    this.dataView = dataView;\n  }\n  int16(value) {\n    this.dataView.setInt16(this.pos, value, true);\n    this.pos += 2;\n  }\n  uint16(value) {\n    this.dataView.setUint16(this.pos, value, true);\n    this.pos += 2;\n  }\n  uint32(value) {\n    this.dataView.setUint32(this.pos, value, true);\n    this.pos += 4;\n  }\n  string(value) {\n    for (let i = 0, imax = value.length; i < imax; i++) {\n      this.dataView.setUint8(this.pos++, value.charCodeAt(i));\n    }\n  }\n  pcm8(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = (value * 0.5 + 0.5) * 255;\n    value = Math.round(value) | 0;\n    this.dataView.setUint8(this.pos, value);\n    this.pos += 1;\n  }\n  pcm8s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 128) + 128;\n    value = Math.max(0, Math.min(value, 255));\n    this.dataView.setUint8(this.pos, value);\n    this.pos += 1;\n  }\n  pcm16(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = value < 0 ? value * 32768 : value * 32767;\n    value = Math.round(value) | 0;\n    this.dataView.setInt16(this.pos, value, true);\n    this.pos += 2;\n  }\n  pcm16s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 32768);\n    value = Math.max(-32768, Math.min(value, 32767));\n    this.dataView.setInt16(this.pos, value, true);\n    this.pos += 2;\n  }\n  pcm24(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = value < 0 ? 16777216 + value * 8388608 : value * 8388607;\n    value = Math.round(value) | 0;\n    const x0 = value >> 0 & 255;\n    const x1 = value >> 8 & 255;\n    const x2 = value >> 16 & 255;\n    this.dataView.setUint8(this.pos + 0, x0);\n    this.dataView.setUint8(this.pos + 1, x1);\n    this.dataView.setUint8(this.pos + 2, x2);\n    this.pos += 3;\n  }\n  pcm24s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 8388608);\n    value = Math.max(-8388608, Math.min(value, 8388607));\n    const x0 = value >> 0 & 255;\n    const x1 = value >> 8 & 255;\n    const x2 = value >> 16 & 255;\n    this.dataView.setUint8(this.pos + 0, x0);\n    this.dataView.setUint8(this.pos + 1, x1);\n    this.dataView.setUint8(this.pos + 2, x2);\n    this.pos += 3;\n  }\n  pcm32(valueIn) {\n    let value = valueIn;\n    value = Math.max(-1, Math.min(value, 1));\n    value = value < 0 ? value * 2147483648 : value * 2147483647;\n    value = Math.round(value) | 0;\n    this.dataView.setInt32(this.pos, value, true);\n    this.pos += 4;\n  }\n  pcm32s(valueIn) {\n    let value = valueIn;\n    value = Math.round(value * 2147483648);\n    value = Math.max(-2147483648, Math.min(value, 2147483647));\n    this.dataView.setInt32(this.pos, value, true);\n    this.pos += 4;\n  }\n  pcm32f(value) {\n    this.dataView.setFloat32(this.pos, value, true);\n    this.pos += 4;\n  }\n};\nvar WavEncoder_default = WavEncoder;\n\n// src/WavDecoder.ts\nvar WavDecoder = class {\n  static decode(buffer, options) {\n    const dataView = new DataView(buffer);\n    const reader = new Reader(dataView);\n    if (reader.string(4) !== \"RIFF\") {\n      throw new TypeError(\"Invalid WAV file\");\n    }\n    reader.uint32();\n    if (reader.string(4) !== \"WAVE\") {\n      throw new TypeError(\"Invalid WAV file\");\n    }\n    let format = null;\n    let audioData = null;\n    do {\n      const chunkType = reader.string(4);\n      const chunkSize = reader.uint32();\n      if (chunkType === \"fmt \") {\n        format = this.decodeFormat(reader, chunkSize);\n      } else if (chunkType === \"data\") {\n        audioData = this.decodeData(reader, chunkSize, format, options || {});\n      } else {\n        reader.skip(chunkSize);\n      }\n    } while (audioData === null);\n    return audioData;\n  }\n  static decodeFormat(reader, chunkSize) {\n    const formats = {\n      1: \"lpcm\",\n      3: \"lpcm\"\n    };\n    const formatId = reader.uint16();\n    if (!formats.hasOwnProperty(formatId)) {\n      throw new TypeError(\"Unsupported format in WAV file: 0x\" + formatId.toString(16));\n    }\n    const format = {\n      formatId,\n      float: formatId === 3,\n      numberOfChannels: reader.uint16(),\n      sampleRate: reader.uint32(),\n      byteRate: reader.uint32(),\n      blockSize: reader.uint16(),\n      bitDepth: reader.uint16()\n    };\n    reader.skip(chunkSize - 16);\n    return format;\n  }\n  static decodeData(reader, chunkSizeIn, format, options) {\n    const chunkSize = Math.min(chunkSizeIn, reader.remain());\n    const length = Math.floor(chunkSize / format.blockSize);\n    const numberOfChannels = format.numberOfChannels;\n    const sampleRate = format.sampleRate;\n    const channelData = new Array(numberOfChannels);\n    for (let ch = 0; ch < numberOfChannels; ch++) {\n      const AB = options.shared ? globalThis.SharedArrayBuffer || globalThis.ArrayBuffer : globalThis.ArrayBuffer;\n      const ab = new AB(length * Float32Array.BYTES_PER_ELEMENT);\n      channelData[ch] = new Float32Array(ab);\n    }\n    this.readPCM(reader, channelData, length, format, options);\n    return {\n      numberOfChannels,\n      length,\n      sampleRate,\n      channelData\n    };\n  }\n  static readPCM(reader, channelData, length, format, options) {\n    const bitDepth = format.bitDepth;\n    const decoderOption = format.float ? \"f\" : options.symmetric ? \"s\" : \"\";\n    const methodName = \"pcm\" + bitDepth + decoderOption;\n    if (!reader[methodName]) {\n      throw new TypeError(\"Not supported bit depth: \" + format.bitDepth);\n    }\n    const read = reader[methodName].bind(reader);\n    const numberOfChannels = format.numberOfChannels;\n    for (let i = 0; i < length; i++) {\n      for (let ch = 0; ch < numberOfChannels; ch++) {\n        channelData[ch][i] = read();\n      }\n    }\n  }\n};\nvar Reader = class {\n  constructor(dataView) {\n    this.pos = 0;\n    this.dataView = dataView;\n  }\n  remain() {\n    return this.dataView.byteLength - this.pos;\n  }\n  skip(n) {\n    this.pos += n;\n  }\n  uint8() {\n    const data = this.dataView.getUint8(this.pos);\n    this.pos += 1;\n    return data;\n  }\n  int16() {\n    const data = this.dataView.getInt16(this.pos, true);\n    this.pos += 2;\n    return data;\n  }\n  uint16() {\n    const data = this.dataView.getUint16(this.pos, true);\n    this.pos += 2;\n    return data;\n  }\n  uint32() {\n    const data = this.dataView.getUint32(this.pos, true);\n    this.pos += 4;\n    return data;\n  }\n  string(n) {\n    let data = \"\";\n    for (let i = 0; i < n; i++) {\n      data += String.fromCharCode(this.uint8());\n    }\n    return data;\n  }\n  pcm8() {\n    const data = this.dataView.getUint8(this.pos) - 128;\n    this.pos += 1;\n    return data < 0 ? data / 128 : data / 127;\n  }\n  pcm8s() {\n    const data = this.dataView.getUint8(this.pos) - 127.5;\n    this.pos += 1;\n    return data / 127.5;\n  }\n  pcm16() {\n    const data = this.dataView.getInt16(this.pos, true);\n    this.pos += 2;\n    return data < 0 ? data / 32768 : data / 32767;\n  }\n  pcm16s() {\n    const data = this.dataView.getInt16(this.pos, true);\n    this.pos += 2;\n    return data / 32768;\n  }\n  pcm24() {\n    const x0 = this.dataView.getUint8(this.pos + 0);\n    const x1 = this.dataView.getUint8(this.pos + 1);\n    const x2 = this.dataView.getUint8(this.pos + 2);\n    const xx = x0 + (x1 << 8) + (x2 << 16);\n    const data = xx > 8388608 ? xx - 16777216 : xx;\n    this.pos += 3;\n    return data < 0 ? data / 8388608 : data / 8388607;\n  }\n  pcm24s() {\n    const x0 = this.dataView.getUint8(this.pos + 0);\n    const x1 = this.dataView.getUint8(this.pos + 1);\n    const x2 = this.dataView.getUint8(this.pos + 2);\n    const xx = x0 + (x1 << 8) + (x2 << 16);\n    const data = xx > 8388608 ? xx - 16777216 : xx;\n    this.pos += 3;\n    return data / 8388608;\n  }\n  pcm32() {\n    const data = this.dataView.getInt32(this.pos, true);\n    this.pos += 4;\n    return data < 0 ? data / 2147483648 : data / 2147483647;\n  }\n  pcm32s() {\n    const data = this.dataView.getInt32(this.pos, true);\n    this.pos += 4;\n    return data / 2147483648;\n  }\n  pcm32f() {\n    const data = this.dataView.getFloat32(this.pos, true);\n    this.pos += 4;\n    return data;\n  }\n  pcm64f() {\n    const data = this.dataView.getFloat64(this.pos, true);\n    this.pos += 8;\n    return data;\n  }\n};\nvar WavDecoder_default = WavDecoder;\n\n// src/FaustWebAudioDsp.ts\nvar FaustBaseWebAudioDsp = class {\n  constructor(sampleSize, bufferSize) {\n    this.fOutputHandler = null;\n    this.fComputeHandler = null;\n    this.fCachedEvents = [];\n    this.fBufferNum = 0;\n    this.fPlotHandler = null;\n    this.fBufferSize = bufferSize;\n    this.fInChannels = [];\n    this.fOutChannels = [];\n    this.gPtrSize = sampleSize;\n    this.gSampleSize = sampleSize;\n    this.fOutputsTimer = 5;\n    this.fInputsItems = [];\n    this.fOutputsItems = [];\n    this.fDescriptor = [];\n    this.fPitchwheelLabel = [];\n    this.fCtrlLabel = new Array(128).fill(null).map(() => []);\n    this.fPathTable = {};\n    this.fProcessing = false;\n    this.fDestroyed = false;\n    this.fUICallback = (item) => {\n      if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n        this.fOutputsItems.push(item.address);\n        this.fPathTable[item.address] = item.index;\n      } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n        this.fInputsItems.push(item.address);\n        this.fPathTable[item.address] = item.index;\n        this.fDescriptor.push(item);\n        if (!item.meta)\n          return;\n        item.meta.forEach((meta) => {\n          const { midi } = meta;\n          if (!midi)\n            return;\n          const strMidi = midi.trim();\n          if (strMidi === \"pitchwheel\") {\n            this.fPitchwheelLabel.push({ path: item.address, min: item.min, max: item.max });\n          } else {\n            const matched = strMidi.match(/^ctrl\\s(\\d+)/);\n            if (!matched)\n              return;\n            this.fCtrlLabel[parseInt(matched[1])].push({ path: item.address, min: item.min, max: item.max });\n          }\n        });\n      }\n    };\n  }\n  static remap(v, mn0, mx0, mn1, mx1) {\n    return (v - mn0) / (mx0 - mn0) * (mx1 - mn1) + mn1;\n  }\n  static parseUI(ui, callback) {\n    ui.forEach((group) => this.parseGroup(group, callback));\n  }\n  static parseGroup(group, callback) {\n    if (group.items) {\n      this.parseItems(group.items, callback);\n    }\n  }\n  static parseItems(items, callback) {\n    items.forEach((item) => this.parseItem(item, callback));\n  }\n  static parseItem(item, callback) {\n    if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n      this.parseItems(item.items, callback);\n    } else {\n      callback(item);\n    }\n  }\n  updateOutputs() {\n    if (this.fOutputsItems.length > 0 && this.fOutputHandler && this.fOutputsTimer-- === 0) {\n      this.fOutputsTimer = 5;\n      this.fOutputsItems.forEach((item) => {\n        if (this.fOutputHandler)\n          this.fOutputHandler(item, this.getParamValue(item));\n      });\n    }\n  }\n  metadata(handler) {\n    if (this.fJSONDsp.meta) {\n      this.fJSONDsp.meta.forEach((meta) => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n    }\n  }\n  compute(input, output) {\n    return false;\n  }\n  setOutputParamHandler(handler) {\n    this.fOutputHandler = handler;\n  }\n  getOutputParamHandler() {\n    return this.fOutputHandler;\n  }\n  setComputeHandler(handler) {\n    this.fComputeHandler = handler;\n  }\n  getComputeHandler() {\n    return this.fComputeHandler;\n  }\n  setPlotHandler(handler) {\n    this.fPlotHandler = handler;\n  }\n  getPlotHandler() {\n    return this.fPlotHandler;\n  }\n  getNumInputs() {\n    return -1;\n  }\n  getNumOutputs() {\n    return -1;\n  }\n  midiMessage(data) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ data, type: \"midi\" });\n    const cmd = data[0] >> 4;\n    const channel = data[0] & 15;\n    const data1 = data[1];\n    const data2 = data[2];\n    if (cmd === 11)\n      return this.ctrlChange(channel, data1, data2);\n    if (cmd === 14)\n      return this.pitchWheel(channel, data2 * 128 + data1);\n  }\n  ctrlChange(channel, ctrl, value) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"ctrlChange\", data: [channel, ctrl, value] });\n    if (this.fCtrlLabel[ctrl].length) {\n      this.fCtrlLabel[ctrl].forEach((ctrl2) => {\n        const { path } = ctrl2;\n        this.setParamValue(path, FaustBaseWebAudioDsp.remap(value, 0, 127, ctrl2.min, ctrl2.max));\n        if (this.fOutputHandler)\n          this.fOutputHandler(path, this.getParamValue(path));\n      });\n    }\n  }\n  pitchWheel(channel, wheel) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"pitchWheel\", data: [channel, wheel] });\n    this.fPitchwheelLabel.forEach((pw) => {\n      this.setParamValue(pw.path, FaustBaseWebAudioDsp.remap(wheel, 0, 16383, pw.min, pw.max));\n      if (this.fOutputHandler)\n        this.fOutputHandler(pw.path, this.getParamValue(pw.path));\n    });\n  }\n  setParamValue(path, value) {\n  }\n  getParamValue(path) {\n    return 0;\n  }\n  getParams() {\n    return this.fInputsItems;\n  }\n  getMeta() {\n    return this.fJSONDsp;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.fJSONDsp.ui;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  start() {\n    this.fProcessing = true;\n  }\n  stop() {\n    this.fProcessing = false;\n  }\n  destroy() {\n    this.fDestroyed = true;\n    this.fOutputHandler = null;\n    this.fComputeHandler = null;\n    this.fPlotHandler = null;\n  }\n};\nvar FaustMonoWebAudioDsp = class extends FaustBaseWebAudioDsp {\n  constructor(instance, sampleRate, sampleSize, bufferSize) {\n    super(sampleSize, bufferSize);\n    this.fInstance = instance;\n    this.fJSONDsp = JSON.parse(this.fInstance.json);\n    FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n    this.initMemory();\n    this.fInstance.api.init(this.fDSP, sampleRate);\n  }\n  initMemory() {\n    this.fDSP = 0;\n    const $audio = this.fJSONDsp.size;\n    this.fAudioInputs = $audio;\n    this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.gPtrSize;\n    const $audioInputs = this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize;\n    const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.gSampleSize;\n    const HEAP = this.fInstance.memory.buffer;\n    const HEAP32 = new Int32Array(HEAP);\n    const HEAPF = this.gSampleSize === 4 ? new Float32Array(HEAP) : new Float64Array(HEAP);\n    if (this.getNumInputs() > 0) {\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.gSampleSize * chan;\n      }\n      const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, this.fAudioInputs + this.getNumInputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.gSampleSize), dspInChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n    if (this.getNumOutputs() > 0) {\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.gSampleSize * chan;\n      }\n      const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.gSampleSize), dspOutChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n  }\n  toString() {\n    return `============== Mono Memory layout ==============\nthis.fBufferSize: ${this.fBufferSize}\nthis.fJSONDsp.size: ${this.fJSONDsp.size}\nthis.fAudioInputs: ${this.fAudioInputs}\nthis.fAudioOutputs: ${this.fAudioOutputs}\nthis.fDSP: ${this.fDSP}`;\n  }\n  compute(input, output) {\n    if (this.fDestroyed)\n      return false;\n    if (!this.fProcessing)\n      return true;\n    if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n      return true;\n    }\n    if (this.getNumOutputs() > 0 && (!output || !output[0] || output[0].length === 0)) {\n      return true;\n    }\n    if (input !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); ++chan) {\n        const dspInput = this.fInChannels[chan];\n        dspInput.set(input[chan]);\n      }\n    }\n    if (this.fComputeHandler)\n      this.fComputeHandler(this.fBufferSize);\n    this.fInstance.api.compute(this.fDSP, this.fBufferSize, this.fAudioInputs, this.fAudioOutputs);\n    this.updateOutputs();\n    if (output !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n        const dspOutput = this.fOutChannels[chan];\n        output[chan].set(dspOutput);\n      }\n      if (this.fPlotHandler) {\n        this.fPlotHandler(output, this.fBufferNum++, this.fCachedEvents.length ? this.fCachedEvents : void 0);\n        this.fCachedEvents = [];\n      }\n    }\n    return true;\n  }\n  metadata(handler) {\n    super.metadata(handler);\n  }\n  getNumInputs() {\n    return this.fInstance.api.getNumInputs(this.fDSP);\n  }\n  getNumOutputs() {\n    return this.fInstance.api.getNumOutputs(this.fDSP);\n  }\n  setParamValue(path, value) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n    this.fInstance.api.setParamValue(this.fDSP, this.fPathTable[path], value);\n  }\n  getParamValue(path) {\n    return this.fInstance.api.getParamValue(this.fDSP, this.fPathTable[path]);\n  }\n  getMeta() {\n    return this.fJSONDsp;\n  }\n  getJSON() {\n    return this.fInstance.json;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  getUI() {\n    return this.fJSONDsp.ui;\n  }\n};\nvar FaustWebAudioDspVoice = class {\n  constructor($dsp, api, inputItems, pathTable, sampleRate) {\n    FaustWebAudioDspVoice.kActiveVoice = 0;\n    FaustWebAudioDspVoice.kFreeVoice = -1;\n    FaustWebAudioDspVoice.kReleaseVoice = -2;\n    FaustWebAudioDspVoice.kLegatoVoice = -3;\n    FaustWebAudioDspVoice.kNoVoice = -4;\n    FaustWebAudioDspVoice.VOICE_STOP_LEVEL = 5e-4;\n    this.fKeyFun = (pitch) => {\n      return FaustWebAudioDspVoice.midiToFreq(pitch);\n    };\n    this.fVelFun = (velocity) => {\n      return velocity / 127;\n    };\n    this.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n    this.fNextNote = this.fNextVel = -1;\n    this.fLevel = 0;\n    this.fDate = this.fRelease = 0;\n    this.fDSP = $dsp;\n    this.fAPI = api;\n    this.fGateLabel = [];\n    this.fGainLabel = [];\n    this.fFreqLabel = [];\n    this.fAPI.init(this.fDSP, sampleRate);\n    this.extractPaths(inputItems, pathTable);\n  }\n  static midiToFreq(note) {\n    return 440 * 2 ** ((note - 69) / 12);\n  }\n  extractPaths(inputItems, pathTable) {\n    inputItems.forEach((item) => {\n      if (item.endsWith(\"/gate\")) {\n        this.fGateLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/freq\")) {\n        this.fKeyFun = (pitch) => {\n          return FaustWebAudioDspVoice.midiToFreq(pitch);\n        };\n        this.fFreqLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/key\")) {\n        this.fKeyFun = (pitch) => {\n          return pitch;\n        };\n        this.fFreqLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/gain\")) {\n        this.fVelFun = (velocity) => {\n          return velocity / 127;\n        };\n        this.fGainLabel.push(pathTable[item]);\n      } else if (item.endsWith(\"/vel\") && item.endsWith(\"/velocity\")) {\n        this.fVelFun = (velocity) => {\n          return velocity;\n        };\n        this.fGainLabel.push(pathTable[item]);\n      }\n    });\n  }\n  keyOn(pitch, velocity, legato = false) {\n    if (legato) {\n      this.fNextNote = pitch;\n      this.fNextVel = velocity;\n    } else {\n      this.fFreqLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, this.fKeyFun(pitch)));\n      this.fGateLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, 1));\n      this.fGainLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, this.fVelFun(velocity)));\n      this.fCurNote = pitch;\n    }\n  }\n  keyOff(hard = false) {\n    this.fGateLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, 0));\n    if (hard) {\n      this.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n    } else {\n      this.fRelease = this.fAPI.getSampleRate(this.fDSP) / 2;\n      this.fCurNote = FaustWebAudioDspVoice.kReleaseVoice;\n    }\n  }\n  computeLegato(bufferSize, $inputs, $outputZero, $outputsHalf) {\n    let size = bufferSize / 2;\n    this.fGateLabel.forEach((index) => this.fAPI.setParamValue(this.fDSP, index, 0));\n    this.fAPI.compute(this.fDSP, size, $inputs, $outputZero);\n    this.keyOn(this.fNextNote, this.fNextVel);\n    this.fAPI.compute(this.fDSP, size, $inputs, $outputsHalf);\n  }\n  compute(bufferSize, $inputs, $outputs) {\n    this.fAPI.compute(this.fDSP, bufferSize, $inputs, $outputs);\n  }\n  setParamValue(index, value) {\n    this.fAPI.setParamValue(this.fDSP, index, value);\n  }\n  getParamValue(index) {\n    return this.fAPI.getParamValue(this.fDSP, index);\n  }\n};\nvar FaustPolyWebAudioDsp = class extends FaustBaseWebAudioDsp {\n  constructor(instance, sampleRate, sampleSize, bufferSize) {\n    super(sampleSize, bufferSize);\n    this.fInstance = instance;\n    this.fJSONDsp = JSON.parse(this.fInstance.voiceJSON);\n    this.fJSONEffect = this.fInstance.effectAPI && this.fInstance.effectJSON ? JSON.parse(this.fInstance.effectJSON) : null;\n    FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n    if (this.fJSONEffect)\n      FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n    this.initMemory();\n    this.fVoiceTable = [];\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      this.fVoiceTable.push(new FaustWebAudioDspVoice(this.fJSONDsp.size * voice, this.fInstance.voiceAPI, this.fInputsItems, this.fPathTable, sampleRate));\n    }\n    if (this.fInstance.effectAPI)\n      this.fInstance.effectAPI.init(this.fEffect, sampleRate);\n  }\n  initMemory() {\n    this.fEffect = this.fJSONDsp.size * this.fInstance.voices;\n    const $audio = this.fEffect + (this.fJSONEffect ? this.fJSONEffect.size : 0);\n    this.fAudioInputs = $audio;\n    this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.gPtrSize;\n    this.fAudioMixing = this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize;\n    this.fAudioMixingHalf = this.fAudioMixing + this.getNumOutputs() * this.gPtrSize;\n    const $audioInputs = this.fAudioMixingHalf + this.getNumOutputs() * this.gPtrSize;\n    const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.gSampleSize;\n    const $audioMixing = $audioOutputs + this.getNumOutputs() * this.fBufferSize * this.gSampleSize;\n    const HEAP = this.fInstance.memory.buffer;\n    const HEAP32 = new Int32Array(HEAP);\n    const HEAPF = this.gSampleSize === 4 ? new Float32Array(HEAP) : new Float64Array(HEAP);\n    if (this.getNumInputs() > 0) {\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.gSampleSize * chan;\n      }\n      const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, this.fAudioInputs + this.getNumInputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumInputs(); chan++) {\n        this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.gSampleSize), dspInChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n    if (this.getNumOutputs() > 0) {\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.gSampleSize * chan;\n        HEAP32[(this.fAudioMixing >> 2) + chan] = $audioMixing + this.fBufferSize * this.gSampleSize * chan;\n        HEAP32[(this.fAudioMixingHalf >> 2) + chan] = $audioMixing + this.fBufferSize * this.gSampleSize * chan + this.fBufferSize / 2 * this.gSampleSize;\n      }\n      const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize >> 2);\n      for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n        this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.gSampleSize), dspOutChans[chan] + this.fBufferSize * this.gSampleSize >> Math.log2(this.gSampleSize));\n      }\n    }\n  }\n  toString() {\n    return `============== Poly Memory layout ==============\nthis.fBufferSize: ${this.fBufferSize}\nthis.fJSONDsp.size: ${this.fJSONDsp.size}\nthis.fAudioInputs: ${this.fAudioInputs}\nthis.fAudioOutputs: ${this.fAudioOutputs}\nthis.fAudioMixing: ${this.fAudioMixing}\nthis.fAudioMixingHalf: ${this.fAudioMixingHalf}`;\n  }\n  allocVoice(voice, type) {\n    this.fVoiceTable[voice].fDate++;\n    this.fVoiceTable[voice].fCurNote = type;\n    return voice;\n  }\n  getPlayingVoice(pitch) {\n    let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n    let oldestDatePlaying = Number.MAX_VALUE;\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      if (this.fVoiceTable[voice].fCurNote === pitch) {\n        if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n          oldestDatePlaying = this.fVoiceTable[voice].fDate;\n          voicePlaying = voice;\n        }\n      }\n    }\n    return voicePlaying;\n  }\n  getFreeVoice() {\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kFreeVoice) {\n        return this.allocVoice(voice, FaustWebAudioDspVoice.kActiveVoice);\n      }\n    }\n    let voiceRelease = FaustWebAudioDspVoice.kNoVoice;\n    let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n    let oldestDateRelease = Number.MAX_VALUE;\n    let oldestDatePlaying = Number.MAX_VALUE;\n    for (let voice = 0; voice < this.fInstance.voices; voice++) {\n      if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kReleaseVoice) {\n        if (this.fVoiceTable[voice].fDate < oldestDateRelease) {\n          oldestDateRelease = this.fVoiceTable[voice].fDate;\n          voiceRelease = voice;\n        }\n      } else if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n        oldestDatePlaying = this.fVoiceTable[voice].fDate;\n        voicePlaying = voice;\n      }\n    }\n    if (oldestDateRelease !== Number.MAX_VALUE) {\n      console.log(`Steal release voice : voice_date = ${this.fVoiceTable[voiceRelease].fDate} voice = ${voiceRelease}`);\n      return this.allocVoice(voiceRelease, FaustWebAudioDspVoice.kLegatoVoice);\n    }\n    if (oldestDatePlaying !== Number.MAX_VALUE) {\n      console.log(`Steal playing voice : voice_date = ${this.fVoiceTable[voicePlaying].fDate} voice = ${voicePlaying}`);\n      return this.allocVoice(voicePlaying, FaustWebAudioDspVoice.kLegatoVoice);\n    }\n    return FaustWebAudioDspVoice.kNoVoice;\n  }\n  compute(input, output) {\n    if (this.fDestroyed)\n      return false;\n    if (!this.fProcessing)\n      return true;\n    if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n      return true;\n    }\n    if (this.getNumOutputs() > 0 && (!output || !output[0] || output[0].length === 0)) {\n      return true;\n    }\n    if (input !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); ++chan) {\n        const dspInput = this.fInChannels[chan];\n        dspInput.set(input[chan]);\n      }\n    }\n    if (this.fComputeHandler)\n      this.fComputeHandler(this.fBufferSize);\n    this.fInstance.mixerAPI.clearOutput(this.fBufferSize, this.getNumOutputs(), this.fAudioOutputs);\n    this.fVoiceTable.forEach((voice) => {\n      if (voice.fCurNote === FaustWebAudioDspVoice.kLegatoVoice) {\n        voice.computeLegato(this.fBufferSize, this.fAudioInputs, this.fAudioMixing, this.fAudioMixingHalf);\n        this.fInstance.mixerAPI.fadeOut(this.fBufferSize / 2, this.getNumOutputs(), this.fAudioMixing);\n        voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n      } else if (voice.fCurNote !== FaustWebAudioDspVoice.kFreeVoice) {\n        voice.compute(this.fBufferSize, this.fAudioInputs, this.fAudioMixing);\n        voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n        voice.fRelease -= this.fBufferSize;\n        if (voice.fCurNote == FaustWebAudioDspVoice.kReleaseVoice && (voice.fLevel < FaustWebAudioDspVoice.VOICE_STOP_LEVEL && voice.fRelease < 0)) {\n          voice.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n        }\n      }\n    });\n    if (this.fInstance.effectAPI)\n      this.fInstance.effectAPI.compute(this.fEffect, this.fBufferSize, this.fAudioOutputs, this.fAudioOutputs);\n    this.updateOutputs();\n    if (output !== void 0) {\n      for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n        const dspOutput = this.fOutChannels[chan];\n        output[chan].set(dspOutput);\n      }\n      if (this.fPlotHandler) {\n        this.fPlotHandler(output, this.fBufferNum++, this.fCachedEvents.length ? this.fCachedEvents : void 0);\n        this.fCachedEvents = [];\n      }\n    }\n    return true;\n  }\n  getNumInputs() {\n    return this.fInstance.voiceAPI.getNumInputs(0);\n  }\n  getNumOutputs() {\n    return this.fInstance.voiceAPI.getNumOutputs(0);\n  }\n  static findPath(o, p) {\n    if (typeof o !== \"object\") {\n      return false;\n    } else if (o.address) {\n      return o.address === p;\n    } else {\n      for (const k in o) {\n        if (FaustPolyWebAudioDsp.findPath(o[k], p))\n          return true;\n      }\n      return false;\n    }\n  }\n  setParamValue(path, value) {\n    if (this.fPlotHandler)\n      this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n    if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n      this.fInstance.effectAPI.setParamValue(this.fEffect, this.fPathTable[path], value);\n    } else {\n      this.fVoiceTable.forEach((voice) => {\n        voice.setParamValue(this.fPathTable[path], value);\n      });\n    }\n  }\n  getParamValue(path) {\n    if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n      return this.fInstance.effectAPI.getParamValue(this.fEffect, this.fPathTable[path]);\n    } else {\n      return this.fVoiceTable[0].getParamValue(this.fPathTable[path]);\n    }\n  }\n  getMeta() {\n    const o = this.fJSONDsp;\n    const e = this.fJSONEffect;\n    const r = { ...o };\n    if (e) {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Sequencer\",\n        items: [\n          { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n          { type: \"vgroup\", label: \"Effect\", items: e.ui }\n        ]\n      }];\n    } else {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Polyphonic\",\n        items: [\n          { type: \"vgroup\", label: \"Voices\", items: o.ui }\n        ]\n      }];\n    }\n    return r;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.getMeta().ui;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  midiMessage(data) {\n    const cmd = data[0] >> 4;\n    const channel = data[0] & 15;\n    const data1 = data[1];\n    const data2 = data[2];\n    if (cmd === 8 || cmd === 9 && data2 === 0)\n      return this.keyOff(channel, data1, data2);\n    else if (cmd === 9)\n      return this.keyOn(channel, data1, data2);\n    else\n      super.midiMessage(data);\n  }\n  ctrlChange(channel, ctrl, value) {\n    if (ctrl === 123 || ctrl === 120) {\n      this.allNotesOff(true);\n    } else {\n      super.ctrlChange(channel, ctrl, value);\n    }\n  }\n  keyOn(channel, pitch, velocity) {\n    const voice = this.getFreeVoice();\n    this.fVoiceTable[voice].keyOn(pitch, velocity, this.fVoiceTable[voice].fCurNote == FaustWebAudioDspVoice.kLegatoVoice);\n  }\n  keyOff(channel, pitch, velocity) {\n    const voice = this.getPlayingVoice(pitch);\n    if (voice !== FaustWebAudioDspVoice.kNoVoice) {\n      this.fVoiceTable[voice].keyOff();\n    } else {\n      console.log(\"Playing pitch = %d not found\\n\", pitch);\n    }\n  }\n  allNotesOff(hard = true) {\n    this.fCachedEvents.push({ type: \"ctrlChange\", data: [0, 123, 0] });\n    this.fVoiceTable.forEach((voice) => voice.keyOff(hard));\n  }\n};\n\n// src/FaustAudioWorkletNode.ts\nvar FaustAudioWorkletNode = class extends (globalThis.AudioWorkletNode || null) {\n  constructor(context, name, factory, options) {\n    const JSONObj = JSON.parse(factory.json);\n    super(context, name, {\n      numberOfInputs: JSONObj.inputs > 0 ? 1 : 0,\n      numberOfOutputs: JSONObj.outputs > 0 ? 1 : 0,\n      channelCount: Math.max(1, JSONObj.inputs),\n      outputChannelCount: [JSONObj.outputs],\n      channelCountMode: \"explicit\",\n      channelInterpretation: \"speakers\",\n      processorOptions: options\n    });\n    this.fJSONDsp = JSONObj;\n    this.fJSON = factory.json;\n    this.fOutputHandler = null;\n    this.fComputeHandler = null;\n    this.fPlotHandler = null;\n    this.fDescriptor = [];\n    this.fInputsItems = [];\n    this.fUICallback = (item) => {\n      if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n        this.fInputsItems.push(item.address);\n        this.fDescriptor.push(item);\n      }\n    };\n    FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n    this.port.onmessage = (e) => {\n      if (e.data.type === \"param\" && this.fOutputHandler) {\n        this.fOutputHandler(e.data.path, e.data.value);\n      } else if (e.data.type === \"plot\" && this.fPlotHandler) {\n        this.fPlotHandler(e.data.value, e.data.index, e.data.events);\n      }\n    };\n  }\n  setOutputParamHandler(handler) {\n    this.fOutputHandler = handler;\n  }\n  getOutputParamHandler() {\n    return this.fOutputHandler;\n  }\n  setComputeHandler(handler) {\n    this.fComputeHandler = handler;\n  }\n  getComputeHandler() {\n    return this.fComputeHandler;\n  }\n  setPlotHandler(handler) {\n    this.fPlotHandler = handler;\n    if (this.fPlotHandler) {\n      this.port.postMessage({ type: \"setPlotHandler\", data: true });\n    } else {\n      this.port.postMessage({ type: \"setPlotHandler\", data: false });\n    }\n  }\n  getPlotHandler() {\n    return this.fPlotHandler;\n  }\n  getNumInputs() {\n    return this.fJSONDsp.inputs;\n  }\n  getNumOutputs() {\n    return this.fJSONDsp.outputs;\n  }\n  compute(inputs, outputs) {\n    return false;\n  }\n  metadata(handler) {\n    if (this.fJSONDsp.meta) {\n      this.fJSONDsp.meta.forEach((meta) => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n    }\n  }\n  midiMessage(data) {\n    const cmd = data[0] >> 4;\n    const channel = data[0] & 15;\n    const data1 = data[1];\n    const data2 = data[2];\n    if (cmd === 11)\n      this.ctrlChange(channel, data1, data2);\n    else if (cmd === 14)\n      this.pitchWheel(channel, data2 * 128 + data1);\n    else\n      this.port.postMessage({ type: \"midi\", data });\n  }\n  ctrlChange(channel, ctrl, value) {\n    const e = { type: \"ctrlChange\", data: [channel, ctrl, value] };\n    this.port.postMessage(e);\n  }\n  pitchWheel(channel, wheel) {\n    const e = { type: \"pitchWheel\", data: [channel, wheel] };\n    this.port.postMessage(e);\n  }\n  setParamValue(path, value) {\n    const e = { type: \"param\", data: { path, value } };\n    this.port.postMessage(e);\n    const param = this.parameters.get(path);\n    if (param)\n      param.setValueAtTime(value, this.context.currentTime);\n  }\n  getParamValue(path) {\n    const param = this.parameters.get(path);\n    return param ? param.value : 0;\n  }\n  getParams() {\n    return this.fInputsItems;\n  }\n  getMeta() {\n    return this.fJSONDsp;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.fJSONDsp.ui;\n  }\n  getDescriptors() {\n    return this.fDescriptor;\n  }\n  start() {\n    this.port.postMessage({ type: \"start\" });\n  }\n  stop() {\n    this.port.postMessage({ type: \"stop\" });\n  }\n  destroy() {\n    this.port.postMessage({ type: \"destroy\" });\n    this.port.close();\n  }\n};\nvar FaustMonoAudioWorkletNode = class extends FaustAudioWorkletNode {\n  constructor(context, name, factory, sampleSize) {\n    super(context, name, factory, { name, factory, sampleSize });\n    this.onprocessorerror = (e) => {\n      console.error(\"Error from \" + this.fJSONDsp.name + \" FaustMonoAudioWorkletNode\");\n      throw e;\n    };\n  }\n};\nvar FaustPolyAudioWorkletNode = class extends FaustAudioWorkletNode {\n  constructor(context, name, voiceFactory, mixerModule, voices, sampleSize, effectFactory) {\n    super(context, name, voiceFactory, {\n      name,\n      voiceFactory,\n      mixerModule,\n      voices,\n      sampleSize,\n      effectFactory\n    });\n    this.onprocessorerror = (e) => {\n      console.error(\"Error from \" + this.fJSONDsp.name + \" FaustPolyAudioWorkletNode\");\n      throw e;\n    };\n    this.fJSONEffect = effectFactory ? JSON.parse(effectFactory.json) : null;\n    if (this.fJSONEffect) {\n      FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n    }\n  }\n  keyOn(channel, pitch, velocity) {\n    const e = { type: \"keyOn\", data: [channel, pitch, velocity] };\n    this.port.postMessage(e);\n  }\n  keyOff(channel, pitch, velocity) {\n    const e = { type: \"keyOff\", data: [channel, pitch, velocity] };\n    this.port.postMessage(e);\n  }\n  allNotesOff(hard) {\n    const e = { type: \"ctrlChange\", data: [0, 123, 0] };\n    this.port.postMessage(e);\n  }\n  getMeta() {\n    const o = this.fJSONDsp;\n    const e = this.fJSONEffect;\n    const r = { ...o };\n    if (e) {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Sequencer\",\n        items: [\n          { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n          { type: \"vgroup\", label: \"Effect\", items: e.ui }\n        ]\n      }];\n    } else {\n      r.ui = [{\n        type: \"tgroup\",\n        label: \"Polyphonic\",\n        items: [\n          { type: \"vgroup\", label: \"Voices\", items: o.ui }\n        ]\n      }];\n    }\n    return r;\n  }\n  getJSON() {\n    return JSON.stringify(this.getMeta());\n  }\n  getUI() {\n    return this.getMeta().ui;\n  }\n};\n\n// src/FaustScriptProcessorNode.ts\nvar FaustScriptProcessorNode = class extends (globalThis.ScriptProcessorNode || null) {\n  init(instance) {\n    this.fDSPCode = instance;\n    this.fInputs = new Array(this.fDSPCode.getNumInputs());\n    this.fOutputs = new Array(this.fDSPCode.getNumOutputs());\n    this.onaudioprocess = (e) => {\n      for (let chan = 0; chan < this.fDSPCode.getNumInputs(); chan++) {\n        this.fInputs[chan] = e.inputBuffer.getChannelData(chan);\n      }\n      for (let chan = 0; chan < this.fDSPCode.getNumOutputs(); chan++) {\n        this.fOutputs[chan] = e.outputBuffer.getChannelData(chan);\n      }\n      return this.fDSPCode.compute(this.fInputs, this.fOutputs);\n    };\n    this.start();\n  }\n  compute(input, output) {\n    return this.fDSPCode.compute(input, output);\n  }\n  setOutputParamHandler(handler) {\n    this.fDSPCode.setOutputParamHandler(handler);\n  }\n  getOutputParamHandler() {\n    return this.fDSPCode.getOutputParamHandler();\n  }\n  setComputeHandler(handler) {\n    this.fDSPCode.setComputeHandler(handler);\n  }\n  getComputeHandler() {\n    return this.fDSPCode.getComputeHandler();\n  }\n  setPlotHandler(handler) {\n    this.fDSPCode.setPlotHandler(handler);\n  }\n  getPlotHandler() {\n    return this.fDSPCode.getPlotHandler();\n  }\n  getNumInputs() {\n    return this.fDSPCode.getNumInputs();\n  }\n  getNumOutputs() {\n    return this.fDSPCode.getNumOutputs();\n  }\n  metadata(handler) {\n  }\n  midiMessage(data) {\n    this.fDSPCode.midiMessage(data);\n  }\n  ctrlChange(chan, ctrl, value) {\n    this.fDSPCode.ctrlChange(chan, ctrl, value);\n  }\n  pitchWheel(chan, value) {\n    this.fDSPCode.pitchWheel(chan, value);\n  }\n  setParamValue(path, value) {\n    this.fDSPCode.setParamValue(path, value);\n  }\n  getParamValue(path) {\n    return this.fDSPCode.getParamValue(path);\n  }\n  getParams() {\n    return this.fDSPCode.getParams();\n  }\n  getMeta() {\n    return this.fDSPCode.getMeta();\n  }\n  getJSON() {\n    return this.fDSPCode.getJSON();\n  }\n  getDescriptors() {\n    return this.fDSPCode.getDescriptors();\n  }\n  getUI() {\n    return this.fDSPCode.getUI();\n  }\n  start() {\n    this.fDSPCode.start();\n  }\n  stop() {\n    this.fDSPCode.stop();\n  }\n  destroy() {\n    this.fDSPCode.destroy();\n  }\n};\nvar FaustMonoScriptProcessorNode = class extends FaustScriptProcessorNode {\n};\nvar FaustPolyScriptProcessorNode = class extends FaustScriptProcessorNode {\n  keyOn(channel, pitch, velocity) {\n    this.fDSPCode.keyOn(channel, pitch, velocity);\n  }\n  keyOff(channel, pitch, velocity) {\n    this.fDSPCode.keyOff(channel, pitch, velocity);\n  }\n  allNotesOff(hard) {\n    this.fDSPCode.allNotesOff(hard);\n  }\n};\n\n// src/FaustDspGenerator.ts\nvar _FaustMonoDspGenerator = class {\n  constructor() {\n    this.factory = null;\n  }\n  async compile(compiler, name, code, args) {\n    this.factory = await compiler.createMonoDSPFactory(name, code, args);\n    if (!this.factory)\n      return null;\n    this.name = name + this.factory.cfactory.toString();\n    return this;\n  }\n  async createNode(context, name = this.name, factory = this.factory, sp = false, bufferSize = 1024) {\n    if (!factory)\n      throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n    const meta = JSON.parse(factory.json);\n    const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n    if (sp) {\n      const instance = await FaustWasmInstantiator_default.createAsyncMonoDSPInstance(factory);\n      const monoDsp = new FaustMonoWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize);\n      const sp2 = context.createScriptProcessor(bufferSize, monoDsp.getNumInputs(), monoDsp.getNumOutputs());\n      Object.setPrototypeOf(sp2, FaustMonoScriptProcessorNode.prototype);\n      sp2.init(monoDsp);\n      return sp2;\n    } else {\n      if (!_FaustMonoDspGenerator.gWorkletProcessors.has(name)) {\n        try {\n          const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n            dspName: name,\n            dspMeta: meta,\n            poly: false\n          })};\n// Implementation needed classes of functions\nconst ${FaustDspInstance_default.name}_default = ${FaustDspInstance_default.toString()}\nconst ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nconst ${FaustMonoWebAudioDsp.name} = ${FaustMonoWebAudioDsp.toString()}\nconst ${FaustWasmInstantiator_default.name} = ${FaustWasmInstantiator_default.toString()}\n// Put them in dependencies\nconst dependencies = {\n    ${FaustBaseWebAudioDsp.name},\n    ${FaustMonoWebAudioDsp.name},\n    ${FaustWasmInstantiator_default.name}\n};\n// Generate the actual AudioWorkletProcessor code\n(${FaustAudioWorkletProcessor_default.toString()})(dependencies, faustData);\n`;\n          const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n          await context.audioWorklet.addModule(url);\n          _FaustMonoDspGenerator.gWorkletProcessors.add(name);\n        } catch (e) {\n          console.error(`=> exception raised while running createMonoNode: ${e}`);\n          console.error(`=> check that your page is served using https.${e}`);\n          return null;\n        }\n      }\n      const node = new FaustMonoAudioWorkletNode(context, name, factory, sampleSize);\n      return node;\n    }\n  }\n  async createOfflineProcessor(sampleRate, bufferSize, factory = this.factory) {\n    if (!factory)\n      throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n    const meta = JSON.parse(factory.json);\n    const instance = await FaustWasmInstantiator_default.createAsyncMonoDSPInstance(factory);\n    const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n    const monoDsp = new FaustMonoWebAudioDsp(instance, sampleRate, sampleSize, bufferSize);\n    return new FaustOfflineProcessor_default(monoDsp, bufferSize);\n  }\n};\nvar FaustMonoDspGenerator = _FaustMonoDspGenerator;\nFaustMonoDspGenerator.gWorkletProcessors = new Set();\nvar _FaustPolyDspGenerator = class {\n  constructor() {\n    this.voiceFactory = null;\n    this.effectFactory = null;\n  }\n  async compile(compiler, name, dspCode, args, effectCode = `\nadapt(1,1) = _; adapt(2,2) = _,_; adapt(1,2) = _ <: _,_; adapt(2,1) = _,_ :> _;\nadaptor(F,G) = adapt(outputs(F),inputs(G));\ndsp_code = environment{${dspCode}};\nprocess = adaptor(dsp_code.process, dsp_code.effect) : dsp_code.effect;`) {\n    this.voiceFactory = await compiler.createPolyDSPFactory(name, dspCode, args);\n    if (!this.voiceFactory)\n      return null;\n    this.effectFactory = await compiler.createPolyDSPFactory(name, effectCode, args);\n    this.name = name + this.voiceFactory.cfactory.toString() + \"_poly\";\n    const voiceMeta = JSON.parse(this.voiceFactory.json);\n    const isDouble = voiceMeta.compile_options.match(\"-double\");\n    const { mixerBuffer, mixerModule } = await compiler.getAsyncInternalMixerModule(!!isDouble);\n    this.mixerBuffer = mixerBuffer;\n    this.mixerModule = mixerModule;\n    return this;\n  }\n  async createNode(context, voices, name = this.name, voiceFactory = this.voiceFactory, mixerModule = this.mixerModule, effectFactory = this.effectFactory, sp = false, bufferSize = 1024) {\n    if (!voiceFactory)\n      throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n    const voiceMeta = JSON.parse(voiceFactory.json);\n    const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : void 0;\n    const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n    if (sp) {\n      const instance = await FaustWasmInstantiator_default.createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory || void 0);\n      const polyDsp = new FaustPolyWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize);\n      const sp2 = context.createScriptProcessor(bufferSize, polyDsp.getNumInputs(), polyDsp.getNumOutputs());\n      Object.setPrototypeOf(sp2, FaustPolyScriptProcessorNode.prototype);\n      sp2.init(polyDsp);\n      return sp2;\n    } else {\n      if (!_FaustPolyDspGenerator.gWorkletProcessors.has(name)) {\n        try {\n          const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n            dspName: name,\n            dspMeta: voiceMeta,\n            poly: true,\n            effectMeta\n          })};\n// Implementation needed classes of functions\nconst ${FaustDspInstance_default.name}_default = ${FaustDspInstance_default.toString()}\nconst ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nconst ${FaustPolyWebAudioDsp.name} = ${FaustPolyWebAudioDsp.toString()}\nconst ${FaustWebAudioDspVoice.name} = ${FaustWebAudioDspVoice.toString()}\nconst ${FaustWasmInstantiator_default.name} = ${FaustWasmInstantiator_default.toString()}\n// Put them in dependencies\nconst dependencies = {\n    ${FaustBaseWebAudioDsp.name},\n    ${FaustPolyWebAudioDsp.name},\n    ${FaustWasmInstantiator_default.name}\n};\n// Generate the actual AudioWorkletProcessor code\n(${FaustAudioWorkletProcessor_default.toString()})(dependencies, faustData);\n`;\n          const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n          await context.audioWorklet.addModule(url);\n          _FaustPolyDspGenerator.gWorkletProcessors.add(name);\n        } catch (e) {\n          console.error(`=> exception raised while running createMonoNode: ${e}`);\n          console.error(`=> check that your page is served using https.${e}`);\n          return null;\n        }\n      }\n      const node = new FaustPolyAudioWorkletNode(context, name, voiceFactory, mixerModule, voices, sampleSize, effectFactory || void 0);\n      return node;\n    }\n  }\n};\nvar FaustPolyDspGenerator = _FaustPolyDspGenerator;\nFaustPolyDspGenerator.gWorkletProcessors = new Set();\n\n// src/index.ts\nvar src_default = {\n  instantiateFaustModule: instantiateFaustModule_default,\n  getFaustAudioWorkletProcessor: FaustAudioWorkletProcessor_default,\n  FaustDspInstance: FaustDspInstance_default,\n  FaustCompiler: FaustCompiler_default,\n  FaustWasmInstantiator: FaustWasmInstantiator_default,\n  FaustOfflineProcessor: FaustOfflineProcessor_default,\n  FaustSvgDiagrams: FaustSvgDiagrams_default,\n  LibFaust: LibFaust_default,\n  WavEncoder: WavEncoder_default,\n  WavDecoder: WavDecoder_default\n};\n/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.9.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n//# sourceMappingURL=index.js.map\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@shren/faustwasm/dist sync recursive\";\nmodule.exports = webpackEmptyContext;","import { FaustAudioWorkletNode, FaustDspMeta, FaustMonoDspGenerator, LooseFaustDspFactory } from \"@shren/faustwasm\";\r\nimport { author, name, version, description } from \"./index\";\r\nimport { Bang, DefaultObject, DefaultUI } from \"./sdk\";\r\nimport type { IArgsMeta, IInletsMeta, IOutletsMeta } from \"@jspatcher/jspatcher/src/core/objects/base/AbstractObject\";\r\n\r\nexport interface FaustDspInternalState {\r\n    dspFactory: LooseFaustDspFactory;\r\n    faustDspGenerator: FaustMonoDspGenerator;\r\n    dspId: string;\r\n    merger: ChannelMergerNode;\r\n    node: FaustAudioWorkletNode;\r\n    splitter: ChannelSplitterNode;\r\n    constant: ConstantSourceNode;\r\n    constantConnected: number;\r\n}\r\n\r\nexport default class FaustDspObject<\r\n    S = {},\r\n    I extends [Bang | any, ...any[]] = [Bang],\r\n    O extends any[] = [],\r\n    A extends any[] = any[],\r\n    P = {}\r\n> extends DefaultObject<{}, S, I, O, A, P> {\r\n    static package = name;\r\n    static author = author;\r\n    static version = version;\r\n    static description = description;\r\n    static inlets: IInletsMeta = [{\r\n        isHot: true,\r\n        type: \"signal\",\r\n        description: \"audio input connection\",\r\n        varLength: true\r\n    }];\r\n    static outlets: IOutletsMeta = [{\r\n        type: \"signal\",\r\n        description: \"audio output connection\",\r\n        varLength: true\r\n    }];\r\n    static args: IArgsMeta = [{\r\n        type: \"number\",\r\n        optional: true,\r\n        description: \"Initial value for the first unconnected inlet\",\r\n        default: 0\r\n    }];\r\n    static UI = DefaultUI;\r\n    _: Partial<FaustDspInternalState> & Record<string, any> = {\r\n        constant: this.audioCtx.createConstantSource()\r\n    };\r\n    get unconnected() {\r\n        return this.inletLines.map(set => [...set].find(l => l.isConnectableByAudio)).findIndex(l => !l);\r\n    }\r\n    checkAndFillUnconnected() {\r\n        const { unconnected } = this;\r\n        const { constant, merger, constantConnected } = this._;\r\n        if (!merger) return;\r\n        if (unconnected !== constantConnected) {\r\n            if (constantConnected !== -1) constant.disconnect();\r\n            if (unconnected !== -1) constant.connect(merger, 0, unconnected);\r\n            this._.constantConnected = unconnected;\r\n        }\r\n    }\r\n    subscribe() {\r\n        this.on(\"preInit\", () => {\r\n            const meta: FaustDspMeta = JSON.parse(this._.dspFactory.json);\r\n            const { inputs, outputs } = meta;\r\n            this.inlets = inputs;\r\n            this.outlets = outputs;\r\n            this.disconnectAudio();\r\n            if (inputs) {\r\n                const merger = this.audioCtx.createChannelMerger(inputs);\r\n                this._.merger = merger;\r\n                this.inletAudioConnections = new Array(inputs).fill(null).map((v, i) => ({ node: merger, index: i }));\r\n            }\r\n            const splitter = this.audioCtx.createChannelSplitter(outputs);\r\n            this._.splitter = splitter;\r\n            this.outletAudioConnections = new Array(outputs).fill(null).map((v, i) => ({ node: splitter, index: i }));\r\n            this.connectAudio();\r\n        });\r\n        this.on(\"postInit\", async () => {\r\n            const { dspFactory, faustDspGenerator, dspId, constant, merger, splitter } = this._;\r\n            const node = await faustDspGenerator.createNode(this.audioCtx, dspId, dspFactory);\r\n            this._.node = node;\r\n            merger?.connect(node);\r\n            node.connect(splitter);\r\n            constant.offset.value = +this.args[0] || 0;\r\n            constant.start();\r\n            this.checkAndFillUnconnected();\r\n        });\r\n        this.on(\"argsUpdated\", ({ args }) => {\r\n            this._.constant.offset.value = +args[0] || 0;\r\n        })\r\n        this.on(\"inlet\", ({ inlet, data }) => {\r\n            if (typeof data === \"number\") {\r\n                this._.constant.offset.value = data;\r\n            }\r\n        });\r\n        this.on(\"connectedInlet\", () => this.checkAndFillUnconnected());\r\n        this.on(\"disconnectedInlet\", () => this.checkAndFillUnconnected());\r\n        this.on(\"destroy\", () => {\r\n            const { constant, merger, splitter, node } = this._;\r\n            constant?.disconnect();\r\n            merger?.disconnect();\r\n            splitter?.disconnect();\r\n            node?.disconnect();\r\n            node?.destroy();\r\n        })\r\n    }\r\n}\r\n","import type { LooseFaustDspFactory } from \"@shren/faustwasm\";\r\n\r\nexport default async () => {\r\n    const dsps: Record<string, LooseFaustDspFactory> = {};\r\n    const listIn = await import(\"../dsps/dsps.json\") as any;\r\n    const list = JSON.parse(listIn.default);\r\n    for (const dspId of list) {\r\n        const moduleUri = (await import(`../dsps/${dspId}/dspModule.wasm`)).default as string;\r\n        const moduleRes = await fetch(moduleUri);\r\n        const module = await WebAssembly.compileStreaming(moduleRes);\r\n        const json = (await import(`../dsps/${dspId}/dspMeta.json`)).default;\r\n        dsps[dspId] = {\r\n            module,\r\n            json\r\n        }\r\n    }\r\n    return dsps;\r\n};\r\n","import packageInfo from \"./package-info\";\r\nimport type { IExternalPackage } from \"@jspatcher/jspatcher/src/core/GlobalPackageManager\";\r\n\r\nexport const name = packageInfo.name.split(\"/\").pop().replace(/^package-/, '');\r\n\r\nexport const { author, license, keywords, version, description, jspatcher } = packageInfo;\r\n\r\nexport default { name, author, license, keywords, version, description, ...jspatcher } as IExternalPackage;\r\n","const json = require(\"../package.json\");\r\n\r\nexport default JSON.parse(json);\r\n","import type { IJSPatcherSDK } from \"@jspatcher/jspatcher/src/core/SDK\";\r\n\r\nconst sdk = (globalThis as any).jspatcherEnv.sdk as IJSPatcherSDK;\r\nexport const {\r\n    React,\r\n    PatcherAudio,\r\n    Patcher,\r\n    Box,\r\n    Line,\r\n    BaseObject,\r\n    BaseUI,\r\n    DefaultObject,\r\n    DefaultUI,\r\n    generateRemotedObject,\r\n    generateDefaultObject,\r\n    generateRemoteObject,\r\n    Bang,\r\n    isBang\r\n} = sdk;\r\n\r\nexport interface Bang extends InstanceType<typeof Bang> {}\r\nexport interface PatcherAudio extends InstanceType<typeof PatcherAudio> {}\r\nexport interface Patcher extends InstanceType<typeof Patcher> {}\r\nexport interface Box extends InstanceType<typeof Box> {}\r\nexport interface Line extends InstanceType<typeof Line> {}\r\nexport interface BaseObject extends InstanceType<typeof BaseObject> {}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"js/\" + {\"dsps_dsps_json\":\"d41e36cac85c0c8ad1a2\",\"dsps_abs_dspModule_wasm\":\"0e895ee6791de50053bb\",\"dsps_acos_dspModule_wasm\":\"e26672c503d40f2111d4\",\"dsps_acosh_dspModule_wasm\":\"6f0aa6108ac31d9d293e\",\"dsps_add_dspModule_wasm\":\"0d1387618bad1ae17ae1\",\"dsps_asin_dspModule_wasm\":\"9353243215bc0de84983\",\"dsps_asinh_dspModule_wasm\":\"7b13096f6480c9b64a41\",\"dsps_atan_dspModule_wasm\":\"17811b5924fc4bcfa2d0\",\"dsps_atan2_dspModule_wasm\":\"f39523de16707d695fab\",\"dsps_atanh_dspModule_wasm\":\"46eefbd4bf523e0daada\",\"dsps_atodb_dspModule_wasm\":\"4b669635bed770a4f84d\",\"dsps_bitand_dspModule_wasm\":\"4ce0f5b5615b165a0a6b\",\"dsps_bitor_dspModule_wasm\":\"757fa92aaed2a537a27d\",\"dsps_bitxor_dspModule_wasm\":\"502e84d5f3212e454632\",\"dsps_change_dspModule_wasm\":\"a3e83b249ba823cce546\",\"dsps_dbtoa_dspModule_wasm\":\"42f19657f03936408587\",\"dsps_div_dspModule_wasm\":\"cfe50ad6665653129c85\",\"dsps_eq_dspModule_wasm\":\"43be7dbe2410d2fff2f0\",\"dsps_ftom_dspModule_wasm\":\"ceb793c4c0589a21cab7\",\"dsps_geq_dspModule_wasm\":\"40677f34330c17e708d6\",\"dsps_gtr_dspModule_wasm\":\"209c0a8f8152f67e5f23\",\"dsps_leq_dspModule_wasm\":\"d8e31072f31be1422b08\",\"dsps_log_dspModule_wasm\":\"656a3462f5b4865c39be\",\"dsps_lss_dspModule_wasm\":\"135a1b64bae9f9568679\",\"dsps_max_dspModule_wasm\":\"c106ea8e46f7c2f380b6\",\"dsps_min_dspModule_wasm\":\"3cb2431b0f63dd3d73fe\",\"dsps_mod_dspModule_wasm\":\"c873f5866950d927e2bb\",\"dsps_mtof_dspModule_wasm\":\"489240c018cf3f9993da\",\"dsps_mul_dspModule_wasm\":\"f2260894f0c9e561ad9e\",\"dsps_neq_dspModule_wasm\":\"537121f702a700f5eade\",\"dsps_noise_dspModule_wasm\":\"91ac41da19a38f77c84e\",\"dsps_pink_dspModule_wasm\":\"86e1dda760e4f0723259\",\"dsps_rdiv_dspModule_wasm\":\"52bd0a1a7acf79006f68\",\"dsps_rsub_dspModule_wasm\":\"69b5bc21a2aa08fff8ea\",\"dsps_sub_dspModule_wasm\":\"c9230d79b2d04ae9ef52\",\"dsps_abs_dspMeta_json\":\"6c3817caecba29c40ba9\",\"dsps_acos_dspMeta_json\":\"12133c48a2c05a2cce87\",\"dsps_acosh_dspMeta_json\":\"b3bece826caa86450e9e\",\"dsps_add_dspMeta_json\":\"6da97aa4361554dd99e7\",\"dsps_asin_dspMeta_json\":\"8140f9f4a99b46a1bc5c\",\"dsps_asinh_dspMeta_json\":\"78bed74ab6c90673e1b6\",\"dsps_atan_dspMeta_json\":\"e31ac747e32e12fbe13a\",\"dsps_atan2_dspMeta_json\":\"b2f14bc3000a1b641238\",\"dsps_atanh_dspMeta_json\":\"1500841eee8536170e3f\",\"dsps_atodb_dspMeta_json\":\"2711f4fa9a20a08f5fd1\",\"dsps_bitand_dspMeta_json\":\"f8f8e1aaead815d05393\",\"dsps_bitor_dspMeta_json\":\"0492285e4001b9bb35bf\",\"dsps_bitxor_dspMeta_json\":\"efca265b74ffa2ad2cba\",\"dsps_change_dspMeta_json\":\"dc2acf5598e3f9530b88\",\"dsps_dbtoa_dspMeta_json\":\"facbf9ea77af396e0dd7\",\"dsps_div_dspMeta_json\":\"66288eba2b16e46319c5\",\"dsps_eq_dspMeta_json\":\"8bd957eb1e00368cc97e\",\"dsps_ftom_dspMeta_json\":\"0b9e94d6c6980b077adc\",\"dsps_geq_dspMeta_json\":\"96e8e77eb6fa3f2a7986\",\"dsps_gtr_dspMeta_json\":\"2a5f03f3c9b3dec25405\",\"dsps_leq_dspMeta_json\":\"ee6f70983dc3eec249bd\",\"dsps_log_dspMeta_json\":\"7991feedbe5d7a307477\",\"dsps_lss_dspMeta_json\":\"4368b0aac56a6bf5ac90\",\"dsps_max_dspMeta_json\":\"66fad1b0eaa76674e58e\",\"dsps_min_dspMeta_json\":\"81f11dcb708ae890f8fc\",\"dsps_mod_dspMeta_json\":\"c860917339731b4ae8e6\",\"dsps_mtof_dspMeta_json\":\"7f2e7c95d94bb7756967\",\"dsps_mul_dspMeta_json\":\"0fe7a788b828c4f3b32c\",\"dsps_neq_dspMeta_json\":\"5d1f374404b85c1c1866\",\"dsps_noise_dspMeta_json\":\"93457af337c77b0e0bd3\",\"dsps_pink_dspMeta_json\":\"fd5f4cf6c927abf10774\",\"dsps_rdiv_dspMeta_json\":\"28036c01195f9877c25e\",\"dsps_rsub_dspMeta_json\":\"9b4f8b071da9f777f082\",\"dsps_sub_dspMeta_json\":\"d10f0d4270bcf7822fa0\"}[chunkId] + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"@jspatcher/package-dsp:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\t\tscript.type = \"module\";\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (typeof import.meta.url === \"string\") scriptUrl = import.meta.url\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"index.jspatpkg\": 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_jspatcher_package_dsp\"] = self[\"webpackChunk_jspatcher_package_dsp\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import { FaustMonoDspGenerator } from \"@shren/faustwasm\";\r\nimport getDsps from \"./getDsps\";\r\nimport FaustDspObject, { FaustDspInternalState } from \"./FaustDspObject\";\r\n\r\nexport default async () => {\r\n    const objects: Record<string, typeof FaustDspObject> = {};\r\n    const dspIdMap: Record<string, string> = {\r\n        add: \"+\",\r\n        sub: \"-\",\r\n        rsub: \"!-\",\r\n        mul: \"*\",\r\n        div: \"/\",\r\n        rdiv: \"!/\",\r\n        gtr: \">\",\r\n        geq: \">=\",\r\n        lss: \"<\",\r\n        leq: \"<=\",\r\n        eq: \"=\",\r\n        neq: \"!=\",\r\n        mod: \"%\",\r\n        bitand: \"&\",\r\n        bitor: \"|\",\r\n        max: \"maximum\",\r\n        min: \"minimum\",\r\n    };\r\n    const dsps = await getDsps();\r\n    const faustDspGenerator = new FaustMonoDspGenerator();\r\n    for (const dspId in dsps) {\r\n        const dspFactory = dsps[dspId];\r\n        objects[`${dspIdMap[dspId] || dspId}~`] = class extends FaustDspObject<any, any, any, any, any> {\r\n            _: FaustDspInternalState = {\r\n                ...this._,\r\n                dspFactory,\r\n                dspId,\r\n                faustDspGenerator\r\n            }\r\n        }\r\n    }\r\n    return objects;\r\n};\r\n"],"names":[],"sourceRoot":""}